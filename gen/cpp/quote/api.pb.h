// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quote/api.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_quote_2fapi_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_quote_2fapi_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_quote_2fapi_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_quote_2fapi_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_quote_2fapi_2eproto;
namespace longportapp {
namespace quote {
namespace v1 {
class Brokers;
struct BrokersDefaultTypeInternal;
extern BrokersDefaultTypeInternal _Brokers_default_instance_;
class Candlestick;
struct CandlestickDefaultTypeInternal;
extern CandlestickDefaultTypeInternal _Candlestick_default_instance_;
class CapitalDistributionResponse;
struct CapitalDistributionResponseDefaultTypeInternal;
extern CapitalDistributionResponseDefaultTypeInternal _CapitalDistributionResponse_default_instance_;
class CapitalDistributionResponse_CapitalDistribution;
struct CapitalDistributionResponse_CapitalDistributionDefaultTypeInternal;
extern CapitalDistributionResponse_CapitalDistributionDefaultTypeInternal _CapitalDistributionResponse_CapitalDistribution_default_instance_;
class CapitalFlowIntradayRequest;
struct CapitalFlowIntradayRequestDefaultTypeInternal;
extern CapitalFlowIntradayRequestDefaultTypeInternal _CapitalFlowIntradayRequest_default_instance_;
class CapitalFlowIntradayResponse;
struct CapitalFlowIntradayResponseDefaultTypeInternal;
extern CapitalFlowIntradayResponseDefaultTypeInternal _CapitalFlowIntradayResponse_default_instance_;
class CapitalFlowIntradayResponse_CapitalFlowLine;
struct CapitalFlowIntradayResponse_CapitalFlowLineDefaultTypeInternal;
extern CapitalFlowIntradayResponse_CapitalFlowLineDefaultTypeInternal _CapitalFlowIntradayResponse_CapitalFlowLine_default_instance_;
class Depth;
struct DepthDefaultTypeInternal;
extern DepthDefaultTypeInternal _Depth_default_instance_;
class FilterConfig;
struct FilterConfigDefaultTypeInternal;
extern FilterConfigDefaultTypeInternal _FilterConfig_default_instance_;
class FilterWarrant;
struct FilterWarrantDefaultTypeInternal;
extern FilterWarrantDefaultTypeInternal _FilterWarrant_default_instance_;
class IssuerInfo;
struct IssuerInfoDefaultTypeInternal;
extern IssuerInfoDefaultTypeInternal _IssuerInfo_default_instance_;
class IssuerInfoResponse;
struct IssuerInfoResponseDefaultTypeInternal;
extern IssuerInfoResponseDefaultTypeInternal _IssuerInfoResponse_default_instance_;
class Line;
struct LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class MarketTradeDayRequest;
struct MarketTradeDayRequestDefaultTypeInternal;
extern MarketTradeDayRequestDefaultTypeInternal _MarketTradeDayRequest_default_instance_;
class MarketTradeDayResponse;
struct MarketTradeDayResponseDefaultTypeInternal;
extern MarketTradeDayResponseDefaultTypeInternal _MarketTradeDayResponse_default_instance_;
class MarketTradePeriod;
struct MarketTradePeriodDefaultTypeInternal;
extern MarketTradePeriodDefaultTypeInternal _MarketTradePeriod_default_instance_;
class MarketTradePeriodResponse;
struct MarketTradePeriodResponseDefaultTypeInternal;
extern MarketTradePeriodResponseDefaultTypeInternal _MarketTradePeriodResponse_default_instance_;
class MultiSecurityRequest;
struct MultiSecurityRequestDefaultTypeInternal;
extern MultiSecurityRequestDefaultTypeInternal _MultiSecurityRequest_default_instance_;
class OptionChainDateListResponse;
struct OptionChainDateListResponseDefaultTypeInternal;
extern OptionChainDateListResponseDefaultTypeInternal _OptionChainDateListResponse_default_instance_;
class OptionChainDateStrikeInfoRequest;
struct OptionChainDateStrikeInfoRequestDefaultTypeInternal;
extern OptionChainDateStrikeInfoRequestDefaultTypeInternal _OptionChainDateStrikeInfoRequest_default_instance_;
class OptionChainDateStrikeInfoResponse;
struct OptionChainDateStrikeInfoResponseDefaultTypeInternal;
extern OptionChainDateStrikeInfoResponseDefaultTypeInternal _OptionChainDateStrikeInfoResponse_default_instance_;
class OptionExtend;
struct OptionExtendDefaultTypeInternal;
extern OptionExtendDefaultTypeInternal _OptionExtend_default_instance_;
class OptionQuote;
struct OptionQuoteDefaultTypeInternal;
extern OptionQuoteDefaultTypeInternal _OptionQuote_default_instance_;
class OptionQuoteResponse;
struct OptionQuoteResponseDefaultTypeInternal;
extern OptionQuoteResponseDefaultTypeInternal _OptionQuoteResponse_default_instance_;
class ParticipantBrokerIdsResponse;
struct ParticipantBrokerIdsResponseDefaultTypeInternal;
extern ParticipantBrokerIdsResponseDefaultTypeInternal _ParticipantBrokerIdsResponse_default_instance_;
class ParticipantInfo;
struct ParticipantInfoDefaultTypeInternal;
extern ParticipantInfoDefaultTypeInternal _ParticipantInfo_default_instance_;
class PrePostQuote;
struct PrePostQuoteDefaultTypeInternal;
extern PrePostQuoteDefaultTypeInternal _PrePostQuote_default_instance_;
class PushBrokers;
struct PushBrokersDefaultTypeInternal;
extern PushBrokersDefaultTypeInternal _PushBrokers_default_instance_;
class PushDepth;
struct PushDepthDefaultTypeInternal;
extern PushDepthDefaultTypeInternal _PushDepth_default_instance_;
class PushQuote;
struct PushQuoteDefaultTypeInternal;
extern PushQuoteDefaultTypeInternal _PushQuote_default_instance_;
class PushTrade;
struct PushTradeDefaultTypeInternal;
extern PushTradeDefaultTypeInternal _PushTrade_default_instance_;
class RateLimit;
struct RateLimitDefaultTypeInternal;
extern RateLimitDefaultTypeInternal _RateLimit_default_instance_;
class SecurityBrokersResponse;
struct SecurityBrokersResponseDefaultTypeInternal;
extern SecurityBrokersResponseDefaultTypeInternal _SecurityBrokersResponse_default_instance_;
class SecurityCalcIndex;
struct SecurityCalcIndexDefaultTypeInternal;
extern SecurityCalcIndexDefaultTypeInternal _SecurityCalcIndex_default_instance_;
class SecurityCalcQuoteRequest;
struct SecurityCalcQuoteRequestDefaultTypeInternal;
extern SecurityCalcQuoteRequestDefaultTypeInternal _SecurityCalcQuoteRequest_default_instance_;
class SecurityCalcQuoteResponse;
struct SecurityCalcQuoteResponseDefaultTypeInternal;
extern SecurityCalcQuoteResponseDefaultTypeInternal _SecurityCalcQuoteResponse_default_instance_;
class SecurityCandlestickRequest;
struct SecurityCandlestickRequestDefaultTypeInternal;
extern SecurityCandlestickRequestDefaultTypeInternal _SecurityCandlestickRequest_default_instance_;
class SecurityCandlestickResponse;
struct SecurityCandlestickResponseDefaultTypeInternal;
extern SecurityCandlestickResponseDefaultTypeInternal _SecurityCandlestickResponse_default_instance_;
class SecurityDepthResponse;
struct SecurityDepthResponseDefaultTypeInternal;
extern SecurityDepthResponseDefaultTypeInternal _SecurityDepthResponse_default_instance_;
class SecurityHistoryCandlestickRequest;
struct SecurityHistoryCandlestickRequestDefaultTypeInternal;
extern SecurityHistoryCandlestickRequestDefaultTypeInternal _SecurityHistoryCandlestickRequest_default_instance_;
class SecurityHistoryCandlestickRequest_DateQuery;
struct SecurityHistoryCandlestickRequest_DateQueryDefaultTypeInternal;
extern SecurityHistoryCandlestickRequest_DateQueryDefaultTypeInternal _SecurityHistoryCandlestickRequest_DateQuery_default_instance_;
class SecurityHistoryCandlestickRequest_OffsetQuery;
struct SecurityHistoryCandlestickRequest_OffsetQueryDefaultTypeInternal;
extern SecurityHistoryCandlestickRequest_OffsetQueryDefaultTypeInternal _SecurityHistoryCandlestickRequest_OffsetQuery_default_instance_;
class SecurityIntradayRequest;
struct SecurityIntradayRequestDefaultTypeInternal;
extern SecurityIntradayRequestDefaultTypeInternal _SecurityIntradayRequest_default_instance_;
class SecurityIntradayResponse;
struct SecurityIntradayResponseDefaultTypeInternal;
extern SecurityIntradayResponseDefaultTypeInternal _SecurityIntradayResponse_default_instance_;
class SecurityQuote;
struct SecurityQuoteDefaultTypeInternal;
extern SecurityQuoteDefaultTypeInternal _SecurityQuote_default_instance_;
class SecurityQuoteResponse;
struct SecurityQuoteResponseDefaultTypeInternal;
extern SecurityQuoteResponseDefaultTypeInternal _SecurityQuoteResponse_default_instance_;
class SecurityRequest;
struct SecurityRequestDefaultTypeInternal;
extern SecurityRequestDefaultTypeInternal _SecurityRequest_default_instance_;
class SecurityStaticInfoResponse;
struct SecurityStaticInfoResponseDefaultTypeInternal;
extern SecurityStaticInfoResponseDefaultTypeInternal _SecurityStaticInfoResponse_default_instance_;
class SecurityTradeRequest;
struct SecurityTradeRequestDefaultTypeInternal;
extern SecurityTradeRequestDefaultTypeInternal _SecurityTradeRequest_default_instance_;
class SecurityTradeResponse;
struct SecurityTradeResponseDefaultTypeInternal;
extern SecurityTradeResponseDefaultTypeInternal _SecurityTradeResponse_default_instance_;
class StaticInfo;
struct StaticInfoDefaultTypeInternal;
extern StaticInfoDefaultTypeInternal _StaticInfo_default_instance_;
class StrikePriceInfo;
struct StrikePriceInfoDefaultTypeInternal;
extern StrikePriceInfoDefaultTypeInternal _StrikePriceInfo_default_instance_;
class SubTypeList;
struct SubTypeListDefaultTypeInternal;
extern SubTypeListDefaultTypeInternal _SubTypeList_default_instance_;
class SubscribeRequest;
struct SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class SubscriptionRequest;
struct SubscriptionRequestDefaultTypeInternal;
extern SubscriptionRequestDefaultTypeInternal _SubscriptionRequest_default_instance_;
class SubscriptionResponse;
struct SubscriptionResponseDefaultTypeInternal;
extern SubscriptionResponseDefaultTypeInternal _SubscriptionResponse_default_instance_;
class Trade;
struct TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
class TradePeriod;
struct TradePeriodDefaultTypeInternal;
extern TradePeriodDefaultTypeInternal _TradePeriod_default_instance_;
class UnsubscribeRequest;
struct UnsubscribeRequestDefaultTypeInternal;
extern UnsubscribeRequestDefaultTypeInternal _UnsubscribeRequest_default_instance_;
class UnsubscribeResponse;
struct UnsubscribeResponseDefaultTypeInternal;
extern UnsubscribeResponseDefaultTypeInternal _UnsubscribeResponse_default_instance_;
class UserQuoteLevelDetail;
struct UserQuoteLevelDetailDefaultTypeInternal;
extern UserQuoteLevelDetailDefaultTypeInternal _UserQuoteLevelDetail_default_instance_;
class UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse;
struct UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUseDefaultTypeInternal;
extern UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUseDefaultTypeInternal _UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse_default_instance_;
class UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse;
struct UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUseDefaultTypeInternal;
extern UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUseDefaultTypeInternal _UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse_default_instance_;
class UserQuoteLevelDetail_MarketPackageDetail;
struct UserQuoteLevelDetail_MarketPackageDetailDefaultTypeInternal;
extern UserQuoteLevelDetail_MarketPackageDetailDefaultTypeInternal _UserQuoteLevelDetail_MarketPackageDetail_default_instance_;
class UserQuoteLevelDetail_PackageDetail;
struct UserQuoteLevelDetail_PackageDetailDefaultTypeInternal;
extern UserQuoteLevelDetail_PackageDetailDefaultTypeInternal _UserQuoteLevelDetail_PackageDetail_default_instance_;
class UserQuoteProfileRequest;
struct UserQuoteProfileRequestDefaultTypeInternal;
extern UserQuoteProfileRequestDefaultTypeInternal _UserQuoteProfileRequest_default_instance_;
class UserQuoteProfileResponse;
struct UserQuoteProfileResponseDefaultTypeInternal;
extern UserQuoteProfileResponseDefaultTypeInternal _UserQuoteProfileResponse_default_instance_;
class WarrantExtend;
struct WarrantExtendDefaultTypeInternal;
extern WarrantExtendDefaultTypeInternal _WarrantExtend_default_instance_;
class WarrantFilterListRequest;
struct WarrantFilterListRequestDefaultTypeInternal;
extern WarrantFilterListRequestDefaultTypeInternal _WarrantFilterListRequest_default_instance_;
class WarrantFilterListResponse;
struct WarrantFilterListResponseDefaultTypeInternal;
extern WarrantFilterListResponseDefaultTypeInternal _WarrantFilterListResponse_default_instance_;
class WarrantQuote;
struct WarrantQuoteDefaultTypeInternal;
extern WarrantQuoteDefaultTypeInternal _WarrantQuote_default_instance_;
class WarrantQuoteResponse;
struct WarrantQuoteResponseDefaultTypeInternal;
extern WarrantQuoteResponseDefaultTypeInternal _WarrantQuoteResponse_default_instance_;
}  // namespace v1
}  // namespace quote
}  // namespace longportapp
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace longportapp {
namespace quote {
namespace v1 {
enum Command : int {
  UNKNOWN_COMMAND = 0,
  HEART_BEAT = 1,
  AUTH = 2,
  RECONNECT = 3,
  QueryUserQuoteProfile = 4,
  Subscription = 5,
  Subscribe = 6,
  Unsubscribe = 7,
  QueryMarketTradePeriod = 8,
  QueryMarketTradeDay = 9,
  QuerySecurityStaticInfo = 10,
  QuerySecurityQuote = 11,
  QueryOptionQuote = 12,
  QueryWarrantQuote = 13,
  QueryDepth = 14,
  QueryBrokers = 15,
  QueryParticipantBrokerIds = 16,
  QueryTrade = 17,
  QueryIntraday = 18,
  QueryCandlestick = 19,
  QueryOptionChainDate = 20,
  QueryOptionChainDateStrikeInfo = 21,
  QueryWarrantIssuerInfo = 22,
  QueryWarrantFilterList = 23,
  QueryCapitalFlowIntraday = 24,
  QueryCapitalFlowDistribution = 25,
  QuerySecurityCalcIndex = 26,
  QueryHistoryCandlestick = 27,
  PushQuoteData = 101,
  PushDepthData = 102,
  PushBrokersData = 103,
  PushTradeData = 104,
  Command_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Command_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Command_IsValid(int value);
extern const uint32_t Command_internal_data_[];
constexpr Command Command_MIN = static_cast<Command>(0);
constexpr Command Command_MAX = static_cast<Command>(104);
constexpr int Command_ARRAYSIZE = 104 + 1;
const ::google::protobuf::EnumDescriptor*
Command_descriptor();
template <typename T>
const std::string& Command_Name(T value) {
  static_assert(std::is_same<T, Command>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Command_Name().");
  return ::google::protobuf::internal::NameOfEnum(Command_descriptor(), value);
}
inline bool Command_Parse(absl::string_view name, Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command>(
      Command_descriptor(), name, value);
}
enum TradeStatus : int {
  NORMAL = 0,
  HALTED = 1,
  DELISTED = 2,
  FUSE = 3,
  PREPARE_LIST = 4,
  CODE_MOVED = 5,
  TO_BE_OPENED = 6,
  SPLIT_STOCK_HALTS = 7,
  EXPIRED = 8,
  WARRANT_PREPARE_LIST = 9,
  SUSPEND_TRADE = 10,
  TradeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TradeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TradeStatus_IsValid(int value);
extern const uint32_t TradeStatus_internal_data_[];
constexpr TradeStatus TradeStatus_MIN = static_cast<TradeStatus>(0);
constexpr TradeStatus TradeStatus_MAX = static_cast<TradeStatus>(10);
constexpr int TradeStatus_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
TradeStatus_descriptor();
template <typename T>
const std::string& TradeStatus_Name(T value) {
  static_assert(std::is_same<T, TradeStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TradeStatus_Name().");
  return TradeStatus_Name(static_cast<TradeStatus>(value));
}
template <>
inline const std::string& TradeStatus_Name(TradeStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TradeStatus_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool TradeStatus_Parse(absl::string_view name, TradeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradeStatus>(
      TradeStatus_descriptor(), name, value);
}
enum TradeSession : int {
  NORMAL_TRADE = 0,
  PRE_TRADE = 1,
  POST_TRADE = 2,
  OVERNIGHT_TRADE = 3,
  TradeSession_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TradeSession_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TradeSession_IsValid(int value);
extern const uint32_t TradeSession_internal_data_[];
constexpr TradeSession TradeSession_MIN = static_cast<TradeSession>(0);
constexpr TradeSession TradeSession_MAX = static_cast<TradeSession>(3);
constexpr int TradeSession_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TradeSession_descriptor();
template <typename T>
const std::string& TradeSession_Name(T value) {
  static_assert(std::is_same<T, TradeSession>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TradeSession_Name().");
  return TradeSession_Name(static_cast<TradeSession>(value));
}
template <>
inline const std::string& TradeSession_Name(TradeSession value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TradeSession_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TradeSession_Parse(absl::string_view name, TradeSession* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradeSession>(
      TradeSession_descriptor(), name, value);
}
enum AdjustType : int {
  NO_ADJUST = 0,
  FORWARD_ADJUST = 1,
  AdjustType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AdjustType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AdjustType_IsValid(int value);
extern const uint32_t AdjustType_internal_data_[];
constexpr AdjustType AdjustType_MIN = static_cast<AdjustType>(0);
constexpr AdjustType AdjustType_MAX = static_cast<AdjustType>(1);
constexpr int AdjustType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
AdjustType_descriptor();
template <typename T>
const std::string& AdjustType_Name(T value) {
  static_assert(std::is_same<T, AdjustType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AdjustType_Name().");
  return AdjustType_Name(static_cast<AdjustType>(value));
}
template <>
inline const std::string& AdjustType_Name(AdjustType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AdjustType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool AdjustType_Parse(absl::string_view name, AdjustType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdjustType>(
      AdjustType_descriptor(), name, value);
}
enum Period : int {
  UNKNOWN_PERIOD = 0,
  ONE_MINUTE = 1,
  FIVE_MINUTE = 5,
  FIFTEEN_MINUTE = 15,
  THIRTY_MINUTE = 30,
  SIXTY_MINUTE = 60,
  DAY = 1000,
  WEEK = 2000,
  MONTH = 3000,
  YEAR = 4000,
  Period_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Period_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Period_IsValid(int value);
extern const uint32_t Period_internal_data_[];
constexpr Period Period_MIN = static_cast<Period>(0);
constexpr Period Period_MAX = static_cast<Period>(4000);
constexpr int Period_ARRAYSIZE = 4000 + 1;
const ::google::protobuf::EnumDescriptor*
Period_descriptor();
template <typename T>
const std::string& Period_Name(T value) {
  static_assert(std::is_same<T, Period>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Period_Name().");
  return ::google::protobuf::internal::NameOfEnum(Period_descriptor(), value);
}
inline bool Period_Parse(absl::string_view name, Period* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Period>(
      Period_descriptor(), name, value);
}
enum SubType : int {
  UNKNOWN_TYPE = 0,
  QUOTE = 1,
  DEPTH = 2,
  BROKERS = 3,
  TRADE = 4,
  SubType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SubType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SubType_IsValid(int value);
extern const uint32_t SubType_internal_data_[];
constexpr SubType SubType_MIN = static_cast<SubType>(0);
constexpr SubType SubType_MAX = static_cast<SubType>(4);
constexpr int SubType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
SubType_descriptor();
template <typename T>
const std::string& SubType_Name(T value) {
  static_assert(std::is_same<T, SubType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SubType_Name().");
  return SubType_Name(static_cast<SubType>(value));
}
template <>
inline const std::string& SubType_Name(SubType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SubType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool SubType_Parse(absl::string_view name, SubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubType>(
      SubType_descriptor(), name, value);
}
enum PushQuoteTag : int {
  Normal = 0,
  Eod = 1,
  PushQuoteTag_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PushQuoteTag_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PushQuoteTag_IsValid(int value);
extern const uint32_t PushQuoteTag_internal_data_[];
constexpr PushQuoteTag PushQuoteTag_MIN = static_cast<PushQuoteTag>(0);
constexpr PushQuoteTag PushQuoteTag_MAX = static_cast<PushQuoteTag>(1);
constexpr int PushQuoteTag_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
PushQuoteTag_descriptor();
template <typename T>
const std::string& PushQuoteTag_Name(T value) {
  static_assert(std::is_same<T, PushQuoteTag>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PushQuoteTag_Name().");
  return PushQuoteTag_Name(static_cast<PushQuoteTag>(value));
}
template <>
inline const std::string& PushQuoteTag_Name(PushQuoteTag value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PushQuoteTag_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool PushQuoteTag_Parse(absl::string_view name, PushQuoteTag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PushQuoteTag>(
      PushQuoteTag_descriptor(), name, value);
}
enum CalcIndex : int {
  CALCINDEX_UNKNOWN = 0,
  CALCINDEX_LAST_DONE = 1,
  CALCINDEX_CHANGE_VAL = 2,
  CALCINDEX_CHANGE_RATE = 3,
  CALCINDEX_VOLUME = 4,
  CALCINDEX_TURNOVER = 5,
  CALCINDEX_YTD_CHANGE_RATE = 6,
  CALCINDEX_TURNOVER_RATE = 7,
  CALCINDEX_TOTAL_MARKET_VALUE = 8,
  CALCINDEX_CAPITAL_FLOW = 9,
  CALCINDEX_AMPLITUDE = 10,
  CALCINDEX_VOLUME_RATIO = 11,
  CALCINDEX_PE_TTM_RATIO = 12,
  CALCINDEX_PB_RATIO = 13,
  CALCINDEX_DIVIDEND_RATIO_TTM = 14,
  CALCINDEX_FIVE_DAY_CHANGE_RATE = 15,
  CALCINDEX_TEN_DAY_CHANGE_RATE = 16,
  CALCINDEX_HALF_YEAR_CHANGE_RATE = 17,
  CALCINDEX_FIVE_MINUTES_CHANGE_RATE = 18,
  CALCINDEX_EXPIRY_DATE = 19,
  CALCINDEX_STRIKE_PRICE = 20,
  CALCINDEX_UPPER_STRIKE_PRICE = 21,
  CALCINDEX_LOWER_STRIKE_PRICE = 22,
  CALCINDEX_OUTSTANDING_QTY = 23,
  CALCINDEX_OUTSTANDING_RATIO = 24,
  CALCINDEX_PREMIUM = 25,
  CALCINDEX_ITM_OTM = 26,
  CALCINDEX_IMPLIED_VOLATILITY = 27,
  CALCINDEX_WARRANT_DELTA = 28,
  CALCINDEX_CALL_PRICE = 29,
  CALCINDEX_TO_CALL_PRICE = 30,
  CALCINDEX_EFFECTIVE_LEVERAGE = 31,
  CALCINDEX_LEVERAGE_RATIO = 32,
  CALCINDEX_CONVERSION_RATIO = 33,
  CALCINDEX_BALANCE_POINT = 34,
  CALCINDEX_OPEN_INTEREST = 35,
  CALCINDEX_DELTA = 36,
  CALCINDEX_GAMMA = 37,
  CALCINDEX_THETA = 38,
  CALCINDEX_VEGA = 39,
  CALCINDEX_RHO = 40,
  CalcIndex_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CalcIndex_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CalcIndex_IsValid(int value);
extern const uint32_t CalcIndex_internal_data_[];
constexpr CalcIndex CalcIndex_MIN = static_cast<CalcIndex>(0);
constexpr CalcIndex CalcIndex_MAX = static_cast<CalcIndex>(40);
constexpr int CalcIndex_ARRAYSIZE = 40 + 1;
const ::google::protobuf::EnumDescriptor*
CalcIndex_descriptor();
template <typename T>
const std::string& CalcIndex_Name(T value) {
  static_assert(std::is_same<T, CalcIndex>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CalcIndex_Name().");
  return CalcIndex_Name(static_cast<CalcIndex>(value));
}
template <>
inline const std::string& CalcIndex_Name(CalcIndex value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CalcIndex_descriptor,
                                                 0, 40>(
      static_cast<int>(value));
}
inline bool CalcIndex_Parse(absl::string_view name, CalcIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CalcIndex>(
      CalcIndex_descriptor(), name, value);
}
enum HistoryCandlestickQueryType : int {
  UNKNOWN_QUERY_TYPE = 0,
  QUERY_BY_OFFSET = 1,
  QUERY_BY_DATE = 2,
  HistoryCandlestickQueryType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HistoryCandlestickQueryType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HistoryCandlestickQueryType_IsValid(int value);
extern const uint32_t HistoryCandlestickQueryType_internal_data_[];
constexpr HistoryCandlestickQueryType HistoryCandlestickQueryType_MIN = static_cast<HistoryCandlestickQueryType>(0);
constexpr HistoryCandlestickQueryType HistoryCandlestickQueryType_MAX = static_cast<HistoryCandlestickQueryType>(2);
constexpr int HistoryCandlestickQueryType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
HistoryCandlestickQueryType_descriptor();
template <typename T>
const std::string& HistoryCandlestickQueryType_Name(T value) {
  static_assert(std::is_same<T, HistoryCandlestickQueryType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to HistoryCandlestickQueryType_Name().");
  return HistoryCandlestickQueryType_Name(static_cast<HistoryCandlestickQueryType>(value));
}
template <>
inline const std::string& HistoryCandlestickQueryType_Name(HistoryCandlestickQueryType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HistoryCandlestickQueryType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool HistoryCandlestickQueryType_Parse(absl::string_view name, HistoryCandlestickQueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HistoryCandlestickQueryType>(
      HistoryCandlestickQueryType_descriptor(), name, value);
}
enum Direction : int {
  BACKWARD = 0,
  FORWARD = 1,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Direction_IsValid(int value);
extern const uint32_t Direction_internal_data_[];
constexpr Direction Direction_MIN = static_cast<Direction>(0);
constexpr Direction Direction_MAX = static_cast<Direction>(1);
constexpr int Direction_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Direction_descriptor();
template <typename T>
const std::string& Direction_Name(T value) {
  static_assert(std::is_same<T, Direction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Direction_Name().");
  return Direction_Name(static_cast<Direction>(value));
}
template <>
inline const std::string& Direction_Name(Direction value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Direction_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Direction_Parse(absl::string_view name, Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Direction>(
      Direction_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WarrantExtend final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.WarrantExtend) */ {
 public:
  inline WarrantExtend() : WarrantExtend(nullptr) {}
  ~WarrantExtend() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WarrantExtend(::google::protobuf::internal::ConstantInitialized);

  inline WarrantExtend(const WarrantExtend& from)
      : WarrantExtend(nullptr, from) {}
  WarrantExtend(WarrantExtend&& from) noexcept
    : WarrantExtend() {
    *this = ::std::move(from);
  }

  inline WarrantExtend& operator=(const WarrantExtend& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarrantExtend& operator=(WarrantExtend&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WarrantExtend& default_instance() {
    return *internal_default_instance();
  }
  static inline const WarrantExtend* internal_default_instance() {
    return reinterpret_cast<const WarrantExtend*>(
               &_WarrantExtend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(WarrantExtend& a, WarrantExtend& b) {
    a.Swap(&b);
  }
  inline void Swap(WarrantExtend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarrantExtend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WarrantExtend* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WarrantExtend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WarrantExtend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WarrantExtend& from) {
    WarrantExtend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WarrantExtend* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.WarrantExtend";
  }
  protected:
  explicit WarrantExtend(::google::protobuf::Arena* arena);
  WarrantExtend(::google::protobuf::Arena* arena, const WarrantExtend& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpliedVolatilityFieldNumber = 1,
    kExpiryDateFieldNumber = 2,
    kLastTradeDateFieldNumber = 3,
    kOutstandingRatioFieldNumber = 4,
    kConversionRatioFieldNumber = 6,
    kCategoryFieldNumber = 7,
    kStrikePriceFieldNumber = 8,
    kUpperStrikePriceFieldNumber = 9,
    kLowerStrikePriceFieldNumber = 10,
    kCallPriceFieldNumber = 11,
    kUnderlyingSymbolFieldNumber = 12,
    kOutstandingQtyFieldNumber = 5,
  };
  // string implied_volatility = 1 [json_name = "impliedVolatility"];
  void clear_implied_volatility() ;
  const std::string& implied_volatility() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_implied_volatility(Arg_&& arg, Args_... args);
  std::string* mutable_implied_volatility();
  PROTOBUF_NODISCARD std::string* release_implied_volatility();
  void set_allocated_implied_volatility(std::string* value);

  private:
  const std::string& _internal_implied_volatility() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_implied_volatility(
      const std::string& value);
  std::string* _internal_mutable_implied_volatility();

  public:
  // string expiry_date = 2 [json_name = "expiryDate"];
  void clear_expiry_date() ;
  const std::string& expiry_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiry_date(Arg_&& arg, Args_... args);
  std::string* mutable_expiry_date();
  PROTOBUF_NODISCARD std::string* release_expiry_date();
  void set_allocated_expiry_date(std::string* value);

  private:
  const std::string& _internal_expiry_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiry_date(
      const std::string& value);
  std::string* _internal_mutable_expiry_date();

  public:
  // string last_trade_date = 3 [json_name = "lastTradeDate"];
  void clear_last_trade_date() ;
  const std::string& last_trade_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_trade_date(Arg_&& arg, Args_... args);
  std::string* mutable_last_trade_date();
  PROTOBUF_NODISCARD std::string* release_last_trade_date();
  void set_allocated_last_trade_date(std::string* value);

  private:
  const std::string& _internal_last_trade_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_trade_date(
      const std::string& value);
  std::string* _internal_mutable_last_trade_date();

  public:
  // string outstanding_ratio = 4 [json_name = "outstandingRatio"];
  void clear_outstanding_ratio() ;
  const std::string& outstanding_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outstanding_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_outstanding_ratio();
  PROTOBUF_NODISCARD std::string* release_outstanding_ratio();
  void set_allocated_outstanding_ratio(std::string* value);

  private:
  const std::string& _internal_outstanding_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outstanding_ratio(
      const std::string& value);
  std::string* _internal_mutable_outstanding_ratio();

  public:
  // string conversion_ratio = 6 [json_name = "conversionRatio"];
  void clear_conversion_ratio() ;
  const std::string& conversion_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversion_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_conversion_ratio();
  PROTOBUF_NODISCARD std::string* release_conversion_ratio();
  void set_allocated_conversion_ratio(std::string* value);

  private:
  const std::string& _internal_conversion_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversion_ratio(
      const std::string& value);
  std::string* _internal_mutable_conversion_ratio();

  public:
  // string category = 7 [json_name = "category"];
  void clear_category() ;
  const std::string& category() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_category(Arg_&& arg, Args_... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* value);

  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(
      const std::string& value);
  std::string* _internal_mutable_category();

  public:
  // string strike_price = 8 [json_name = "strikePrice"];
  void clear_strike_price() ;
  const std::string& strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_strike_price();
  PROTOBUF_NODISCARD std::string* release_strike_price();
  void set_allocated_strike_price(std::string* value);

  private:
  const std::string& _internal_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strike_price(
      const std::string& value);
  std::string* _internal_mutable_strike_price();

  public:
  // string upper_strike_price = 9 [json_name = "upperStrikePrice"];
  void clear_upper_strike_price() ;
  const std::string& upper_strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_upper_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_upper_strike_price();
  PROTOBUF_NODISCARD std::string* release_upper_strike_price();
  void set_allocated_upper_strike_price(std::string* value);

  private:
  const std::string& _internal_upper_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upper_strike_price(
      const std::string& value);
  std::string* _internal_mutable_upper_strike_price();

  public:
  // string lower_strike_price = 10 [json_name = "lowerStrikePrice"];
  void clear_lower_strike_price() ;
  const std::string& lower_strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lower_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_lower_strike_price();
  PROTOBUF_NODISCARD std::string* release_lower_strike_price();
  void set_allocated_lower_strike_price(std::string* value);

  private:
  const std::string& _internal_lower_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lower_strike_price(
      const std::string& value);
  std::string* _internal_mutable_lower_strike_price();

  public:
  // string call_price = 11 [json_name = "callPrice"];
  void clear_call_price() ;
  const std::string& call_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_call_price(Arg_&& arg, Args_... args);
  std::string* mutable_call_price();
  PROTOBUF_NODISCARD std::string* release_call_price();
  void set_allocated_call_price(std::string* value);

  private:
  const std::string& _internal_call_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_call_price(
      const std::string& value);
  std::string* _internal_mutable_call_price();

  public:
  // string underlying_symbol = 12 [json_name = "underlyingSymbol"];
  void clear_underlying_symbol() ;
  const std::string& underlying_symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_underlying_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_underlying_symbol();
  PROTOBUF_NODISCARD std::string* release_underlying_symbol();
  void set_allocated_underlying_symbol(std::string* value);

  private:
  const std::string& _internal_underlying_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlying_symbol(
      const std::string& value);
  std::string* _internal_mutable_underlying_symbol();

  public:
  // int64 outstanding_qty = 5 [json_name = "outstandingQty"];
  void clear_outstanding_qty() ;
  ::int64_t outstanding_qty() const;
  void set_outstanding_qty(::int64_t value);

  private:
  ::int64_t _internal_outstanding_qty() const;
  void _internal_set_outstanding_qty(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.WarrantExtend)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      211, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr implied_volatility_;
    ::google::protobuf::internal::ArenaStringPtr expiry_date_;
    ::google::protobuf::internal::ArenaStringPtr last_trade_date_;
    ::google::protobuf::internal::ArenaStringPtr outstanding_ratio_;
    ::google::protobuf::internal::ArenaStringPtr conversion_ratio_;
    ::google::protobuf::internal::ArenaStringPtr category_;
    ::google::protobuf::internal::ArenaStringPtr strike_price_;
    ::google::protobuf::internal::ArenaStringPtr upper_strike_price_;
    ::google::protobuf::internal::ArenaStringPtr lower_strike_price_;
    ::google::protobuf::internal::ArenaStringPtr call_price_;
    ::google::protobuf::internal::ArenaStringPtr underlying_symbol_;
    ::int64_t outstanding_qty_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class UserQuoteProfileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.UserQuoteProfileRequest) */ {
 public:
  inline UserQuoteProfileRequest() : UserQuoteProfileRequest(nullptr) {}
  ~UserQuoteProfileRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserQuoteProfileRequest(::google::protobuf::internal::ConstantInitialized);

  inline UserQuoteProfileRequest(const UserQuoteProfileRequest& from)
      : UserQuoteProfileRequest(nullptr, from) {}
  UserQuoteProfileRequest(UserQuoteProfileRequest&& from) noexcept
    : UserQuoteProfileRequest() {
    *this = ::std::move(from);
  }

  inline UserQuoteProfileRequest& operator=(const UserQuoteProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQuoteProfileRequest& operator=(UserQuoteProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserQuoteProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserQuoteProfileRequest* internal_default_instance() {
    return reinterpret_cast<const UserQuoteProfileRequest*>(
               &_UserQuoteProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(UserQuoteProfileRequest& a, UserQuoteProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQuoteProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQuoteProfileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserQuoteProfileRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserQuoteProfileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserQuoteProfileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserQuoteProfileRequest& from) {
    UserQuoteProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserQuoteProfileRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.UserQuoteProfileRequest";
  }
  protected:
  explicit UserQuoteProfileRequest(::google::protobuf::Arena* arena);
  UserQuoteProfileRequest(::google::protobuf::Arena* arena, const UserQuoteProfileRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
  };
  // string language = 1 [json_name = "language"];
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* value);

  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(
      const std::string& value);
  std::string* _internal_mutable_language();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.UserQuoteProfileRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr language_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class UserQuoteLevelDetail_PackageDetail final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail) */ {
 public:
  inline UserQuoteLevelDetail_PackageDetail() : UserQuoteLevelDetail_PackageDetail(nullptr) {}
  ~UserQuoteLevelDetail_PackageDetail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserQuoteLevelDetail_PackageDetail(::google::protobuf::internal::ConstantInitialized);

  inline UserQuoteLevelDetail_PackageDetail(const UserQuoteLevelDetail_PackageDetail& from)
      : UserQuoteLevelDetail_PackageDetail(nullptr, from) {}
  UserQuoteLevelDetail_PackageDetail(UserQuoteLevelDetail_PackageDetail&& from) noexcept
    : UserQuoteLevelDetail_PackageDetail() {
    *this = ::std::move(from);
  }

  inline UserQuoteLevelDetail_PackageDetail& operator=(const UserQuoteLevelDetail_PackageDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQuoteLevelDetail_PackageDetail& operator=(UserQuoteLevelDetail_PackageDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserQuoteLevelDetail_PackageDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserQuoteLevelDetail_PackageDetail* internal_default_instance() {
    return reinterpret_cast<const UserQuoteLevelDetail_PackageDetail*>(
               &_UserQuoteLevelDetail_PackageDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(UserQuoteLevelDetail_PackageDetail& a, UserQuoteLevelDetail_PackageDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQuoteLevelDetail_PackageDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQuoteLevelDetail_PackageDetail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserQuoteLevelDetail_PackageDetail* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserQuoteLevelDetail_PackageDetail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserQuoteLevelDetail_PackageDetail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserQuoteLevelDetail_PackageDetail& from) {
    UserQuoteLevelDetail_PackageDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserQuoteLevelDetail_PackageDetail* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail";
  }
  protected:
  explicit UserQuoteLevelDetail_PackageDetail(::google::protobuf::Arena* arena);
  UserQuoteLevelDetail_PackageDetail(::google::protobuf::Arena* arena, const UserQuoteLevelDetail_PackageDetail& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kStartFieldNumber = 5,
    kEndFieldNumber = 6,
  };
  // string key = 1 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string description = 4 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // int64 start = 5 [json_name = "start"];
  void clear_start() ;
  ::int64_t start() const;
  void set_start(::int64_t value);

  private:
  ::int64_t _internal_start() const;
  void _internal_set_start(::int64_t value);

  public:
  // int64 end = 6 [json_name = "end"];
  void clear_end() ;
  ::int64_t end() const;
  void set_end(::int64_t value);

  private:
  ::int64_t _internal_end() const;
  void _internal_set_end(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      82, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::int64_t start_;
    ::int64_t end_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class UnsubscribeResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.UnsubscribeResponse) */ {
 public:
  inline UnsubscribeResponse() : UnsubscribeResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UnsubscribeResponse(::google::protobuf::internal::ConstantInitialized);

  inline UnsubscribeResponse(const UnsubscribeResponse& from)
      : UnsubscribeResponse(nullptr, from) {}
  UnsubscribeResponse(UnsubscribeResponse&& from) noexcept
    : UnsubscribeResponse() {
    *this = ::std::move(from);
  }

  inline UnsubscribeResponse& operator=(const UnsubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeResponse& operator=(UnsubscribeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsubscribeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeResponse*>(
               &_UnsubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(UnsubscribeResponse& a, UnsubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsubscribeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnsubscribeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnsubscribeResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UnsubscribeResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UnsubscribeResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.UnsubscribeResponse";
  }
  protected:
  explicit UnsubscribeResponse(::google::protobuf::Arena* arena);
  UnsubscribeResponse(::google::protobuf::Arena* arena, const UnsubscribeResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.UnsubscribeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class UnsubscribeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.UnsubscribeRequest) */ {
 public:
  inline UnsubscribeRequest() : UnsubscribeRequest(nullptr) {}
  ~UnsubscribeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UnsubscribeRequest(::google::protobuf::internal::ConstantInitialized);

  inline UnsubscribeRequest(const UnsubscribeRequest& from)
      : UnsubscribeRequest(nullptr, from) {}
  UnsubscribeRequest(UnsubscribeRequest&& from) noexcept
    : UnsubscribeRequest() {
    *this = ::std::move(from);
  }

  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeRequest& operator=(UnsubscribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsubscribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeRequest*>(
               &_UnsubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UnsubscribeRequest& a, UnsubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsubscribeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnsubscribeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnsubscribeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnsubscribeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UnsubscribeRequest& from) {
    UnsubscribeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UnsubscribeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.UnsubscribeRequest";
  }
  protected:
  explicit UnsubscribeRequest(::google::protobuf::Arena* arena);
  UnsubscribeRequest(::google::protobuf::Arena* arena, const UnsubscribeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kUnsubAllFieldNumber = 3,
  };
  // repeated string symbol = 1 [json_name = "symbol"];
  int symbol_size() const;
  private:
  int _internal_symbol_size() const;

  public:
  void clear_symbol() ;
  const std::string& symbol(int index) const;
  std::string* mutable_symbol(int index);
  void set_symbol(int index, const std::string& value);
  void set_symbol(int index, std::string&& value);
  void set_symbol(int index, const char* value);
  void set_symbol(int index, const char* value, std::size_t size);
  void set_symbol(int index, absl::string_view value);
  std::string* add_symbol();
  void add_symbol(const std::string& value);
  void add_symbol(std::string&& value);
  void add_symbol(const char* value);
  void add_symbol(const char* value, std::size_t size);
  void add_symbol(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& symbol() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_symbol();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_symbol() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_symbol();

  public:
  // repeated .longportapp.quote.v1.SubType sub_type = 2 [json_name = "subType"];
  int sub_type_size() const;
  private:
  int _internal_sub_type_size() const;

  public:
  void clear_sub_type() ;
  public:
  ::longportapp::quote::v1::SubType sub_type(int index) const;
  void set_sub_type(int index, ::longportapp::quote::v1::SubType value);
  void add_sub_type(::longportapp::quote::v1::SubType value);
  const ::google::protobuf::RepeatedField<int>& sub_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_sub_type();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_sub_type() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_sub_type();

  public:
  // bool unsub_all = 3 [json_name = "unsubAll"];
  void clear_unsub_all() ;
  bool unsub_all() const;
  void set_unsub_all(bool value);

  private:
  bool _internal_unsub_all() const;
  void _internal_set_unsub_all(bool value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.UnsubscribeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> symbol_;
    ::google::protobuf::RepeatedField<int> sub_type_;
    mutable ::google::protobuf::internal::CachedSize _sub_type_cached_byte_size_;
    bool unsub_all_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class TradePeriod final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.TradePeriod) */ {
 public:
  inline TradePeriod() : TradePeriod(nullptr) {}
  ~TradePeriod() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TradePeriod(::google::protobuf::internal::ConstantInitialized);

  inline TradePeriod(const TradePeriod& from)
      : TradePeriod(nullptr, from) {}
  TradePeriod(TradePeriod&& from) noexcept
    : TradePeriod() {
    *this = ::std::move(from);
  }

  inline TradePeriod& operator=(const TradePeriod& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradePeriod& operator=(TradePeriod&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradePeriod& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradePeriod* internal_default_instance() {
    return reinterpret_cast<const TradePeriod*>(
               &_TradePeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TradePeriod& a, TradePeriod& b) {
    a.Swap(&b);
  }
  inline void Swap(TradePeriod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradePeriod* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradePeriod* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradePeriod>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradePeriod& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TradePeriod& from) {
    TradePeriod::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TradePeriod* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.TradePeriod";
  }
  protected:
  explicit TradePeriod(::google::protobuf::Arena* arena);
  TradePeriod(::google::protobuf::Arena* arena, const TradePeriod& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBegTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kTradeSessionFieldNumber = 3,
  };
  // int32 beg_time = 1 [json_name = "begTime"];
  void clear_beg_time() ;
  ::int32_t beg_time() const;
  void set_beg_time(::int32_t value);

  private:
  ::int32_t _internal_beg_time() const;
  void _internal_set_beg_time(::int32_t value);

  public:
  // int32 end_time = 2 [json_name = "endTime"];
  void clear_end_time() ;
  ::int32_t end_time() const;
  void set_end_time(::int32_t value);

  private:
  ::int32_t _internal_end_time() const;
  void _internal_set_end_time(::int32_t value);

  public:
  // .longportapp.quote.v1.TradeSession trade_session = 3 [json_name = "tradeSession"];
  void clear_trade_session() ;
  ::longportapp::quote::v1::TradeSession trade_session() const;
  void set_trade_session(::longportapp::quote::v1::TradeSession value);

  private:
  ::longportapp::quote::v1::TradeSession _internal_trade_session() const;
  void _internal_set_trade_session(::longportapp::quote::v1::TradeSession value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.TradePeriod)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t beg_time_;
    ::int32_t end_time_;
    int trade_session_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class Trade final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.Trade) */ {
 public:
  inline Trade() : Trade(nullptr) {}
  ~Trade() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Trade(::google::protobuf::internal::ConstantInitialized);

  inline Trade(const Trade& from)
      : Trade(nullptr, from) {}
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Trade& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Trade* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Trade& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Trade& from) {
    Trade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Trade* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.Trade";
  }
  protected:
  explicit Trade(::google::protobuf::Arena* arena);
  Trade(::google::protobuf::Arena* arena, const Trade& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kTradeTypeFieldNumber = 4,
    kVolumeFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kDirectionFieldNumber = 5,
    kTradeSessionFieldNumber = 6,
  };
  // string price = 1 [json_name = "price"];
  void clear_price() ;
  const std::string& price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* value);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // string trade_type = 4 [json_name = "tradeType"];
  void clear_trade_type() ;
  const std::string& trade_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trade_type(Arg_&& arg, Args_... args);
  std::string* mutable_trade_type();
  PROTOBUF_NODISCARD std::string* release_trade_type();
  void set_allocated_trade_type(std::string* value);

  private:
  const std::string& _internal_trade_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_type(
      const std::string& value);
  std::string* _internal_mutable_trade_type();

  public:
  // int64 volume = 2 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // int64 timestamp = 3 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int32 direction = 5 [json_name = "direction"];
  void clear_direction() ;
  ::int32_t direction() const;
  void set_direction(::int32_t value);

  private:
  ::int32_t _internal_direction() const;
  void _internal_set_direction(::int32_t value);

  public:
  // .longportapp.quote.v1.TradeSession trade_session = 6 [json_name = "tradeSession"];
  void clear_trade_session() ;
  ::longportapp::quote::v1::TradeSession trade_session() const;
  void set_trade_session(::longportapp::quote::v1::TradeSession value);

  private:
  ::longportapp::quote::v1::TradeSession _internal_trade_session() const;
  void _internal_set_trade_session(::longportapp::quote::v1::TradeSession value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.Trade)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr price_;
    ::google::protobuf::internal::ArenaStringPtr trade_type_;
    ::int64_t volume_;
    ::int64_t timestamp_;
    ::int32_t direction_;
    int trade_session_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SubscriptionRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SubscriptionRequest) */ {
 public:
  inline SubscriptionRequest() : SubscriptionRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionRequest(::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionRequest(const SubscriptionRequest& from)
      : SubscriptionRequest(nullptr, from) {}
  SubscriptionRequest(SubscriptionRequest&& from) noexcept
    : SubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline SubscriptionRequest& operator=(const SubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionRequest& operator=(SubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscriptionRequest*>(
               &_SubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SubscriptionRequest& a, SubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscriptionRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscriptionRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscriptionRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SubscriptionRequest";
  }
  protected:
  explicit SubscriptionRequest(::google::protobuf::Arena* arena);
  SubscriptionRequest(::google::protobuf::Arena* arena, const SubscriptionRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SubscriptionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SubscribeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SubscribeRequest) */ {
 public:
  inline SubscribeRequest() : SubscribeRequest(nullptr) {}
  ~SubscribeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeRequest(::google::protobuf::internal::ConstantInitialized);

  inline SubscribeRequest(const SubscribeRequest& from)
      : SubscribeRequest(nullptr, from) {}
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SubscribeRequest& from) {
    SubscribeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubscribeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SubscribeRequest";
  }
  protected:
  explicit SubscribeRequest(::google::protobuf::Arena* arena);
  SubscribeRequest(::google::protobuf::Arena* arena, const SubscribeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kIsFirstPushFieldNumber = 3,
  };
  // repeated string symbol = 1 [json_name = "symbol"];
  int symbol_size() const;
  private:
  int _internal_symbol_size() const;

  public:
  void clear_symbol() ;
  const std::string& symbol(int index) const;
  std::string* mutable_symbol(int index);
  void set_symbol(int index, const std::string& value);
  void set_symbol(int index, std::string&& value);
  void set_symbol(int index, const char* value);
  void set_symbol(int index, const char* value, std::size_t size);
  void set_symbol(int index, absl::string_view value);
  std::string* add_symbol();
  void add_symbol(const std::string& value);
  void add_symbol(std::string&& value);
  void add_symbol(const char* value);
  void add_symbol(const char* value, std::size_t size);
  void add_symbol(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& symbol() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_symbol();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_symbol() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_symbol();

  public:
  // repeated .longportapp.quote.v1.SubType sub_type = 2 [json_name = "subType"];
  int sub_type_size() const;
  private:
  int _internal_sub_type_size() const;

  public:
  void clear_sub_type() ;
  public:
  ::longportapp::quote::v1::SubType sub_type(int index) const;
  void set_sub_type(int index, ::longportapp::quote::v1::SubType value);
  void add_sub_type(::longportapp::quote::v1::SubType value);
  const ::google::protobuf::RepeatedField<int>& sub_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_sub_type();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_sub_type() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_sub_type();

  public:
  // bool is_first_push = 3 [json_name = "isFirstPush"];
  void clear_is_first_push() ;
  bool is_first_push() const;
  void set_is_first_push(bool value);

  private:
  bool _internal_is_first_push() const;
  void _internal_set_is_first_push(bool value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SubscribeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> symbol_;
    ::google::protobuf::RepeatedField<int> sub_type_;
    mutable ::google::protobuf::internal::CachedSize _sub_type_cached_byte_size_;
    bool is_first_push_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SubTypeList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SubTypeList) */ {
 public:
  inline SubTypeList() : SubTypeList(nullptr) {}
  ~SubTypeList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubTypeList(::google::protobuf::internal::ConstantInitialized);

  inline SubTypeList(const SubTypeList& from)
      : SubTypeList(nullptr, from) {}
  SubTypeList(SubTypeList&& from) noexcept
    : SubTypeList() {
    *this = ::std::move(from);
  }

  inline SubTypeList& operator=(const SubTypeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubTypeList& operator=(SubTypeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubTypeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubTypeList* internal_default_instance() {
    return reinterpret_cast<const SubTypeList*>(
               &_SubTypeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SubTypeList& a, SubTypeList& b) {
    a.Swap(&b);
  }
  inline void Swap(SubTypeList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubTypeList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubTypeList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubTypeList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubTypeList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SubTypeList& from) {
    SubTypeList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubTypeList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SubTypeList";
  }
  protected:
  explicit SubTypeList(::google::protobuf::Arena* arena);
  SubTypeList(::google::protobuf::Arena* arena, const SubTypeList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTypeFieldNumber = 2,
    kSymbolFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.SubType sub_type = 2 [json_name = "subType"];
  int sub_type_size() const;
  private:
  int _internal_sub_type_size() const;

  public:
  void clear_sub_type() ;
  public:
  ::longportapp::quote::v1::SubType sub_type(int index) const;
  void set_sub_type(int index, ::longportapp::quote::v1::SubType value);
  void add_sub_type(::longportapp::quote::v1::SubType value);
  const ::google::protobuf::RepeatedField<int>& sub_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_sub_type();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_sub_type() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_sub_type();

  public:
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SubTypeList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<int> sub_type_;
    mutable ::google::protobuf::internal::CachedSize _sub_type_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class StrikePriceInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.StrikePriceInfo) */ {
 public:
  inline StrikePriceInfo() : StrikePriceInfo(nullptr) {}
  ~StrikePriceInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StrikePriceInfo(::google::protobuf::internal::ConstantInitialized);

  inline StrikePriceInfo(const StrikePriceInfo& from)
      : StrikePriceInfo(nullptr, from) {}
  StrikePriceInfo(StrikePriceInfo&& from) noexcept
    : StrikePriceInfo() {
    *this = ::std::move(from);
  }

  inline StrikePriceInfo& operator=(const StrikePriceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrikePriceInfo& operator=(StrikePriceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrikePriceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrikePriceInfo* internal_default_instance() {
    return reinterpret_cast<const StrikePriceInfo*>(
               &_StrikePriceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(StrikePriceInfo& a, StrikePriceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StrikePriceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrikePriceInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StrikePriceInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StrikePriceInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StrikePriceInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StrikePriceInfo& from) {
    StrikePriceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StrikePriceInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.StrikePriceInfo";
  }
  protected:
  explicit StrikePriceInfo(::google::protobuf::Arena* arena);
  StrikePriceInfo(::google::protobuf::Arena* arena, const StrikePriceInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kCallSymbolFieldNumber = 2,
    kPutSymbolFieldNumber = 3,
    kStandardFieldNumber = 4,
  };
  // string price = 1 [json_name = "price"];
  void clear_price() ;
  const std::string& price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* value);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // string call_symbol = 2 [json_name = "callSymbol"];
  void clear_call_symbol() ;
  const std::string& call_symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_call_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_call_symbol();
  PROTOBUF_NODISCARD std::string* release_call_symbol();
  void set_allocated_call_symbol(std::string* value);

  private:
  const std::string& _internal_call_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_call_symbol(
      const std::string& value);
  std::string* _internal_mutable_call_symbol();

  public:
  // string put_symbol = 3 [json_name = "putSymbol"];
  void clear_put_symbol() ;
  const std::string& put_symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_put_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_put_symbol();
  PROTOBUF_NODISCARD std::string* release_put_symbol();
  void set_allocated_put_symbol(std::string* value);

  private:
  const std::string& _internal_put_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_put_symbol(
      const std::string& value);
  std::string* _internal_mutable_put_symbol();

  public:
  // bool standard = 4 [json_name = "standard"];
  void clear_standard() ;
  bool standard() const;
  void set_standard(bool value);

  private:
  bool _internal_standard() const;
  void _internal_set_standard(bool value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.StrikePriceInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      71, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr price_;
    ::google::protobuf::internal::ArenaStringPtr call_symbol_;
    ::google::protobuf::internal::ArenaStringPtr put_symbol_;
    bool standard_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class StaticInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.StaticInfo) */ {
 public:
  inline StaticInfo() : StaticInfo(nullptr) {}
  ~StaticInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StaticInfo(::google::protobuf::internal::ConstantInitialized);

  inline StaticInfo(const StaticInfo& from)
      : StaticInfo(nullptr, from) {}
  StaticInfo(StaticInfo&& from) noexcept
    : StaticInfo() {
    *this = ::std::move(from);
  }

  inline StaticInfo& operator=(const StaticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticInfo& operator=(StaticInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StaticInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StaticInfo* internal_default_instance() {
    return reinterpret_cast<const StaticInfo*>(
               &_StaticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StaticInfo& a, StaticInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StaticInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StaticInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StaticInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StaticInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StaticInfo& from) {
    StaticInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StaticInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.StaticInfo";
  }
  protected:
  explicit StaticInfo(::google::protobuf::Arena* arena);
  StaticInfo(::google::protobuf::Arena* arena, const StaticInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStockDerivativesFieldNumber = 16,
    kSymbolFieldNumber = 1,
    kNameCnFieldNumber = 2,
    kNameEnFieldNumber = 3,
    kNameHkFieldNumber = 4,
    kListingDateFieldNumber = 5,
    kExchangeFieldNumber = 6,
    kCurrencyFieldNumber = 7,
    kEpsFieldNumber = 12,
    kEpsTtmFieldNumber = 13,
    kBpsFieldNumber = 14,
    kDividendYieldFieldNumber = 15,
    kBoardFieldNumber = 17,
    kTotalSharesFieldNumber = 9,
    kCirculatingSharesFieldNumber = 10,
    kHkSharesFieldNumber = 11,
    kLotSizeFieldNumber = 8,
  };
  // repeated int32 stock_derivatives = 16 [json_name = "stockDerivatives"];
  int stock_derivatives_size() const;
  private:
  int _internal_stock_derivatives_size() const;

  public:
  void clear_stock_derivatives() ;
  ::int32_t stock_derivatives(int index) const;
  void set_stock_derivatives(int index, ::int32_t value);
  void add_stock_derivatives(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& stock_derivatives() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_stock_derivatives();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_stock_derivatives() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_stock_derivatives();

  public:
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string name_cn = 2 [json_name = "nameCn"];
  void clear_name_cn() ;
  const std::string& name_cn() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_cn(Arg_&& arg, Args_... args);
  std::string* mutable_name_cn();
  PROTOBUF_NODISCARD std::string* release_name_cn();
  void set_allocated_name_cn(std::string* value);

  private:
  const std::string& _internal_name_cn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_cn(
      const std::string& value);
  std::string* _internal_mutable_name_cn();

  public:
  // string name_en = 3 [json_name = "nameEn"];
  void clear_name_en() ;
  const std::string& name_en() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_en(Arg_&& arg, Args_... args);
  std::string* mutable_name_en();
  PROTOBUF_NODISCARD std::string* release_name_en();
  void set_allocated_name_en(std::string* value);

  private:
  const std::string& _internal_name_en() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_en(
      const std::string& value);
  std::string* _internal_mutable_name_en();

  public:
  // string name_hk = 4 [json_name = "nameHk"];
  void clear_name_hk() ;
  const std::string& name_hk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_hk(Arg_&& arg, Args_... args);
  std::string* mutable_name_hk();
  PROTOBUF_NODISCARD std::string* release_name_hk();
  void set_allocated_name_hk(std::string* value);

  private:
  const std::string& _internal_name_hk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_hk(
      const std::string& value);
  std::string* _internal_mutable_name_hk();

  public:
  // string listing_date = 5 [json_name = "listingDate"];
  void clear_listing_date() ;
  const std::string& listing_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_listing_date(Arg_&& arg, Args_... args);
  std::string* mutable_listing_date();
  PROTOBUF_NODISCARD std::string* release_listing_date();
  void set_allocated_listing_date(std::string* value);

  private:
  const std::string& _internal_listing_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listing_date(
      const std::string& value);
  std::string* _internal_mutable_listing_date();

  public:
  // string exchange = 6 [json_name = "exchange"];
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // string currency = 7 [json_name = "currency"];
  void clear_currency() ;
  const std::string& currency() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* value);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // string eps = 12 [json_name = "eps"];
  void clear_eps() ;
  const std::string& eps() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_eps(Arg_&& arg, Args_... args);
  std::string* mutable_eps();
  PROTOBUF_NODISCARD std::string* release_eps();
  void set_allocated_eps(std::string* value);

  private:
  const std::string& _internal_eps() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eps(
      const std::string& value);
  std::string* _internal_mutable_eps();

  public:
  // string eps_ttm = 13 [json_name = "epsTtm"];
  void clear_eps_ttm() ;
  const std::string& eps_ttm() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_eps_ttm(Arg_&& arg, Args_... args);
  std::string* mutable_eps_ttm();
  PROTOBUF_NODISCARD std::string* release_eps_ttm();
  void set_allocated_eps_ttm(std::string* value);

  private:
  const std::string& _internal_eps_ttm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eps_ttm(
      const std::string& value);
  std::string* _internal_mutable_eps_ttm();

  public:
  // string bps = 14 [json_name = "bps"];
  void clear_bps() ;
  const std::string& bps() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bps(Arg_&& arg, Args_... args);
  std::string* mutable_bps();
  PROTOBUF_NODISCARD std::string* release_bps();
  void set_allocated_bps(std::string* value);

  private:
  const std::string& _internal_bps() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bps(
      const std::string& value);
  std::string* _internal_mutable_bps();

  public:
  // string dividend_yield = 15 [json_name = "dividendYield"];
  void clear_dividend_yield() ;
  const std::string& dividend_yield() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dividend_yield(Arg_&& arg, Args_... args);
  std::string* mutable_dividend_yield();
  PROTOBUF_NODISCARD std::string* release_dividend_yield();
  void set_allocated_dividend_yield(std::string* value);

  private:
  const std::string& _internal_dividend_yield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dividend_yield(
      const std::string& value);
  std::string* _internal_mutable_dividend_yield();

  public:
  // string board = 17 [json_name = "board"];
  void clear_board() ;
  const std::string& board() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_board(Arg_&& arg, Args_... args);
  std::string* mutable_board();
  PROTOBUF_NODISCARD std::string* release_board();
  void set_allocated_board(std::string* value);

  private:
  const std::string& _internal_board() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_board(
      const std::string& value);
  std::string* _internal_mutable_board();

  public:
  // int64 total_shares = 9 [json_name = "totalShares"];
  void clear_total_shares() ;
  ::int64_t total_shares() const;
  void set_total_shares(::int64_t value);

  private:
  ::int64_t _internal_total_shares() const;
  void _internal_set_total_shares(::int64_t value);

  public:
  // int64 circulating_shares = 10 [json_name = "circulatingShares"];
  void clear_circulating_shares() ;
  ::int64_t circulating_shares() const;
  void set_circulating_shares(::int64_t value);

  private:
  ::int64_t _internal_circulating_shares() const;
  void _internal_set_circulating_shares(::int64_t value);

  public:
  // int64 hk_shares = 11 [json_name = "hkShares"];
  void clear_hk_shares() ;
  ::int64_t hk_shares() const;
  void set_hk_shares(::int64_t value);

  private:
  ::int64_t _internal_hk_shares() const;
  void _internal_set_hk_shares(::int64_t value);

  public:
  // int32 lot_size = 8 [json_name = "lotSize"];
  void clear_lot_size() ;
  ::int32_t lot_size() const;
  void set_lot_size(::int32_t value);

  private:
  ::int32_t _internal_lot_size() const;
  void _internal_set_lot_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.StaticInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 0,
      143, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> stock_derivatives_;
    mutable ::google::protobuf::internal::CachedSize _stock_derivatives_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr name_cn_;
    ::google::protobuf::internal::ArenaStringPtr name_en_;
    ::google::protobuf::internal::ArenaStringPtr name_hk_;
    ::google::protobuf::internal::ArenaStringPtr listing_date_;
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    ::google::protobuf::internal::ArenaStringPtr currency_;
    ::google::protobuf::internal::ArenaStringPtr eps_;
    ::google::protobuf::internal::ArenaStringPtr eps_ttm_;
    ::google::protobuf::internal::ArenaStringPtr bps_;
    ::google::protobuf::internal::ArenaStringPtr dividend_yield_;
    ::google::protobuf::internal::ArenaStringPtr board_;
    ::int64_t total_shares_;
    ::int64_t circulating_shares_;
    ::int64_t hk_shares_;
    ::int32_t lot_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityTradeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityTradeRequest) */ {
 public:
  inline SecurityTradeRequest() : SecurityTradeRequest(nullptr) {}
  ~SecurityTradeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityTradeRequest(::google::protobuf::internal::ConstantInitialized);

  inline SecurityTradeRequest(const SecurityTradeRequest& from)
      : SecurityTradeRequest(nullptr, from) {}
  SecurityTradeRequest(SecurityTradeRequest&& from) noexcept
    : SecurityTradeRequest() {
    *this = ::std::move(from);
  }

  inline SecurityTradeRequest& operator=(const SecurityTradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityTradeRequest& operator=(SecurityTradeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityTradeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityTradeRequest* internal_default_instance() {
    return reinterpret_cast<const SecurityTradeRequest*>(
               &_SecurityTradeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SecurityTradeRequest& a, SecurityTradeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityTradeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityTradeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityTradeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityTradeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityTradeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityTradeRequest& from) {
    SecurityTradeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityTradeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityTradeRequest";
  }
  protected:
  explicit SecurityTradeRequest(::google::protobuf::Arena* arena);
  SecurityTradeRequest(::google::protobuf::Arena* arena, const SecurityTradeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // int32 count = 2 [json_name = "count"];
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityTradeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::int32_t count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityRequest) */ {
 public:
  inline SecurityRequest() : SecurityRequest(nullptr) {}
  ~SecurityRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityRequest(::google::protobuf::internal::ConstantInitialized);

  inline SecurityRequest(const SecurityRequest& from)
      : SecurityRequest(nullptr, from) {}
  SecurityRequest(SecurityRequest&& from) noexcept
    : SecurityRequest() {
    *this = ::std::move(from);
  }

  inline SecurityRequest& operator=(const SecurityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityRequest& operator=(SecurityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityRequest* internal_default_instance() {
    return reinterpret_cast<const SecurityRequest*>(
               &_SecurityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SecurityRequest& a, SecurityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityRequest& from) {
    SecurityRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityRequest";
  }
  protected:
  explicit SecurityRequest(::google::protobuf::Arena* arena);
  SecurityRequest(::google::protobuf::Arena* arena, const SecurityRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityIntradayRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityIntradayRequest) */ {
 public:
  inline SecurityIntradayRequest() : SecurityIntradayRequest(nullptr) {}
  ~SecurityIntradayRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityIntradayRequest(::google::protobuf::internal::ConstantInitialized);

  inline SecurityIntradayRequest(const SecurityIntradayRequest& from)
      : SecurityIntradayRequest(nullptr, from) {}
  SecurityIntradayRequest(SecurityIntradayRequest&& from) noexcept
    : SecurityIntradayRequest() {
    *this = ::std::move(from);
  }

  inline SecurityIntradayRequest& operator=(const SecurityIntradayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityIntradayRequest& operator=(SecurityIntradayRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityIntradayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityIntradayRequest* internal_default_instance() {
    return reinterpret_cast<const SecurityIntradayRequest*>(
               &_SecurityIntradayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SecurityIntradayRequest& a, SecurityIntradayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityIntradayRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityIntradayRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityIntradayRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityIntradayRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityIntradayRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityIntradayRequest& from) {
    SecurityIntradayRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityIntradayRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityIntradayRequest";
  }
  protected:
  explicit SecurityIntradayRequest(::google::protobuf::Arena* arena);
  SecurityIntradayRequest(::google::protobuf::Arena* arena, const SecurityIntradayRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityIntradayRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityHistoryCandlestickRequest_OffsetQuery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery) */ {
 public:
  inline SecurityHistoryCandlestickRequest_OffsetQuery() : SecurityHistoryCandlestickRequest_OffsetQuery(nullptr) {}
  ~SecurityHistoryCandlestickRequest_OffsetQuery() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityHistoryCandlestickRequest_OffsetQuery(::google::protobuf::internal::ConstantInitialized);

  inline SecurityHistoryCandlestickRequest_OffsetQuery(const SecurityHistoryCandlestickRequest_OffsetQuery& from)
      : SecurityHistoryCandlestickRequest_OffsetQuery(nullptr, from) {}
  SecurityHistoryCandlestickRequest_OffsetQuery(SecurityHistoryCandlestickRequest_OffsetQuery&& from) noexcept
    : SecurityHistoryCandlestickRequest_OffsetQuery() {
    *this = ::std::move(from);
  }

  inline SecurityHistoryCandlestickRequest_OffsetQuery& operator=(const SecurityHistoryCandlestickRequest_OffsetQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityHistoryCandlestickRequest_OffsetQuery& operator=(SecurityHistoryCandlestickRequest_OffsetQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityHistoryCandlestickRequest_OffsetQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityHistoryCandlestickRequest_OffsetQuery* internal_default_instance() {
    return reinterpret_cast<const SecurityHistoryCandlestickRequest_OffsetQuery*>(
               &_SecurityHistoryCandlestickRequest_OffsetQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SecurityHistoryCandlestickRequest_OffsetQuery& a, SecurityHistoryCandlestickRequest_OffsetQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityHistoryCandlestickRequest_OffsetQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityHistoryCandlestickRequest_OffsetQuery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityHistoryCandlestickRequest_OffsetQuery* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityHistoryCandlestickRequest_OffsetQuery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityHistoryCandlestickRequest_OffsetQuery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityHistoryCandlestickRequest_OffsetQuery& from) {
    SecurityHistoryCandlestickRequest_OffsetQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityHistoryCandlestickRequest_OffsetQuery* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery";
  }
  protected:
  explicit SecurityHistoryCandlestickRequest_OffsetQuery(::google::protobuf::Arena* arena);
  SecurityHistoryCandlestickRequest_OffsetQuery(::google::protobuf::Arena* arena, const SecurityHistoryCandlestickRequest_OffsetQuery& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 2,
    kMinuteFieldNumber = 3,
    kDirectionFieldNumber = 1,
    kCountFieldNumber = 4,
  };
  // string date = 2 [json_name = "date"];
  void clear_date() ;
  const std::string& date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date(Arg_&& arg, Args_... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* value);

  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(
      const std::string& value);
  std::string* _internal_mutable_date();

  public:
  // string minute = 3 [json_name = "minute"];
  void clear_minute() ;
  const std::string& minute() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_minute(Arg_&& arg, Args_... args);
  std::string* mutable_minute();
  PROTOBUF_NODISCARD std::string* release_minute();
  void set_allocated_minute(std::string* value);

  private:
  const std::string& _internal_minute() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_minute(
      const std::string& value);
  std::string* _internal_mutable_minute();

  public:
  // .longportapp.quote.v1.Direction direction = 1 [json_name = "direction"];
  void clear_direction() ;
  ::longportapp::quote::v1::Direction direction() const;
  void set_direction(::longportapp::quote::v1::Direction value);

  private:
  ::longportapp::quote::v1::Direction _internal_direction() const;
  void _internal_set_direction(::longportapp::quote::v1::Direction value);

  public:
  // int32 count = 4 [json_name = "count"];
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      85, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr date_;
    ::google::protobuf::internal::ArenaStringPtr minute_;
    int direction_;
    ::int32_t count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityHistoryCandlestickRequest_DateQuery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery) */ {
 public:
  inline SecurityHistoryCandlestickRequest_DateQuery() : SecurityHistoryCandlestickRequest_DateQuery(nullptr) {}
  ~SecurityHistoryCandlestickRequest_DateQuery() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityHistoryCandlestickRequest_DateQuery(::google::protobuf::internal::ConstantInitialized);

  inline SecurityHistoryCandlestickRequest_DateQuery(const SecurityHistoryCandlestickRequest_DateQuery& from)
      : SecurityHistoryCandlestickRequest_DateQuery(nullptr, from) {}
  SecurityHistoryCandlestickRequest_DateQuery(SecurityHistoryCandlestickRequest_DateQuery&& from) noexcept
    : SecurityHistoryCandlestickRequest_DateQuery() {
    *this = ::std::move(from);
  }

  inline SecurityHistoryCandlestickRequest_DateQuery& operator=(const SecurityHistoryCandlestickRequest_DateQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityHistoryCandlestickRequest_DateQuery& operator=(SecurityHistoryCandlestickRequest_DateQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityHistoryCandlestickRequest_DateQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityHistoryCandlestickRequest_DateQuery* internal_default_instance() {
    return reinterpret_cast<const SecurityHistoryCandlestickRequest_DateQuery*>(
               &_SecurityHistoryCandlestickRequest_DateQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SecurityHistoryCandlestickRequest_DateQuery& a, SecurityHistoryCandlestickRequest_DateQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityHistoryCandlestickRequest_DateQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityHistoryCandlestickRequest_DateQuery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityHistoryCandlestickRequest_DateQuery* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityHistoryCandlestickRequest_DateQuery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityHistoryCandlestickRequest_DateQuery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityHistoryCandlestickRequest_DateQuery& from) {
    SecurityHistoryCandlestickRequest_DateQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityHistoryCandlestickRequest_DateQuery* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery";
  }
  protected:
  explicit SecurityHistoryCandlestickRequest_DateQuery(::google::protobuf::Arena* arena);
  SecurityHistoryCandlestickRequest_DateQuery(::google::protobuf::Arena* arena, const SecurityHistoryCandlestickRequest_DateQuery& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDateFieldNumber = 1,
    kEndDateFieldNumber = 2,
  };
  // string start_date = 1 [json_name = "startDate"];
  void clear_start_date() ;
  const std::string& start_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_date(Arg_&& arg, Args_... args);
  std::string* mutable_start_date();
  PROTOBUF_NODISCARD std::string* release_start_date();
  void set_allocated_start_date(std::string* value);

  private:
  const std::string& _internal_start_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_date(
      const std::string& value);
  std::string* _internal_mutable_start_date();

  public:
  // string end_date = 2 [json_name = "endDate"];
  void clear_end_date() ;
  const std::string& end_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_end_date(Arg_&& arg, Args_... args);
  std::string* mutable_end_date();
  PROTOBUF_NODISCARD std::string* release_end_date();
  void set_allocated_end_date(std::string* value);

  private:
  const std::string& _internal_end_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_date(
      const std::string& value);
  std::string* _internal_mutable_end_date();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      91, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr start_date_;
    ::google::protobuf::internal::ArenaStringPtr end_date_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityCandlestickRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityCandlestickRequest) */ {
 public:
  inline SecurityCandlestickRequest() : SecurityCandlestickRequest(nullptr) {}
  ~SecurityCandlestickRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityCandlestickRequest(::google::protobuf::internal::ConstantInitialized);

  inline SecurityCandlestickRequest(const SecurityCandlestickRequest& from)
      : SecurityCandlestickRequest(nullptr, from) {}
  SecurityCandlestickRequest(SecurityCandlestickRequest&& from) noexcept
    : SecurityCandlestickRequest() {
    *this = ::std::move(from);
  }

  inline SecurityCandlestickRequest& operator=(const SecurityCandlestickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityCandlestickRequest& operator=(SecurityCandlestickRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityCandlestickRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityCandlestickRequest* internal_default_instance() {
    return reinterpret_cast<const SecurityCandlestickRequest*>(
               &_SecurityCandlestickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SecurityCandlestickRequest& a, SecurityCandlestickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityCandlestickRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityCandlestickRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityCandlestickRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityCandlestickRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityCandlestickRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityCandlestickRequest& from) {
    SecurityCandlestickRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityCandlestickRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityCandlestickRequest";
  }
  protected:
  explicit SecurityCandlestickRequest(::google::protobuf::Arena* arena);
  SecurityCandlestickRequest(::google::protobuf::Arena* arena, const SecurityCandlestickRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kCountFieldNumber = 3,
    kAdjustTypeFieldNumber = 4,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // .longportapp.quote.v1.Period period = 2 [json_name = "period"];
  void clear_period() ;
  ::longportapp::quote::v1::Period period() const;
  void set_period(::longportapp::quote::v1::Period value);

  private:
  ::longportapp::quote::v1::Period _internal_period() const;
  void _internal_set_period(::longportapp::quote::v1::Period value);

  public:
  // int32 count = 3 [json_name = "count"];
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // .longportapp.quote.v1.AdjustType adjust_type = 4 [json_name = "adjustType"];
  void clear_adjust_type() ;
  ::longportapp::quote::v1::AdjustType adjust_type() const;
  void set_adjust_type(::longportapp::quote::v1::AdjustType value);

  private:
  ::longportapp::quote::v1::AdjustType _internal_adjust_type() const;
  void _internal_set_adjust_type(::longportapp::quote::v1::AdjustType value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityCandlestickRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    int period_;
    ::int32_t count_;
    int adjust_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityCalcQuoteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityCalcQuoteRequest) */ {
 public:
  inline SecurityCalcQuoteRequest() : SecurityCalcQuoteRequest(nullptr) {}
  ~SecurityCalcQuoteRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityCalcQuoteRequest(::google::protobuf::internal::ConstantInitialized);

  inline SecurityCalcQuoteRequest(const SecurityCalcQuoteRequest& from)
      : SecurityCalcQuoteRequest(nullptr, from) {}
  SecurityCalcQuoteRequest(SecurityCalcQuoteRequest&& from) noexcept
    : SecurityCalcQuoteRequest() {
    *this = ::std::move(from);
  }

  inline SecurityCalcQuoteRequest& operator=(const SecurityCalcQuoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityCalcQuoteRequest& operator=(SecurityCalcQuoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityCalcQuoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityCalcQuoteRequest* internal_default_instance() {
    return reinterpret_cast<const SecurityCalcQuoteRequest*>(
               &_SecurityCalcQuoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SecurityCalcQuoteRequest& a, SecurityCalcQuoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityCalcQuoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityCalcQuoteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityCalcQuoteRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityCalcQuoteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityCalcQuoteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityCalcQuoteRequest& from) {
    SecurityCalcQuoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityCalcQuoteRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityCalcQuoteRequest";
  }
  protected:
  explicit SecurityCalcQuoteRequest(::google::protobuf::Arena* arena);
  SecurityCalcQuoteRequest(::google::protobuf::Arena* arena, const SecurityCalcQuoteRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolsFieldNumber = 1,
    kCalcIndexFieldNumber = 2,
  };
  // repeated string symbols = 1 [json_name = "symbols"];
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;

  public:
  void clear_symbols() ;
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  void set_symbols(int index, const std::string& value);
  void set_symbols(int index, std::string&& value);
  void set_symbols(int index, const char* value);
  void set_symbols(int index, const char* value, std::size_t size);
  void set_symbols(int index, absl::string_view value);
  std::string* add_symbols();
  void add_symbols(const std::string& value);
  void add_symbols(std::string&& value);
  void add_symbols(const char* value);
  void add_symbols(const char* value, std::size_t size);
  void add_symbols(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& symbols() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_symbols();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_symbols() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_symbols();

  public:
  // repeated .longportapp.quote.v1.CalcIndex calc_index = 2 [json_name = "calcIndex"];
  int calc_index_size() const;
  private:
  int _internal_calc_index_size() const;

  public:
  void clear_calc_index() ;
  public:
  ::longportapp::quote::v1::CalcIndex calc_index(int index) const;
  void set_calc_index(int index, ::longportapp::quote::v1::CalcIndex value);
  void add_calc_index(::longportapp::quote::v1::CalcIndex value);
  const ::google::protobuf::RepeatedField<int>& calc_index() const;
  ::google::protobuf::RepeatedField<int>* mutable_calc_index();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_calc_index() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_calc_index();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityCalcQuoteRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> symbols_;
    ::google::protobuf::RepeatedField<int> calc_index_;
    mutable ::google::protobuf::internal::CachedSize _calc_index_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityCalcIndex final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityCalcIndex) */ {
 public:
  inline SecurityCalcIndex() : SecurityCalcIndex(nullptr) {}
  ~SecurityCalcIndex() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityCalcIndex(::google::protobuf::internal::ConstantInitialized);

  inline SecurityCalcIndex(const SecurityCalcIndex& from)
      : SecurityCalcIndex(nullptr, from) {}
  SecurityCalcIndex(SecurityCalcIndex&& from) noexcept
    : SecurityCalcIndex() {
    *this = ::std::move(from);
  }

  inline SecurityCalcIndex& operator=(const SecurityCalcIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityCalcIndex& operator=(SecurityCalcIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityCalcIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityCalcIndex* internal_default_instance() {
    return reinterpret_cast<const SecurityCalcIndex*>(
               &_SecurityCalcIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SecurityCalcIndex& a, SecurityCalcIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityCalcIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityCalcIndex* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityCalcIndex* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityCalcIndex>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityCalcIndex& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityCalcIndex& from) {
    SecurityCalcIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityCalcIndex* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityCalcIndex";
  }
  protected:
  explicit SecurityCalcIndex(::google::protobuf::Arena* arena);
  SecurityCalcIndex(::google::protobuf::Arena* arena, const SecurityCalcIndex& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kLastDoneFieldNumber = 2,
    kChangeValFieldNumber = 3,
    kChangeRateFieldNumber = 4,
    kTurnoverFieldNumber = 6,
    kYtdChangeRateFieldNumber = 7,
    kTurnoverRateFieldNumber = 8,
    kTotalMarketValueFieldNumber = 9,
    kCapitalFlowFieldNumber = 10,
    kAmplitudeFieldNumber = 11,
    kVolumeRatioFieldNumber = 12,
    kPeTtmRatioFieldNumber = 13,
    kPbRatioFieldNumber = 14,
    kDividendRatioTtmFieldNumber = 15,
    kFiveDayChangeRateFieldNumber = 16,
    kTenDayChangeRateFieldNumber = 17,
    kHalfYearChangeRateFieldNumber = 18,
    kFiveMinutesChangeRateFieldNumber = 19,
    kExpiryDateFieldNumber = 20,
    kStrikePriceFieldNumber = 21,
    kUpperStrikePriceFieldNumber = 22,
    kLowerStrikePriceFieldNumber = 23,
    kOutstandingRatioFieldNumber = 25,
    kPremiumFieldNumber = 26,
    kItmOtmFieldNumber = 27,
    kImpliedVolatilityFieldNumber = 28,
    kWarrantDeltaFieldNumber = 29,
    kCallPriceFieldNumber = 30,
    kToCallPriceFieldNumber = 31,
    kEffectiveLeverageFieldNumber = 32,
    kLeverageRatioFieldNumber = 33,
    kConversionRatioFieldNumber = 34,
    kBalancePointFieldNumber = 35,
    kDeltaFieldNumber = 37,
    kGammaFieldNumber = 38,
    kThetaFieldNumber = 39,
    kVegaFieldNumber = 40,
    kRhoFieldNumber = 41,
    kVolumeFieldNumber = 5,
    kOutstandingQtyFieldNumber = 24,
    kOpenInterestFieldNumber = 36,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string last_done = 2 [json_name = "lastDone"];
  void clear_last_done() ;
  const std::string& last_done() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_done(Arg_&& arg, Args_... args);
  std::string* mutable_last_done();
  PROTOBUF_NODISCARD std::string* release_last_done();
  void set_allocated_last_done(std::string* value);

  private:
  const std::string& _internal_last_done() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_done(
      const std::string& value);
  std::string* _internal_mutable_last_done();

  public:
  // string change_val = 3 [json_name = "changeVal"];
  void clear_change_val() ;
  const std::string& change_val() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_change_val(Arg_&& arg, Args_... args);
  std::string* mutable_change_val();
  PROTOBUF_NODISCARD std::string* release_change_val();
  void set_allocated_change_val(std::string* value);

  private:
  const std::string& _internal_change_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_val(
      const std::string& value);
  std::string* _internal_mutable_change_val();

  public:
  // string change_rate = 4 [json_name = "changeRate"];
  void clear_change_rate() ;
  const std::string& change_rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_change_rate(Arg_&& arg, Args_... args);
  std::string* mutable_change_rate();
  PROTOBUF_NODISCARD std::string* release_change_rate();
  void set_allocated_change_rate(std::string* value);

  private:
  const std::string& _internal_change_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_rate(
      const std::string& value);
  std::string* _internal_mutable_change_rate();

  public:
  // string turnover = 6 [json_name = "turnover"];
  void clear_turnover() ;
  const std::string& turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_turnover();
  PROTOBUF_NODISCARD std::string* release_turnover();
  void set_allocated_turnover(std::string* value);

  private:
  const std::string& _internal_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover(
      const std::string& value);
  std::string* _internal_mutable_turnover();

  public:
  // string ytd_change_rate = 7 [json_name = "ytdChangeRate"];
  void clear_ytd_change_rate() ;
  const std::string& ytd_change_rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ytd_change_rate(Arg_&& arg, Args_... args);
  std::string* mutable_ytd_change_rate();
  PROTOBUF_NODISCARD std::string* release_ytd_change_rate();
  void set_allocated_ytd_change_rate(std::string* value);

  private:
  const std::string& _internal_ytd_change_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ytd_change_rate(
      const std::string& value);
  std::string* _internal_mutable_ytd_change_rate();

  public:
  // string turnover_rate = 8 [json_name = "turnoverRate"];
  void clear_turnover_rate() ;
  const std::string& turnover_rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover_rate(Arg_&& arg, Args_... args);
  std::string* mutable_turnover_rate();
  PROTOBUF_NODISCARD std::string* release_turnover_rate();
  void set_allocated_turnover_rate(std::string* value);

  private:
  const std::string& _internal_turnover_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover_rate(
      const std::string& value);
  std::string* _internal_mutable_turnover_rate();

  public:
  // string total_market_value = 9 [json_name = "totalMarketValue"];
  void clear_total_market_value() ;
  const std::string& total_market_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_total_market_value(Arg_&& arg, Args_... args);
  std::string* mutable_total_market_value();
  PROTOBUF_NODISCARD std::string* release_total_market_value();
  void set_allocated_total_market_value(std::string* value);

  private:
  const std::string& _internal_total_market_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_total_market_value(
      const std::string& value);
  std::string* _internal_mutable_total_market_value();

  public:
  // string capital_flow = 10 [json_name = "capitalFlow"];
  void clear_capital_flow() ;
  const std::string& capital_flow() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_capital_flow(Arg_&& arg, Args_... args);
  std::string* mutable_capital_flow();
  PROTOBUF_NODISCARD std::string* release_capital_flow();
  void set_allocated_capital_flow(std::string* value);

  private:
  const std::string& _internal_capital_flow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_capital_flow(
      const std::string& value);
  std::string* _internal_mutable_capital_flow();

  public:
  // string amplitude = 11 [json_name = "amplitude"];
  void clear_amplitude() ;
  const std::string& amplitude() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amplitude(Arg_&& arg, Args_... args);
  std::string* mutable_amplitude();
  PROTOBUF_NODISCARD std::string* release_amplitude();
  void set_allocated_amplitude(std::string* value);

  private:
  const std::string& _internal_amplitude() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amplitude(
      const std::string& value);
  std::string* _internal_mutable_amplitude();

  public:
  // string volume_ratio = 12 [json_name = "volumeRatio"];
  void clear_volume_ratio() ;
  const std::string& volume_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_volume_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_volume_ratio();
  PROTOBUF_NODISCARD std::string* release_volume_ratio();
  void set_allocated_volume_ratio(std::string* value);

  private:
  const std::string& _internal_volume_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume_ratio(
      const std::string& value);
  std::string* _internal_mutable_volume_ratio();

  public:
  // string pe_ttm_ratio = 13 [json_name = "peTtmRatio"];
  void clear_pe_ttm_ratio() ;
  const std::string& pe_ttm_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pe_ttm_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_pe_ttm_ratio();
  PROTOBUF_NODISCARD std::string* release_pe_ttm_ratio();
  void set_allocated_pe_ttm_ratio(std::string* value);

  private:
  const std::string& _internal_pe_ttm_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pe_ttm_ratio(
      const std::string& value);
  std::string* _internal_mutable_pe_ttm_ratio();

  public:
  // string pb_ratio = 14 [json_name = "pbRatio"];
  void clear_pb_ratio() ;
  const std::string& pb_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pb_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_pb_ratio();
  PROTOBUF_NODISCARD std::string* release_pb_ratio();
  void set_allocated_pb_ratio(std::string* value);

  private:
  const std::string& _internal_pb_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pb_ratio(
      const std::string& value);
  std::string* _internal_mutable_pb_ratio();

  public:
  // string dividend_ratio_ttm = 15 [json_name = "dividendRatioTtm"];
  void clear_dividend_ratio_ttm() ;
  const std::string& dividend_ratio_ttm() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dividend_ratio_ttm(Arg_&& arg, Args_... args);
  std::string* mutable_dividend_ratio_ttm();
  PROTOBUF_NODISCARD std::string* release_dividend_ratio_ttm();
  void set_allocated_dividend_ratio_ttm(std::string* value);

  private:
  const std::string& _internal_dividend_ratio_ttm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dividend_ratio_ttm(
      const std::string& value);
  std::string* _internal_mutable_dividend_ratio_ttm();

  public:
  // string five_day_change_rate = 16 [json_name = "fiveDayChangeRate"];
  void clear_five_day_change_rate() ;
  const std::string& five_day_change_rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_five_day_change_rate(Arg_&& arg, Args_... args);
  std::string* mutable_five_day_change_rate();
  PROTOBUF_NODISCARD std::string* release_five_day_change_rate();
  void set_allocated_five_day_change_rate(std::string* value);

  private:
  const std::string& _internal_five_day_change_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_five_day_change_rate(
      const std::string& value);
  std::string* _internal_mutable_five_day_change_rate();

  public:
  // string ten_day_change_rate = 17 [json_name = "tenDayChangeRate"];
  void clear_ten_day_change_rate() ;
  const std::string& ten_day_change_rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ten_day_change_rate(Arg_&& arg, Args_... args);
  std::string* mutable_ten_day_change_rate();
  PROTOBUF_NODISCARD std::string* release_ten_day_change_rate();
  void set_allocated_ten_day_change_rate(std::string* value);

  private:
  const std::string& _internal_ten_day_change_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ten_day_change_rate(
      const std::string& value);
  std::string* _internal_mutable_ten_day_change_rate();

  public:
  // string half_year_change_rate = 18 [json_name = "halfYearChangeRate"];
  void clear_half_year_change_rate() ;
  const std::string& half_year_change_rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_half_year_change_rate(Arg_&& arg, Args_... args);
  std::string* mutable_half_year_change_rate();
  PROTOBUF_NODISCARD std::string* release_half_year_change_rate();
  void set_allocated_half_year_change_rate(std::string* value);

  private:
  const std::string& _internal_half_year_change_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_half_year_change_rate(
      const std::string& value);
  std::string* _internal_mutable_half_year_change_rate();

  public:
  // string five_minutes_change_rate = 19 [json_name = "fiveMinutesChangeRate"];
  void clear_five_minutes_change_rate() ;
  const std::string& five_minutes_change_rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_five_minutes_change_rate(Arg_&& arg, Args_... args);
  std::string* mutable_five_minutes_change_rate();
  PROTOBUF_NODISCARD std::string* release_five_minutes_change_rate();
  void set_allocated_five_minutes_change_rate(std::string* value);

  private:
  const std::string& _internal_five_minutes_change_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_five_minutes_change_rate(
      const std::string& value);
  std::string* _internal_mutable_five_minutes_change_rate();

  public:
  // string expiry_date = 20 [json_name = "expiryDate"];
  void clear_expiry_date() ;
  const std::string& expiry_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiry_date(Arg_&& arg, Args_... args);
  std::string* mutable_expiry_date();
  PROTOBUF_NODISCARD std::string* release_expiry_date();
  void set_allocated_expiry_date(std::string* value);

  private:
  const std::string& _internal_expiry_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiry_date(
      const std::string& value);
  std::string* _internal_mutable_expiry_date();

  public:
  // string strike_price = 21 [json_name = "strikePrice"];
  void clear_strike_price() ;
  const std::string& strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_strike_price();
  PROTOBUF_NODISCARD std::string* release_strike_price();
  void set_allocated_strike_price(std::string* value);

  private:
  const std::string& _internal_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strike_price(
      const std::string& value);
  std::string* _internal_mutable_strike_price();

  public:
  // string upper_strike_price = 22 [json_name = "upperStrikePrice"];
  void clear_upper_strike_price() ;
  const std::string& upper_strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_upper_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_upper_strike_price();
  PROTOBUF_NODISCARD std::string* release_upper_strike_price();
  void set_allocated_upper_strike_price(std::string* value);

  private:
  const std::string& _internal_upper_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upper_strike_price(
      const std::string& value);
  std::string* _internal_mutable_upper_strike_price();

  public:
  // string lower_strike_price = 23 [json_name = "lowerStrikePrice"];
  void clear_lower_strike_price() ;
  const std::string& lower_strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lower_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_lower_strike_price();
  PROTOBUF_NODISCARD std::string* release_lower_strike_price();
  void set_allocated_lower_strike_price(std::string* value);

  private:
  const std::string& _internal_lower_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lower_strike_price(
      const std::string& value);
  std::string* _internal_mutable_lower_strike_price();

  public:
  // string outstanding_ratio = 25 [json_name = "outstandingRatio"];
  void clear_outstanding_ratio() ;
  const std::string& outstanding_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outstanding_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_outstanding_ratio();
  PROTOBUF_NODISCARD std::string* release_outstanding_ratio();
  void set_allocated_outstanding_ratio(std::string* value);

  private:
  const std::string& _internal_outstanding_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outstanding_ratio(
      const std::string& value);
  std::string* _internal_mutable_outstanding_ratio();

  public:
  // string premium = 26 [json_name = "premium"];
  void clear_premium() ;
  const std::string& premium() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_premium(Arg_&& arg, Args_... args);
  std::string* mutable_premium();
  PROTOBUF_NODISCARD std::string* release_premium();
  void set_allocated_premium(std::string* value);

  private:
  const std::string& _internal_premium() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_premium(
      const std::string& value);
  std::string* _internal_mutable_premium();

  public:
  // string itm_otm = 27 [json_name = "itmOtm"];
  void clear_itm_otm() ;
  const std::string& itm_otm() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_itm_otm(Arg_&& arg, Args_... args);
  std::string* mutable_itm_otm();
  PROTOBUF_NODISCARD std::string* release_itm_otm();
  void set_allocated_itm_otm(std::string* value);

  private:
  const std::string& _internal_itm_otm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_itm_otm(
      const std::string& value);
  std::string* _internal_mutable_itm_otm();

  public:
  // string implied_volatility = 28 [json_name = "impliedVolatility"];
  void clear_implied_volatility() ;
  const std::string& implied_volatility() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_implied_volatility(Arg_&& arg, Args_... args);
  std::string* mutable_implied_volatility();
  PROTOBUF_NODISCARD std::string* release_implied_volatility();
  void set_allocated_implied_volatility(std::string* value);

  private:
  const std::string& _internal_implied_volatility() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_implied_volatility(
      const std::string& value);
  std::string* _internal_mutable_implied_volatility();

  public:
  // string warrant_delta = 29 [json_name = "warrantDelta"];
  void clear_warrant_delta() ;
  const std::string& warrant_delta() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_warrant_delta(Arg_&& arg, Args_... args);
  std::string* mutable_warrant_delta();
  PROTOBUF_NODISCARD std::string* release_warrant_delta();
  void set_allocated_warrant_delta(std::string* value);

  private:
  const std::string& _internal_warrant_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_warrant_delta(
      const std::string& value);
  std::string* _internal_mutable_warrant_delta();

  public:
  // string call_price = 30 [json_name = "callPrice"];
  void clear_call_price() ;
  const std::string& call_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_call_price(Arg_&& arg, Args_... args);
  std::string* mutable_call_price();
  PROTOBUF_NODISCARD std::string* release_call_price();
  void set_allocated_call_price(std::string* value);

  private:
  const std::string& _internal_call_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_call_price(
      const std::string& value);
  std::string* _internal_mutable_call_price();

  public:
  // string to_call_price = 31 [json_name = "toCallPrice"];
  void clear_to_call_price() ;
  const std::string& to_call_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_call_price(Arg_&& arg, Args_... args);
  std::string* mutable_to_call_price();
  PROTOBUF_NODISCARD std::string* release_to_call_price();
  void set_allocated_to_call_price(std::string* value);

  private:
  const std::string& _internal_to_call_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_call_price(
      const std::string& value);
  std::string* _internal_mutable_to_call_price();

  public:
  // string effective_leverage = 32 [json_name = "effectiveLeverage"];
  void clear_effective_leverage() ;
  const std::string& effective_leverage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_effective_leverage(Arg_&& arg, Args_... args);
  std::string* mutable_effective_leverage();
  PROTOBUF_NODISCARD std::string* release_effective_leverage();
  void set_allocated_effective_leverage(std::string* value);

  private:
  const std::string& _internal_effective_leverage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effective_leverage(
      const std::string& value);
  std::string* _internal_mutable_effective_leverage();

  public:
  // string leverage_ratio = 33 [json_name = "leverageRatio"];
  void clear_leverage_ratio() ;
  const std::string& leverage_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leverage_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_leverage_ratio();
  PROTOBUF_NODISCARD std::string* release_leverage_ratio();
  void set_allocated_leverage_ratio(std::string* value);

  private:
  const std::string& _internal_leverage_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leverage_ratio(
      const std::string& value);
  std::string* _internal_mutable_leverage_ratio();

  public:
  // string conversion_ratio = 34 [json_name = "conversionRatio"];
  void clear_conversion_ratio() ;
  const std::string& conversion_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversion_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_conversion_ratio();
  PROTOBUF_NODISCARD std::string* release_conversion_ratio();
  void set_allocated_conversion_ratio(std::string* value);

  private:
  const std::string& _internal_conversion_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversion_ratio(
      const std::string& value);
  std::string* _internal_mutable_conversion_ratio();

  public:
  // string balance_point = 35 [json_name = "balancePoint"];
  void clear_balance_point() ;
  const std::string& balance_point() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_balance_point(Arg_&& arg, Args_... args);
  std::string* mutable_balance_point();
  PROTOBUF_NODISCARD std::string* release_balance_point();
  void set_allocated_balance_point(std::string* value);

  private:
  const std::string& _internal_balance_point() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_balance_point(
      const std::string& value);
  std::string* _internal_mutable_balance_point();

  public:
  // string delta = 37 [json_name = "delta"];
  void clear_delta() ;
  const std::string& delta() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delta(Arg_&& arg, Args_... args);
  std::string* mutable_delta();
  PROTOBUF_NODISCARD std::string* release_delta();
  void set_allocated_delta(std::string* value);

  private:
  const std::string& _internal_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delta(
      const std::string& value);
  std::string* _internal_mutable_delta();

  public:
  // string gamma = 38 [json_name = "gamma"];
  void clear_gamma() ;
  const std::string& gamma() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gamma(Arg_&& arg, Args_... args);
  std::string* mutable_gamma();
  PROTOBUF_NODISCARD std::string* release_gamma();
  void set_allocated_gamma(std::string* value);

  private:
  const std::string& _internal_gamma() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamma(
      const std::string& value);
  std::string* _internal_mutable_gamma();

  public:
  // string theta = 39 [json_name = "theta"];
  void clear_theta() ;
  const std::string& theta() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_theta(Arg_&& arg, Args_... args);
  std::string* mutable_theta();
  PROTOBUF_NODISCARD std::string* release_theta();
  void set_allocated_theta(std::string* value);

  private:
  const std::string& _internal_theta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theta(
      const std::string& value);
  std::string* _internal_mutable_theta();

  public:
  // string vega = 40 [json_name = "vega"];
  void clear_vega() ;
  const std::string& vega() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vega(Arg_&& arg, Args_... args);
  std::string* mutable_vega();
  PROTOBUF_NODISCARD std::string* release_vega();
  void set_allocated_vega(std::string* value);

  private:
  const std::string& _internal_vega() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vega(
      const std::string& value);
  std::string* _internal_mutable_vega();

  public:
  // string rho = 41 [json_name = "rho"];
  void clear_rho() ;
  const std::string& rho() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rho(Arg_&& arg, Args_... args);
  std::string* mutable_rho();
  PROTOBUF_NODISCARD std::string* release_rho();
  void set_allocated_rho(std::string* value);

  private:
  const std::string& _internal_rho() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rho(
      const std::string& value);
  std::string* _internal_mutable_rho();

  public:
  // int64 volume = 5 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // int64 outstanding_qty = 24 [json_name = "outstandingQty"];
  void clear_outstanding_qty() ;
  ::int64_t outstanding_qty() const;
  void set_outstanding_qty(::int64_t value);

  private:
  ::int64_t _internal_outstanding_qty() const;
  void _internal_set_outstanding_qty(::int64_t value);

  public:
  // int64 open_interest = 36 [json_name = "openInterest"];
  void clear_open_interest() ;
  ::int64_t open_interest() const;
  void set_open_interest(::int64_t value);

  private:
  ::int64_t _internal_open_interest() const;
  void _internal_set_open_interest(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityCalcIndex)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 41, 0,
      559, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr last_done_;
    ::google::protobuf::internal::ArenaStringPtr change_val_;
    ::google::protobuf::internal::ArenaStringPtr change_rate_;
    ::google::protobuf::internal::ArenaStringPtr turnover_;
    ::google::protobuf::internal::ArenaStringPtr ytd_change_rate_;
    ::google::protobuf::internal::ArenaStringPtr turnover_rate_;
    ::google::protobuf::internal::ArenaStringPtr total_market_value_;
    ::google::protobuf::internal::ArenaStringPtr capital_flow_;
    ::google::protobuf::internal::ArenaStringPtr amplitude_;
    ::google::protobuf::internal::ArenaStringPtr volume_ratio_;
    ::google::protobuf::internal::ArenaStringPtr pe_ttm_ratio_;
    ::google::protobuf::internal::ArenaStringPtr pb_ratio_;
    ::google::protobuf::internal::ArenaStringPtr dividend_ratio_ttm_;
    ::google::protobuf::internal::ArenaStringPtr five_day_change_rate_;
    ::google::protobuf::internal::ArenaStringPtr ten_day_change_rate_;
    ::google::protobuf::internal::ArenaStringPtr half_year_change_rate_;
    ::google::protobuf::internal::ArenaStringPtr five_minutes_change_rate_;
    ::google::protobuf::internal::ArenaStringPtr expiry_date_;
    ::google::protobuf::internal::ArenaStringPtr strike_price_;
    ::google::protobuf::internal::ArenaStringPtr upper_strike_price_;
    ::google::protobuf::internal::ArenaStringPtr lower_strike_price_;
    ::google::protobuf::internal::ArenaStringPtr outstanding_ratio_;
    ::google::protobuf::internal::ArenaStringPtr premium_;
    ::google::protobuf::internal::ArenaStringPtr itm_otm_;
    ::google::protobuf::internal::ArenaStringPtr implied_volatility_;
    ::google::protobuf::internal::ArenaStringPtr warrant_delta_;
    ::google::protobuf::internal::ArenaStringPtr call_price_;
    ::google::protobuf::internal::ArenaStringPtr to_call_price_;
    ::google::protobuf::internal::ArenaStringPtr effective_leverage_;
    ::google::protobuf::internal::ArenaStringPtr leverage_ratio_;
    ::google::protobuf::internal::ArenaStringPtr conversion_ratio_;
    ::google::protobuf::internal::ArenaStringPtr balance_point_;
    ::google::protobuf::internal::ArenaStringPtr delta_;
    ::google::protobuf::internal::ArenaStringPtr gamma_;
    ::google::protobuf::internal::ArenaStringPtr theta_;
    ::google::protobuf::internal::ArenaStringPtr vega_;
    ::google::protobuf::internal::ArenaStringPtr rho_;
    ::int64_t volume_;
    ::int64_t outstanding_qty_;
    ::int64_t open_interest_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class RateLimit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.RateLimit) */ {
 public:
  inline RateLimit() : RateLimit(nullptr) {}
  ~RateLimit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RateLimit(::google::protobuf::internal::ConstantInitialized);

  inline RateLimit(const RateLimit& from)
      : RateLimit(nullptr, from) {}
  RateLimit(RateLimit&& from) noexcept
    : RateLimit() {
    *this = ::std::move(from);
  }

  inline RateLimit& operator=(const RateLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateLimit& operator=(RateLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RateLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateLimit* internal_default_instance() {
    return reinterpret_cast<const RateLimit*>(
               &_RateLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RateLimit& a, RateLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(RateLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateLimit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RateLimit* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RateLimit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RateLimit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RateLimit& from) {
    RateLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RateLimit* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.RateLimit";
  }
  protected:
  explicit RateLimit(::google::protobuf::Arena* arena);
  RateLimit(::google::protobuf::Arena* arena, const RateLimit& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kLimitFieldNumber = 2,
    kBurstFieldNumber = 3,
  };
  // .longportapp.quote.v1.Command command = 1 [json_name = "command"];
  void clear_command() ;
  ::longportapp::quote::v1::Command command() const;
  void set_command(::longportapp::quote::v1::Command value);

  private:
  ::longportapp::quote::v1::Command _internal_command() const;
  void _internal_set_command(::longportapp::quote::v1::Command value);

  public:
  // int32 limit = 2 [json_name = "limit"];
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // int32 burst = 3 [json_name = "burst"];
  void clear_burst() ;
  ::int32_t burst() const;
  void set_burst(::int32_t value);

  private:
  ::int32_t _internal_burst() const;
  void _internal_set_burst(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.RateLimit)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int command_;
    ::int32_t limit_;
    ::int32_t burst_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class PushQuote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.PushQuote) */ {
 public:
  inline PushQuote() : PushQuote(nullptr) {}
  ~PushQuote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PushQuote(::google::protobuf::internal::ConstantInitialized);

  inline PushQuote(const PushQuote& from)
      : PushQuote(nullptr, from) {}
  PushQuote(PushQuote&& from) noexcept
    : PushQuote() {
    *this = ::std::move(from);
  }

  inline PushQuote& operator=(const PushQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushQuote& operator=(PushQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushQuote* internal_default_instance() {
    return reinterpret_cast<const PushQuote*>(
               &_PushQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(PushQuote& a, PushQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(PushQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushQuote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushQuote* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushQuote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushQuote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PushQuote& from) {
    PushQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PushQuote* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.PushQuote";
  }
  protected:
  explicit PushQuote(::google::protobuf::Arena* arena);
  PushQuote(::google::protobuf::Arena* arena, const PushQuote& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kLastDoneFieldNumber = 3,
    kOpenFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kTurnoverFieldNumber = 9,
    kCurrentTurnoverFieldNumber = 13,
    kSequenceFieldNumber = 2,
    kTimestampFieldNumber = 7,
    kVolumeFieldNumber = 8,
    kTradeStatusFieldNumber = 10,
    kTradeSessionFieldNumber = 11,
    kCurrentVolumeFieldNumber = 12,
    kTagFieldNumber = 14,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string last_done = 3 [json_name = "lastDone"];
  void clear_last_done() ;
  const std::string& last_done() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_done(Arg_&& arg, Args_... args);
  std::string* mutable_last_done();
  PROTOBUF_NODISCARD std::string* release_last_done();
  void set_allocated_last_done(std::string* value);

  private:
  const std::string& _internal_last_done() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_done(
      const std::string& value);
  std::string* _internal_mutable_last_done();

  public:
  // string open = 4 [json_name = "open"];
  void clear_open() ;
  const std::string& open() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open(Arg_&& arg, Args_... args);
  std::string* mutable_open();
  PROTOBUF_NODISCARD std::string* release_open();
  void set_allocated_open(std::string* value);

  private:
  const std::string& _internal_open() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open(
      const std::string& value);
  std::string* _internal_mutable_open();

  public:
  // string high = 5 [json_name = "high"];
  void clear_high() ;
  const std::string& high() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_high(Arg_&& arg, Args_... args);
  std::string* mutable_high();
  PROTOBUF_NODISCARD std::string* release_high();
  void set_allocated_high(std::string* value);

  private:
  const std::string& _internal_high() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_high(
      const std::string& value);
  std::string* _internal_mutable_high();

  public:
  // string low = 6 [json_name = "low"];
  void clear_low() ;
  const std::string& low() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_low(Arg_&& arg, Args_... args);
  std::string* mutable_low();
  PROTOBUF_NODISCARD std::string* release_low();
  void set_allocated_low(std::string* value);

  private:
  const std::string& _internal_low() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_low(
      const std::string& value);
  std::string* _internal_mutable_low();

  public:
  // string turnover = 9 [json_name = "turnover"];
  void clear_turnover() ;
  const std::string& turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_turnover();
  PROTOBUF_NODISCARD std::string* release_turnover();
  void set_allocated_turnover(std::string* value);

  private:
  const std::string& _internal_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover(
      const std::string& value);
  std::string* _internal_mutable_turnover();

  public:
  // string current_turnover = 13 [json_name = "currentTurnover"];
  void clear_current_turnover() ;
  const std::string& current_turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_current_turnover();
  PROTOBUF_NODISCARD std::string* release_current_turnover();
  void set_allocated_current_turnover(std::string* value);

  private:
  const std::string& _internal_current_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_turnover(
      const std::string& value);
  std::string* _internal_mutable_current_turnover();

  public:
  // int64 sequence = 2 [json_name = "sequence"];
  void clear_sequence() ;
  ::int64_t sequence() const;
  void set_sequence(::int64_t value);

  private:
  ::int64_t _internal_sequence() const;
  void _internal_set_sequence(::int64_t value);

  public:
  // int64 timestamp = 7 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int64 volume = 8 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // .longportapp.quote.v1.TradeStatus trade_status = 10 [json_name = "tradeStatus"];
  void clear_trade_status() ;
  ::longportapp::quote::v1::TradeStatus trade_status() const;
  void set_trade_status(::longportapp::quote::v1::TradeStatus value);

  private:
  ::longportapp::quote::v1::TradeStatus _internal_trade_status() const;
  void _internal_set_trade_status(::longportapp::quote::v1::TradeStatus value);

  public:
  // .longportapp.quote.v1.TradeSession trade_session = 11 [json_name = "tradeSession"];
  void clear_trade_session() ;
  ::longportapp::quote::v1::TradeSession trade_session() const;
  void set_trade_session(::longportapp::quote::v1::TradeSession value);

  private:
  ::longportapp::quote::v1::TradeSession _internal_trade_session() const;
  void _internal_set_trade_session(::longportapp::quote::v1::TradeSession value);

  public:
  // int64 current_volume = 12 [json_name = "currentVolume"];
  void clear_current_volume() ;
  ::int64_t current_volume() const;
  void set_current_volume(::int64_t value);

  private:
  ::int64_t _internal_current_volume() const;
  void _internal_set_current_volume(::int64_t value);

  public:
  // .longportapp.quote.v1.PushQuoteTag tag = 14 [json_name = "tag"];
  void clear_tag() ;
  ::longportapp::quote::v1::PushQuoteTag tag() const;
  void set_tag(::longportapp::quote::v1::PushQuoteTag value);

  private:
  ::longportapp::quote::v1::PushQuoteTag _internal_tag() const;
  void _internal_set_tag(::longportapp::quote::v1::PushQuoteTag value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.PushQuote)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 0,
      97, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr last_done_;
    ::google::protobuf::internal::ArenaStringPtr open_;
    ::google::protobuf::internal::ArenaStringPtr high_;
    ::google::protobuf::internal::ArenaStringPtr low_;
    ::google::protobuf::internal::ArenaStringPtr turnover_;
    ::google::protobuf::internal::ArenaStringPtr current_turnover_;
    ::int64_t sequence_;
    ::int64_t timestamp_;
    ::int64_t volume_;
    int trade_status_;
    int trade_session_;
    ::int64_t current_volume_;
    int tag_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class PrePostQuote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.PrePostQuote) */ {
 public:
  inline PrePostQuote() : PrePostQuote(nullptr) {}
  ~PrePostQuote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PrePostQuote(::google::protobuf::internal::ConstantInitialized);

  inline PrePostQuote(const PrePostQuote& from)
      : PrePostQuote(nullptr, from) {}
  PrePostQuote(PrePostQuote&& from) noexcept
    : PrePostQuote() {
    *this = ::std::move(from);
  }

  inline PrePostQuote& operator=(const PrePostQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrePostQuote& operator=(PrePostQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrePostQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrePostQuote* internal_default_instance() {
    return reinterpret_cast<const PrePostQuote*>(
               &_PrePostQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PrePostQuote& a, PrePostQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(PrePostQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrePostQuote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrePostQuote* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrePostQuote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PrePostQuote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PrePostQuote& from) {
    PrePostQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PrePostQuote* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.PrePostQuote";
  }
  protected:
  explicit PrePostQuote(::google::protobuf::Arena* arena);
  PrePostQuote(::google::protobuf::Arena* arena, const PrePostQuote& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastDoneFieldNumber = 1,
    kTurnoverFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kPrevCloseFieldNumber = 7,
    kTimestampFieldNumber = 2,
    kVolumeFieldNumber = 3,
  };
  // string last_done = 1 [json_name = "lastDone"];
  void clear_last_done() ;
  const std::string& last_done() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_done(Arg_&& arg, Args_... args);
  std::string* mutable_last_done();
  PROTOBUF_NODISCARD std::string* release_last_done();
  void set_allocated_last_done(std::string* value);

  private:
  const std::string& _internal_last_done() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_done(
      const std::string& value);
  std::string* _internal_mutable_last_done();

  public:
  // string turnover = 4 [json_name = "turnover"];
  void clear_turnover() ;
  const std::string& turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_turnover();
  PROTOBUF_NODISCARD std::string* release_turnover();
  void set_allocated_turnover(std::string* value);

  private:
  const std::string& _internal_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover(
      const std::string& value);
  std::string* _internal_mutable_turnover();

  public:
  // string high = 5 [json_name = "high"];
  void clear_high() ;
  const std::string& high() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_high(Arg_&& arg, Args_... args);
  std::string* mutable_high();
  PROTOBUF_NODISCARD std::string* release_high();
  void set_allocated_high(std::string* value);

  private:
  const std::string& _internal_high() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_high(
      const std::string& value);
  std::string* _internal_mutable_high();

  public:
  // string low = 6 [json_name = "low"];
  void clear_low() ;
  const std::string& low() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_low(Arg_&& arg, Args_... args);
  std::string* mutable_low();
  PROTOBUF_NODISCARD std::string* release_low();
  void set_allocated_low(std::string* value);

  private:
  const std::string& _internal_low() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_low(
      const std::string& value);
  std::string* _internal_mutable_low();

  public:
  // string prev_close = 7 [json_name = "prevClose"];
  void clear_prev_close() ;
  const std::string& prev_close() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prev_close(Arg_&& arg, Args_... args);
  std::string* mutable_prev_close();
  PROTOBUF_NODISCARD std::string* release_prev_close();
  void set_allocated_prev_close(std::string* value);

  private:
  const std::string& _internal_prev_close() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_close(
      const std::string& value);
  std::string* _internal_mutable_prev_close();

  public:
  // int64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int64 volume = 3 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.PrePostQuote)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      76, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr last_done_;
    ::google::protobuf::internal::ArenaStringPtr turnover_;
    ::google::protobuf::internal::ArenaStringPtr high_;
    ::google::protobuf::internal::ArenaStringPtr low_;
    ::google::protobuf::internal::ArenaStringPtr prev_close_;
    ::int64_t timestamp_;
    ::int64_t volume_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class ParticipantInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.ParticipantInfo) */ {
 public:
  inline ParticipantInfo() : ParticipantInfo(nullptr) {}
  ~ParticipantInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ParticipantInfo(::google::protobuf::internal::ConstantInitialized);

  inline ParticipantInfo(const ParticipantInfo& from)
      : ParticipantInfo(nullptr, from) {}
  ParticipantInfo(ParticipantInfo&& from) noexcept
    : ParticipantInfo() {
    *this = ::std::move(from);
  }

  inline ParticipantInfo& operator=(const ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParticipantInfo& operator=(ParticipantInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParticipantInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParticipantInfo* internal_default_instance() {
    return reinterpret_cast<const ParticipantInfo*>(
               &_ParticipantInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ParticipantInfo& a, ParticipantInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ParticipantInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParticipantInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParticipantInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParticipantInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParticipantInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ParticipantInfo& from) {
    ParticipantInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ParticipantInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.ParticipantInfo";
  }
  protected:
  explicit ParticipantInfo(::google::protobuf::Arena* arena);
  ParticipantInfo(::google::protobuf::Arena* arena, const ParticipantInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerIdsFieldNumber = 1,
    kParticipantNameCnFieldNumber = 2,
    kParticipantNameEnFieldNumber = 3,
    kParticipantNameHkFieldNumber = 4,
  };
  // repeated int32 broker_ids = 1 [json_name = "brokerIds"];
  int broker_ids_size() const;
  private:
  int _internal_broker_ids_size() const;

  public:
  void clear_broker_ids() ;
  ::int32_t broker_ids(int index) const;
  void set_broker_ids(int index, ::int32_t value);
  void add_broker_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& broker_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_broker_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_broker_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_broker_ids();

  public:
  // string participant_name_cn = 2 [json_name = "participantNameCn"];
  void clear_participant_name_cn() ;
  const std::string& participant_name_cn() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant_name_cn(Arg_&& arg, Args_... args);
  std::string* mutable_participant_name_cn();
  PROTOBUF_NODISCARD std::string* release_participant_name_cn();
  void set_allocated_participant_name_cn(std::string* value);

  private:
  const std::string& _internal_participant_name_cn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_name_cn(
      const std::string& value);
  std::string* _internal_mutable_participant_name_cn();

  public:
  // string participant_name_en = 3 [json_name = "participantNameEn"];
  void clear_participant_name_en() ;
  const std::string& participant_name_en() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant_name_en(Arg_&& arg, Args_... args);
  std::string* mutable_participant_name_en();
  PROTOBUF_NODISCARD std::string* release_participant_name_en();
  void set_allocated_participant_name_en(std::string* value);

  private:
  const std::string& _internal_participant_name_en() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_name_en(
      const std::string& value);
  std::string* _internal_mutable_participant_name_en();

  public:
  // string participant_name_hk = 4 [json_name = "participantNameHk"];
  void clear_participant_name_hk() ;
  const std::string& participant_name_hk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant_name_hk(Arg_&& arg, Args_... args);
  std::string* mutable_participant_name_hk();
  PROTOBUF_NODISCARD std::string* release_participant_name_hk();
  void set_allocated_participant_name_hk(std::string* value);

  private:
  const std::string& _internal_participant_name_hk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_name_hk(
      const std::string& value);
  std::string* _internal_mutable_participant_name_hk();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.ParticipantInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      102, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> broker_ids_;
    mutable ::google::protobuf::internal::CachedSize _broker_ids_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr participant_name_cn_;
    ::google::protobuf::internal::ArenaStringPtr participant_name_en_;
    ::google::protobuf::internal::ArenaStringPtr participant_name_hk_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class OptionExtend final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.OptionExtend) */ {
 public:
  inline OptionExtend() : OptionExtend(nullptr) {}
  ~OptionExtend() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionExtend(::google::protobuf::internal::ConstantInitialized);

  inline OptionExtend(const OptionExtend& from)
      : OptionExtend(nullptr, from) {}
  OptionExtend(OptionExtend&& from) noexcept
    : OptionExtend() {
    *this = ::std::move(from);
  }

  inline OptionExtend& operator=(const OptionExtend& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionExtend& operator=(OptionExtend&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionExtend& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionExtend* internal_default_instance() {
    return reinterpret_cast<const OptionExtend*>(
               &_OptionExtend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OptionExtend& a, OptionExtend& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionExtend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionExtend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionExtend* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionExtend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptionExtend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OptionExtend& from) {
    OptionExtend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionExtend* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.OptionExtend";
  }
  protected:
  explicit OptionExtend(::google::protobuf::Arena* arena);
  OptionExtend(::google::protobuf::Arena* arena, const OptionExtend& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpliedVolatilityFieldNumber = 1,
    kExpiryDateFieldNumber = 3,
    kStrikePriceFieldNumber = 4,
    kContractMultiplierFieldNumber = 5,
    kContractTypeFieldNumber = 6,
    kContractSizeFieldNumber = 7,
    kDirectionFieldNumber = 8,
    kHistoricalVolatilityFieldNumber = 9,
    kUnderlyingSymbolFieldNumber = 10,
    kOpenInterestFieldNumber = 2,
  };
  // string implied_volatility = 1 [json_name = "impliedVolatility"];
  void clear_implied_volatility() ;
  const std::string& implied_volatility() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_implied_volatility(Arg_&& arg, Args_... args);
  std::string* mutable_implied_volatility();
  PROTOBUF_NODISCARD std::string* release_implied_volatility();
  void set_allocated_implied_volatility(std::string* value);

  private:
  const std::string& _internal_implied_volatility() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_implied_volatility(
      const std::string& value);
  std::string* _internal_mutable_implied_volatility();

  public:
  // string expiry_date = 3 [json_name = "expiryDate"];
  void clear_expiry_date() ;
  const std::string& expiry_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiry_date(Arg_&& arg, Args_... args);
  std::string* mutable_expiry_date();
  PROTOBUF_NODISCARD std::string* release_expiry_date();
  void set_allocated_expiry_date(std::string* value);

  private:
  const std::string& _internal_expiry_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiry_date(
      const std::string& value);
  std::string* _internal_mutable_expiry_date();

  public:
  // string strike_price = 4 [json_name = "strikePrice"];
  void clear_strike_price() ;
  const std::string& strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_strike_price();
  PROTOBUF_NODISCARD std::string* release_strike_price();
  void set_allocated_strike_price(std::string* value);

  private:
  const std::string& _internal_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strike_price(
      const std::string& value);
  std::string* _internal_mutable_strike_price();

  public:
  // string contract_multiplier = 5 [json_name = "contractMultiplier"];
  void clear_contract_multiplier() ;
  const std::string& contract_multiplier() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_multiplier(Arg_&& arg, Args_... args);
  std::string* mutable_contract_multiplier();
  PROTOBUF_NODISCARD std::string* release_contract_multiplier();
  void set_allocated_contract_multiplier(std::string* value);

  private:
  const std::string& _internal_contract_multiplier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_multiplier(
      const std::string& value);
  std::string* _internal_mutable_contract_multiplier();

  public:
  // string contract_type = 6 [json_name = "contractType"];
  void clear_contract_type() ;
  const std::string& contract_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_type(Arg_&& arg, Args_... args);
  std::string* mutable_contract_type();
  PROTOBUF_NODISCARD std::string* release_contract_type();
  void set_allocated_contract_type(std::string* value);

  private:
  const std::string& _internal_contract_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_type(
      const std::string& value);
  std::string* _internal_mutable_contract_type();

  public:
  // string contract_size = 7 [json_name = "contractSize"];
  void clear_contract_size() ;
  const std::string& contract_size() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_size(Arg_&& arg, Args_... args);
  std::string* mutable_contract_size();
  PROTOBUF_NODISCARD std::string* release_contract_size();
  void set_allocated_contract_size(std::string* value);

  private:
  const std::string& _internal_contract_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_size(
      const std::string& value);
  std::string* _internal_mutable_contract_size();

  public:
  // string direction = 8 [json_name = "direction"];
  void clear_direction() ;
  const std::string& direction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_direction(Arg_&& arg, Args_... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* value);

  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(
      const std::string& value);
  std::string* _internal_mutable_direction();

  public:
  // string historical_volatility = 9 [json_name = "historicalVolatility"];
  void clear_historical_volatility() ;
  const std::string& historical_volatility() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_historical_volatility(Arg_&& arg, Args_... args);
  std::string* mutable_historical_volatility();
  PROTOBUF_NODISCARD std::string* release_historical_volatility();
  void set_allocated_historical_volatility(std::string* value);

  private:
  const std::string& _internal_historical_volatility() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_historical_volatility(
      const std::string& value);
  std::string* _internal_mutable_historical_volatility();

  public:
  // string underlying_symbol = 10 [json_name = "underlyingSymbol"];
  void clear_underlying_symbol() ;
  const std::string& underlying_symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_underlying_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_underlying_symbol();
  PROTOBUF_NODISCARD std::string* release_underlying_symbol();
  void set_allocated_underlying_symbol(std::string* value);

  private:
  const std::string& _internal_underlying_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlying_symbol(
      const std::string& value);
  std::string* _internal_mutable_underlying_symbol();

  public:
  // int64 open_interest = 2 [json_name = "openInterest"];
  void clear_open_interest() ;
  ::int64_t open_interest() const;
  void set_open_interest(::int64_t value);

  private:
  ::int64_t _internal_open_interest() const;
  void _internal_set_open_interest(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.OptionExtend)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      183, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr implied_volatility_;
    ::google::protobuf::internal::ArenaStringPtr expiry_date_;
    ::google::protobuf::internal::ArenaStringPtr strike_price_;
    ::google::protobuf::internal::ArenaStringPtr contract_multiplier_;
    ::google::protobuf::internal::ArenaStringPtr contract_type_;
    ::google::protobuf::internal::ArenaStringPtr contract_size_;
    ::google::protobuf::internal::ArenaStringPtr direction_;
    ::google::protobuf::internal::ArenaStringPtr historical_volatility_;
    ::google::protobuf::internal::ArenaStringPtr underlying_symbol_;
    ::int64_t open_interest_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class OptionChainDateStrikeInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.OptionChainDateStrikeInfoRequest) */ {
 public:
  inline OptionChainDateStrikeInfoRequest() : OptionChainDateStrikeInfoRequest(nullptr) {}
  ~OptionChainDateStrikeInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionChainDateStrikeInfoRequest(::google::protobuf::internal::ConstantInitialized);

  inline OptionChainDateStrikeInfoRequest(const OptionChainDateStrikeInfoRequest& from)
      : OptionChainDateStrikeInfoRequest(nullptr, from) {}
  OptionChainDateStrikeInfoRequest(OptionChainDateStrikeInfoRequest&& from) noexcept
    : OptionChainDateStrikeInfoRequest() {
    *this = ::std::move(from);
  }

  inline OptionChainDateStrikeInfoRequest& operator=(const OptionChainDateStrikeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionChainDateStrikeInfoRequest& operator=(OptionChainDateStrikeInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionChainDateStrikeInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionChainDateStrikeInfoRequest* internal_default_instance() {
    return reinterpret_cast<const OptionChainDateStrikeInfoRequest*>(
               &_OptionChainDateStrikeInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(OptionChainDateStrikeInfoRequest& a, OptionChainDateStrikeInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionChainDateStrikeInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionChainDateStrikeInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionChainDateStrikeInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionChainDateStrikeInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptionChainDateStrikeInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OptionChainDateStrikeInfoRequest& from) {
    OptionChainDateStrikeInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionChainDateStrikeInfoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.OptionChainDateStrikeInfoRequest";
  }
  protected:
  explicit OptionChainDateStrikeInfoRequest(::google::protobuf::Arena* arena);
  OptionChainDateStrikeInfoRequest(::google::protobuf::Arena* arena, const OptionChainDateStrikeInfoRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kExpiryDateFieldNumber = 2,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string expiry_date = 2 [json_name = "expiryDate"];
  void clear_expiry_date() ;
  const std::string& expiry_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiry_date(Arg_&& arg, Args_... args);
  std::string* mutable_expiry_date();
  PROTOBUF_NODISCARD std::string* release_expiry_date();
  void set_allocated_expiry_date(std::string* value);

  private:
  const std::string& _internal_expiry_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiry_date(
      const std::string& value);
  std::string* _internal_mutable_expiry_date();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.OptionChainDateStrikeInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      79, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr expiry_date_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class OptionChainDateListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.OptionChainDateListResponse) */ {
 public:
  inline OptionChainDateListResponse() : OptionChainDateListResponse(nullptr) {}
  ~OptionChainDateListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionChainDateListResponse(::google::protobuf::internal::ConstantInitialized);

  inline OptionChainDateListResponse(const OptionChainDateListResponse& from)
      : OptionChainDateListResponse(nullptr, from) {}
  OptionChainDateListResponse(OptionChainDateListResponse&& from) noexcept
    : OptionChainDateListResponse() {
    *this = ::std::move(from);
  }

  inline OptionChainDateListResponse& operator=(const OptionChainDateListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionChainDateListResponse& operator=(OptionChainDateListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionChainDateListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionChainDateListResponse* internal_default_instance() {
    return reinterpret_cast<const OptionChainDateListResponse*>(
               &_OptionChainDateListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(OptionChainDateListResponse& a, OptionChainDateListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionChainDateListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionChainDateListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionChainDateListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionChainDateListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptionChainDateListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OptionChainDateListResponse& from) {
    OptionChainDateListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionChainDateListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.OptionChainDateListResponse";
  }
  protected:
  explicit OptionChainDateListResponse(::google::protobuf::Arena* arena);
  OptionChainDateListResponse(::google::protobuf::Arena* arena, const OptionChainDateListResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpiryDateFieldNumber = 1,
  };
  // repeated string expiry_date = 1 [json_name = "expiryDate"];
  int expiry_date_size() const;
  private:
  int _internal_expiry_date_size() const;

  public:
  void clear_expiry_date() ;
  const std::string& expiry_date(int index) const;
  std::string* mutable_expiry_date(int index);
  void set_expiry_date(int index, const std::string& value);
  void set_expiry_date(int index, std::string&& value);
  void set_expiry_date(int index, const char* value);
  void set_expiry_date(int index, const char* value, std::size_t size);
  void set_expiry_date(int index, absl::string_view value);
  std::string* add_expiry_date();
  void add_expiry_date(const std::string& value);
  void add_expiry_date(std::string&& value);
  void add_expiry_date(const char* value);
  void add_expiry_date(const char* value, std::size_t size);
  void add_expiry_date(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& expiry_date() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_expiry_date();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_expiry_date() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_expiry_date();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.OptionChainDateListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> expiry_date_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class MultiSecurityRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.MultiSecurityRequest) */ {
 public:
  inline MultiSecurityRequest() : MultiSecurityRequest(nullptr) {}
  ~MultiSecurityRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MultiSecurityRequest(::google::protobuf::internal::ConstantInitialized);

  inline MultiSecurityRequest(const MultiSecurityRequest& from)
      : MultiSecurityRequest(nullptr, from) {}
  MultiSecurityRequest(MultiSecurityRequest&& from) noexcept
    : MultiSecurityRequest() {
    *this = ::std::move(from);
  }

  inline MultiSecurityRequest& operator=(const MultiSecurityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiSecurityRequest& operator=(MultiSecurityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiSecurityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiSecurityRequest* internal_default_instance() {
    return reinterpret_cast<const MultiSecurityRequest*>(
               &_MultiSecurityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultiSecurityRequest& a, MultiSecurityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiSecurityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiSecurityRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiSecurityRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiSecurityRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiSecurityRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MultiSecurityRequest& from) {
    MultiSecurityRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MultiSecurityRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.MultiSecurityRequest";
  }
  protected:
  explicit MultiSecurityRequest(::google::protobuf::Arena* arena);
  MultiSecurityRequest(::google::protobuf::Arena* arena, const MultiSecurityRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
  };
  // repeated string symbol = 1 [json_name = "symbol"];
  int symbol_size() const;
  private:
  int _internal_symbol_size() const;

  public:
  void clear_symbol() ;
  const std::string& symbol(int index) const;
  std::string* mutable_symbol(int index);
  void set_symbol(int index, const std::string& value);
  void set_symbol(int index, std::string&& value);
  void set_symbol(int index, const char* value);
  void set_symbol(int index, const char* value, std::size_t size);
  void set_symbol(int index, absl::string_view value);
  std::string* add_symbol();
  void add_symbol(const std::string& value);
  void add_symbol(std::string&& value);
  void add_symbol(const char* value);
  void add_symbol(const char* value, std::size_t size);
  void add_symbol(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& symbol() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_symbol();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_symbol() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.MultiSecurityRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class MarketTradeDayResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.MarketTradeDayResponse) */ {
 public:
  inline MarketTradeDayResponse() : MarketTradeDayResponse(nullptr) {}
  ~MarketTradeDayResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketTradeDayResponse(::google::protobuf::internal::ConstantInitialized);

  inline MarketTradeDayResponse(const MarketTradeDayResponse& from)
      : MarketTradeDayResponse(nullptr, from) {}
  MarketTradeDayResponse(MarketTradeDayResponse&& from) noexcept
    : MarketTradeDayResponse() {
    *this = ::std::move(from);
  }

  inline MarketTradeDayResponse& operator=(const MarketTradeDayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketTradeDayResponse& operator=(MarketTradeDayResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketTradeDayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketTradeDayResponse* internal_default_instance() {
    return reinterpret_cast<const MarketTradeDayResponse*>(
               &_MarketTradeDayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(MarketTradeDayResponse& a, MarketTradeDayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketTradeDayResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketTradeDayResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketTradeDayResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketTradeDayResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketTradeDayResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MarketTradeDayResponse& from) {
    MarketTradeDayResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MarketTradeDayResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.MarketTradeDayResponse";
  }
  protected:
  explicit MarketTradeDayResponse(::google::protobuf::Arena* arena);
  MarketTradeDayResponse(::google::protobuf::Arena* arena, const MarketTradeDayResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeDayFieldNumber = 1,
    kHalfTradeDayFieldNumber = 2,
  };
  // repeated string trade_day = 1 [json_name = "tradeDay"];
  int trade_day_size() const;
  private:
  int _internal_trade_day_size() const;

  public:
  void clear_trade_day() ;
  const std::string& trade_day(int index) const;
  std::string* mutable_trade_day(int index);
  void set_trade_day(int index, const std::string& value);
  void set_trade_day(int index, std::string&& value);
  void set_trade_day(int index, const char* value);
  void set_trade_day(int index, const char* value, std::size_t size);
  void set_trade_day(int index, absl::string_view value);
  std::string* add_trade_day();
  void add_trade_day(const std::string& value);
  void add_trade_day(std::string&& value);
  void add_trade_day(const char* value);
  void add_trade_day(const char* value, std::size_t size);
  void add_trade_day(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& trade_day() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_trade_day();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_trade_day() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_trade_day();

  public:
  // repeated string half_trade_day = 2 [json_name = "halfTradeDay"];
  int half_trade_day_size() const;
  private:
  int _internal_half_trade_day_size() const;

  public:
  void clear_half_trade_day() ;
  const std::string& half_trade_day(int index) const;
  std::string* mutable_half_trade_day(int index);
  void set_half_trade_day(int index, const std::string& value);
  void set_half_trade_day(int index, std::string&& value);
  void set_half_trade_day(int index, const char* value);
  void set_half_trade_day(int index, const char* value, std::size_t size);
  void set_half_trade_day(int index, absl::string_view value);
  std::string* add_half_trade_day();
  void add_half_trade_day(const std::string& value);
  void add_half_trade_day(std::string&& value);
  void add_half_trade_day(const char* value);
  void add_half_trade_day(const char* value, std::size_t size);
  void add_half_trade_day(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& half_trade_day() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_half_trade_day();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_half_trade_day() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_half_trade_day();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.MarketTradeDayResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> trade_day_;
    ::google::protobuf::RepeatedPtrField<std::string> half_trade_day_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class MarketTradeDayRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.MarketTradeDayRequest) */ {
 public:
  inline MarketTradeDayRequest() : MarketTradeDayRequest(nullptr) {}
  ~MarketTradeDayRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketTradeDayRequest(::google::protobuf::internal::ConstantInitialized);

  inline MarketTradeDayRequest(const MarketTradeDayRequest& from)
      : MarketTradeDayRequest(nullptr, from) {}
  MarketTradeDayRequest(MarketTradeDayRequest&& from) noexcept
    : MarketTradeDayRequest() {
    *this = ::std::move(from);
  }

  inline MarketTradeDayRequest& operator=(const MarketTradeDayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketTradeDayRequest& operator=(MarketTradeDayRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketTradeDayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketTradeDayRequest* internal_default_instance() {
    return reinterpret_cast<const MarketTradeDayRequest*>(
               &_MarketTradeDayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(MarketTradeDayRequest& a, MarketTradeDayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketTradeDayRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketTradeDayRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketTradeDayRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketTradeDayRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketTradeDayRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MarketTradeDayRequest& from) {
    MarketTradeDayRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MarketTradeDayRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.MarketTradeDayRequest";
  }
  protected:
  explicit MarketTradeDayRequest(::google::protobuf::Arena* arena);
  MarketTradeDayRequest(::google::protobuf::Arena* arena, const MarketTradeDayRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
    kBegDayFieldNumber = 2,
    kEndDayFieldNumber = 3,
  };
  // string market = 1 [json_name = "market"];
  void clear_market() ;
  const std::string& market() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market(Arg_&& arg, Args_... args);
  std::string* mutable_market();
  PROTOBUF_NODISCARD std::string* release_market();
  void set_allocated_market(std::string* value);

  private:
  const std::string& _internal_market() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market(
      const std::string& value);
  std::string* _internal_mutable_market();

  public:
  // string beg_day = 2 [json_name = "begDay"];
  void clear_beg_day() ;
  const std::string& beg_day() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_beg_day(Arg_&& arg, Args_... args);
  std::string* mutable_beg_day();
  PROTOBUF_NODISCARD std::string* release_beg_day();
  void set_allocated_beg_day(std::string* value);

  private:
  const std::string& _internal_beg_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_beg_day(
      const std::string& value);
  std::string* _internal_mutable_beg_day();

  public:
  // string end_day = 3 [json_name = "endDay"];
  void clear_end_day() ;
  const std::string& end_day() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_end_day(Arg_&& arg, Args_... args);
  std::string* mutable_end_day();
  PROTOBUF_NODISCARD std::string* release_end_day();
  void set_allocated_end_day(std::string* value);

  private:
  const std::string& _internal_end_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_day(
      const std::string& value);
  std::string* _internal_mutable_end_day();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.MarketTradeDayRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      71, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr market_;
    ::google::protobuf::internal::ArenaStringPtr beg_day_;
    ::google::protobuf::internal::ArenaStringPtr end_day_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class Line final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Line(::google::protobuf::internal::ConstantInitialized);

  inline Line(const Line& from)
      : Line(nullptr, from) {}
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Line* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Line& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Line& from) {
    Line::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Line* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.Line";
  }
  protected:
  explicit Line(::google::protobuf::Arena* arena);
  Line(::google::protobuf::Arena* arena, const Line& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kTurnoverFieldNumber = 4,
    kAvgPriceFieldNumber = 5,
    kTimestampFieldNumber = 2,
    kVolumeFieldNumber = 3,
  };
  // string price = 1 [json_name = "price"];
  void clear_price() ;
  const std::string& price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* value);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // string turnover = 4 [json_name = "turnover"];
  void clear_turnover() ;
  const std::string& turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_turnover();
  PROTOBUF_NODISCARD std::string* release_turnover();
  void set_allocated_turnover(std::string* value);

  private:
  const std::string& _internal_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover(
      const std::string& value);
  std::string* _internal_mutable_turnover();

  public:
  // string avg_price = 5 [json_name = "avgPrice"];
  void clear_avg_price() ;
  const std::string& avg_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avg_price(Arg_&& arg, Args_... args);
  std::string* mutable_avg_price();
  PROTOBUF_NODISCARD std::string* release_avg_price();
  void set_allocated_avg_price(std::string* value);

  private:
  const std::string& _internal_avg_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avg_price(
      const std::string& value);
  std::string* _internal_mutable_avg_price();

  public:
  // int64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int64 volume = 3 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.Line)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr price_;
    ::google::protobuf::internal::ArenaStringPtr turnover_;
    ::google::protobuf::internal::ArenaStringPtr avg_price_;
    ::int64_t timestamp_;
    ::int64_t volume_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class IssuerInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.IssuerInfo) */ {
 public:
  inline IssuerInfo() : IssuerInfo(nullptr) {}
  ~IssuerInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IssuerInfo(::google::protobuf::internal::ConstantInitialized);

  inline IssuerInfo(const IssuerInfo& from)
      : IssuerInfo(nullptr, from) {}
  IssuerInfo(IssuerInfo&& from) noexcept
    : IssuerInfo() {
    *this = ::std::move(from);
  }

  inline IssuerInfo& operator=(const IssuerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IssuerInfo& operator=(IssuerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IssuerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const IssuerInfo* internal_default_instance() {
    return reinterpret_cast<const IssuerInfo*>(
               &_IssuerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(IssuerInfo& a, IssuerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IssuerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IssuerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IssuerInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IssuerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IssuerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IssuerInfo& from) {
    IssuerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IssuerInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.IssuerInfo";
  }
  protected:
  explicit IssuerInfo(::google::protobuf::Arena* arena);
  IssuerInfo(::google::protobuf::Arena* arena, const IssuerInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameCnFieldNumber = 2,
    kNameEnFieldNumber = 3,
    kNameHkFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name_cn = 2 [json_name = "nameCn"];
  void clear_name_cn() ;
  const std::string& name_cn() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_cn(Arg_&& arg, Args_... args);
  std::string* mutable_name_cn();
  PROTOBUF_NODISCARD std::string* release_name_cn();
  void set_allocated_name_cn(std::string* value);

  private:
  const std::string& _internal_name_cn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_cn(
      const std::string& value);
  std::string* _internal_mutable_name_cn();

  public:
  // string name_en = 3 [json_name = "nameEn"];
  void clear_name_en() ;
  const std::string& name_en() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_en(Arg_&& arg, Args_... args);
  std::string* mutable_name_en();
  PROTOBUF_NODISCARD std::string* release_name_en();
  void set_allocated_name_en(std::string* value);

  private:
  const std::string& _internal_name_en() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_en(
      const std::string& value);
  std::string* _internal_mutable_name_en();

  public:
  // string name_hk = 4 [json_name = "nameHk"];
  void clear_name_hk() ;
  const std::string& name_hk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_hk(Arg_&& arg, Args_... args);
  std::string* mutable_name_hk();
  PROTOBUF_NODISCARD std::string* release_name_hk();
  void set_allocated_name_hk(std::string* value);

  private:
  const std::string& _internal_name_hk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_hk(
      const std::string& value);
  std::string* _internal_mutable_name_hk();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.IssuerInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_cn_;
    ::google::protobuf::internal::ArenaStringPtr name_en_;
    ::google::protobuf::internal::ArenaStringPtr name_hk_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class FilterWarrant final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.FilterWarrant) */ {
 public:
  inline FilterWarrant() : FilterWarrant(nullptr) {}
  ~FilterWarrant() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FilterWarrant(::google::protobuf::internal::ConstantInitialized);

  inline FilterWarrant(const FilterWarrant& from)
      : FilterWarrant(nullptr, from) {}
  FilterWarrant(FilterWarrant&& from) noexcept
    : FilterWarrant() {
    *this = ::std::move(from);
  }

  inline FilterWarrant& operator=(const FilterWarrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterWarrant& operator=(FilterWarrant&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterWarrant& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterWarrant* internal_default_instance() {
    return reinterpret_cast<const FilterWarrant*>(
               &_FilterWarrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(FilterWarrant& a, FilterWarrant& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterWarrant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterWarrant* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterWarrant* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterWarrant>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FilterWarrant& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FilterWarrant& from) {
    FilterWarrant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FilterWarrant* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.FilterWarrant";
  }
  protected:
  explicit FilterWarrant(::google::protobuf::Arena* arena);
  FilterWarrant(::google::protobuf::Arena* arena, const FilterWarrant& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kNameFieldNumber = 2,
    kLastDoneFieldNumber = 3,
    kChangeRateFieldNumber = 4,
    kChangeValFieldNumber = 5,
    kTurnoverFieldNumber = 7,
    kExpiryDateFieldNumber = 8,
    kStrikePriceFieldNumber = 9,
    kUpperStrikePriceFieldNumber = 10,
    kLowerStrikePriceFieldNumber = 11,
    kOutstandingQtyFieldNumber = 12,
    kOutstandingRatioFieldNumber = 13,
    kPremiumFieldNumber = 14,
    kItmOtmFieldNumber = 15,
    kImpliedVolatilityFieldNumber = 16,
    kDeltaFieldNumber = 17,
    kCallPriceFieldNumber = 18,
    kToCallPriceFieldNumber = 19,
    kEffectiveLeverageFieldNumber = 20,
    kLeverageRatioFieldNumber = 21,
    kConversionRatioFieldNumber = 22,
    kBalancePointFieldNumber = 23,
    kVolumeFieldNumber = 6,
    kStatusFieldNumber = 24,
    kTypeFieldNumber = 25,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string last_done = 3 [json_name = "lastDone"];
  void clear_last_done() ;
  const std::string& last_done() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_done(Arg_&& arg, Args_... args);
  std::string* mutable_last_done();
  PROTOBUF_NODISCARD std::string* release_last_done();
  void set_allocated_last_done(std::string* value);

  private:
  const std::string& _internal_last_done() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_done(
      const std::string& value);
  std::string* _internal_mutable_last_done();

  public:
  // string change_rate = 4 [json_name = "changeRate"];
  void clear_change_rate() ;
  const std::string& change_rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_change_rate(Arg_&& arg, Args_... args);
  std::string* mutable_change_rate();
  PROTOBUF_NODISCARD std::string* release_change_rate();
  void set_allocated_change_rate(std::string* value);

  private:
  const std::string& _internal_change_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_rate(
      const std::string& value);
  std::string* _internal_mutable_change_rate();

  public:
  // string change_val = 5 [json_name = "changeVal"];
  void clear_change_val() ;
  const std::string& change_val() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_change_val(Arg_&& arg, Args_... args);
  std::string* mutable_change_val();
  PROTOBUF_NODISCARD std::string* release_change_val();
  void set_allocated_change_val(std::string* value);

  private:
  const std::string& _internal_change_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_change_val(
      const std::string& value);
  std::string* _internal_mutable_change_val();

  public:
  // string turnover = 7 [json_name = "turnover"];
  void clear_turnover() ;
  const std::string& turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_turnover();
  PROTOBUF_NODISCARD std::string* release_turnover();
  void set_allocated_turnover(std::string* value);

  private:
  const std::string& _internal_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover(
      const std::string& value);
  std::string* _internal_mutable_turnover();

  public:
  // string expiry_date = 8 [json_name = "expiryDate"];
  void clear_expiry_date() ;
  const std::string& expiry_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expiry_date(Arg_&& arg, Args_... args);
  std::string* mutable_expiry_date();
  PROTOBUF_NODISCARD std::string* release_expiry_date();
  void set_allocated_expiry_date(std::string* value);

  private:
  const std::string& _internal_expiry_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expiry_date(
      const std::string& value);
  std::string* _internal_mutable_expiry_date();

  public:
  // string strike_price = 9 [json_name = "strikePrice"];
  void clear_strike_price() ;
  const std::string& strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_strike_price();
  PROTOBUF_NODISCARD std::string* release_strike_price();
  void set_allocated_strike_price(std::string* value);

  private:
  const std::string& _internal_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strike_price(
      const std::string& value);
  std::string* _internal_mutable_strike_price();

  public:
  // string upper_strike_price = 10 [json_name = "upperStrikePrice"];
  void clear_upper_strike_price() ;
  const std::string& upper_strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_upper_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_upper_strike_price();
  PROTOBUF_NODISCARD std::string* release_upper_strike_price();
  void set_allocated_upper_strike_price(std::string* value);

  private:
  const std::string& _internal_upper_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upper_strike_price(
      const std::string& value);
  std::string* _internal_mutable_upper_strike_price();

  public:
  // string lower_strike_price = 11 [json_name = "lowerStrikePrice"];
  void clear_lower_strike_price() ;
  const std::string& lower_strike_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lower_strike_price(Arg_&& arg, Args_... args);
  std::string* mutable_lower_strike_price();
  PROTOBUF_NODISCARD std::string* release_lower_strike_price();
  void set_allocated_lower_strike_price(std::string* value);

  private:
  const std::string& _internal_lower_strike_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lower_strike_price(
      const std::string& value);
  std::string* _internal_mutable_lower_strike_price();

  public:
  // string outstanding_qty = 12 [json_name = "outstandingQty"];
  void clear_outstanding_qty() ;
  const std::string& outstanding_qty() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outstanding_qty(Arg_&& arg, Args_... args);
  std::string* mutable_outstanding_qty();
  PROTOBUF_NODISCARD std::string* release_outstanding_qty();
  void set_allocated_outstanding_qty(std::string* value);

  private:
  const std::string& _internal_outstanding_qty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outstanding_qty(
      const std::string& value);
  std::string* _internal_mutable_outstanding_qty();

  public:
  // string outstanding_ratio = 13 [json_name = "outstandingRatio"];
  void clear_outstanding_ratio() ;
  const std::string& outstanding_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outstanding_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_outstanding_ratio();
  PROTOBUF_NODISCARD std::string* release_outstanding_ratio();
  void set_allocated_outstanding_ratio(std::string* value);

  private:
  const std::string& _internal_outstanding_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outstanding_ratio(
      const std::string& value);
  std::string* _internal_mutable_outstanding_ratio();

  public:
  // string premium = 14 [json_name = "premium"];
  void clear_premium() ;
  const std::string& premium() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_premium(Arg_&& arg, Args_... args);
  std::string* mutable_premium();
  PROTOBUF_NODISCARD std::string* release_premium();
  void set_allocated_premium(std::string* value);

  private:
  const std::string& _internal_premium() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_premium(
      const std::string& value);
  std::string* _internal_mutable_premium();

  public:
  // string itm_otm = 15 [json_name = "itmOtm"];
  void clear_itm_otm() ;
  const std::string& itm_otm() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_itm_otm(Arg_&& arg, Args_... args);
  std::string* mutable_itm_otm();
  PROTOBUF_NODISCARD std::string* release_itm_otm();
  void set_allocated_itm_otm(std::string* value);

  private:
  const std::string& _internal_itm_otm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_itm_otm(
      const std::string& value);
  std::string* _internal_mutable_itm_otm();

  public:
  // string implied_volatility = 16 [json_name = "impliedVolatility"];
  void clear_implied_volatility() ;
  const std::string& implied_volatility() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_implied_volatility(Arg_&& arg, Args_... args);
  std::string* mutable_implied_volatility();
  PROTOBUF_NODISCARD std::string* release_implied_volatility();
  void set_allocated_implied_volatility(std::string* value);

  private:
  const std::string& _internal_implied_volatility() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_implied_volatility(
      const std::string& value);
  std::string* _internal_mutable_implied_volatility();

  public:
  // string delta = 17 [json_name = "delta"];
  void clear_delta() ;
  const std::string& delta() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delta(Arg_&& arg, Args_... args);
  std::string* mutable_delta();
  PROTOBUF_NODISCARD std::string* release_delta();
  void set_allocated_delta(std::string* value);

  private:
  const std::string& _internal_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delta(
      const std::string& value);
  std::string* _internal_mutable_delta();

  public:
  // string call_price = 18 [json_name = "callPrice"];
  void clear_call_price() ;
  const std::string& call_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_call_price(Arg_&& arg, Args_... args);
  std::string* mutable_call_price();
  PROTOBUF_NODISCARD std::string* release_call_price();
  void set_allocated_call_price(std::string* value);

  private:
  const std::string& _internal_call_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_call_price(
      const std::string& value);
  std::string* _internal_mutable_call_price();

  public:
  // string to_call_price = 19 [json_name = "toCallPrice"];
  void clear_to_call_price() ;
  const std::string& to_call_price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to_call_price(Arg_&& arg, Args_... args);
  std::string* mutable_to_call_price();
  PROTOBUF_NODISCARD std::string* release_to_call_price();
  void set_allocated_to_call_price(std::string* value);

  private:
  const std::string& _internal_to_call_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_call_price(
      const std::string& value);
  std::string* _internal_mutable_to_call_price();

  public:
  // string effective_leverage = 20 [json_name = "effectiveLeverage"];
  void clear_effective_leverage() ;
  const std::string& effective_leverage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_effective_leverage(Arg_&& arg, Args_... args);
  std::string* mutable_effective_leverage();
  PROTOBUF_NODISCARD std::string* release_effective_leverage();
  void set_allocated_effective_leverage(std::string* value);

  private:
  const std::string& _internal_effective_leverage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effective_leverage(
      const std::string& value);
  std::string* _internal_mutable_effective_leverage();

  public:
  // string leverage_ratio = 21 [json_name = "leverageRatio"];
  void clear_leverage_ratio() ;
  const std::string& leverage_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leverage_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_leverage_ratio();
  PROTOBUF_NODISCARD std::string* release_leverage_ratio();
  void set_allocated_leverage_ratio(std::string* value);

  private:
  const std::string& _internal_leverage_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leverage_ratio(
      const std::string& value);
  std::string* _internal_mutable_leverage_ratio();

  public:
  // string conversion_ratio = 22 [json_name = "conversionRatio"];
  void clear_conversion_ratio() ;
  const std::string& conversion_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversion_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_conversion_ratio();
  PROTOBUF_NODISCARD std::string* release_conversion_ratio();
  void set_allocated_conversion_ratio(std::string* value);

  private:
  const std::string& _internal_conversion_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversion_ratio(
      const std::string& value);
  std::string* _internal_mutable_conversion_ratio();

  public:
  // string balance_point = 23 [json_name = "balancePoint"];
  void clear_balance_point() ;
  const std::string& balance_point() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_balance_point(Arg_&& arg, Args_... args);
  std::string* mutable_balance_point();
  PROTOBUF_NODISCARD std::string* release_balance_point();
  void set_allocated_balance_point(std::string* value);

  private:
  const std::string& _internal_balance_point() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_balance_point(
      const std::string& value);
  std::string* _internal_mutable_balance_point();

  public:
  // int64 volume = 6 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // int32 status = 24 [json_name = "status"];
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // int32 type = 25 [json_name = "type"];
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.FilterWarrant)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 25, 0,
      327, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr last_done_;
    ::google::protobuf::internal::ArenaStringPtr change_rate_;
    ::google::protobuf::internal::ArenaStringPtr change_val_;
    ::google::protobuf::internal::ArenaStringPtr turnover_;
    ::google::protobuf::internal::ArenaStringPtr expiry_date_;
    ::google::protobuf::internal::ArenaStringPtr strike_price_;
    ::google::protobuf::internal::ArenaStringPtr upper_strike_price_;
    ::google::protobuf::internal::ArenaStringPtr lower_strike_price_;
    ::google::protobuf::internal::ArenaStringPtr outstanding_qty_;
    ::google::protobuf::internal::ArenaStringPtr outstanding_ratio_;
    ::google::protobuf::internal::ArenaStringPtr premium_;
    ::google::protobuf::internal::ArenaStringPtr itm_otm_;
    ::google::protobuf::internal::ArenaStringPtr implied_volatility_;
    ::google::protobuf::internal::ArenaStringPtr delta_;
    ::google::protobuf::internal::ArenaStringPtr call_price_;
    ::google::protobuf::internal::ArenaStringPtr to_call_price_;
    ::google::protobuf::internal::ArenaStringPtr effective_leverage_;
    ::google::protobuf::internal::ArenaStringPtr leverage_ratio_;
    ::google::protobuf::internal::ArenaStringPtr conversion_ratio_;
    ::google::protobuf::internal::ArenaStringPtr balance_point_;
    ::int64_t volume_;
    ::int32_t status_;
    ::int32_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class FilterConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.FilterConfig) */ {
 public:
  inline FilterConfig() : FilterConfig(nullptr) {}
  ~FilterConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FilterConfig(::google::protobuf::internal::ConstantInitialized);

  inline FilterConfig(const FilterConfig& from)
      : FilterConfig(nullptr, from) {}
  FilterConfig(FilterConfig&& from) noexcept
    : FilterConfig() {
    *this = ::std::move(from);
  }

  inline FilterConfig& operator=(const FilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterConfig& operator=(FilterConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterConfig* internal_default_instance() {
    return reinterpret_cast<const FilterConfig*>(
               &_FilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(FilterConfig& a, FilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FilterConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FilterConfig& from) {
    FilterConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FilterConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.FilterConfig";
  }
  protected:
  explicit FilterConfig(::google::protobuf::Arena* arena);
  FilterConfig(::google::protobuf::Arena* arena, const FilterConfig& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 5,
    kIssuerFieldNumber = 6,
    kExpiryDateFieldNumber = 7,
    kPriceTypeFieldNumber = 8,
    kStatusFieldNumber = 9,
    kSortByFieldNumber = 1,
    kSortOrderFieldNumber = 2,
    kSortOffsetFieldNumber = 3,
    kSortCountFieldNumber = 4,
  };
  // repeated int32 type = 5 [json_name = "type"];
  int type_size() const;
  private:
  int _internal_type_size() const;

  public:
  void clear_type() ;
  ::int32_t type(int index) const;
  void set_type(int index, ::int32_t value);
  void add_type(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& type() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_type();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_type() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_type();

  public:
  // repeated int32 issuer = 6 [json_name = "issuer"];
  int issuer_size() const;
  private:
  int _internal_issuer_size() const;

  public:
  void clear_issuer() ;
  ::int32_t issuer(int index) const;
  void set_issuer(int index, ::int32_t value);
  void add_issuer(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& issuer() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_issuer();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_issuer() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_issuer();

  public:
  // repeated int32 expiry_date = 7 [json_name = "expiryDate"];
  int expiry_date_size() const;
  private:
  int _internal_expiry_date_size() const;

  public:
  void clear_expiry_date() ;
  ::int32_t expiry_date(int index) const;
  void set_expiry_date(int index, ::int32_t value);
  void add_expiry_date(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& expiry_date() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_expiry_date();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_expiry_date() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_expiry_date();

  public:
  // repeated int32 price_type = 8 [json_name = "priceType"];
  int price_type_size() const;
  private:
  int _internal_price_type_size() const;

  public:
  void clear_price_type() ;
  ::int32_t price_type(int index) const;
  void set_price_type(int index, ::int32_t value);
  void add_price_type(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& price_type() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_price_type();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_price_type() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_price_type();

  public:
  // repeated int32 status = 9 [json_name = "status"];
  int status_size() const;
  private:
  int _internal_status_size() const;

  public:
  void clear_status() ;
  ::int32_t status(int index) const;
  void set_status(int index, ::int32_t value);
  void add_status(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& status() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_status();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_status() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_status();

  public:
  // int32 sort_by = 1 [json_name = "sortBy"];
  void clear_sort_by() ;
  ::int32_t sort_by() const;
  void set_sort_by(::int32_t value);

  private:
  ::int32_t _internal_sort_by() const;
  void _internal_set_sort_by(::int32_t value);

  public:
  // int32 sort_order = 2 [json_name = "sortOrder"];
  void clear_sort_order() ;
  ::int32_t sort_order() const;
  void set_sort_order(::int32_t value);

  private:
  ::int32_t _internal_sort_order() const;
  void _internal_set_sort_order(::int32_t value);

  public:
  // int32 sort_offset = 3 [json_name = "sortOffset"];
  void clear_sort_offset() ;
  ::int32_t sort_offset() const;
  void set_sort_offset(::int32_t value);

  private:
  ::int32_t _internal_sort_offset() const;
  void _internal_set_sort_offset(::int32_t value);

  public:
  // int32 sort_count = 4 [json_name = "sortCount"];
  void clear_sort_count() ;
  ::int32_t sort_count() const;
  void set_sort_count(::int32_t value);

  private:
  ::int32_t _internal_sort_count() const;
  void _internal_set_sort_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.FilterConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> type_;
    mutable ::google::protobuf::internal::CachedSize _type_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> issuer_;
    mutable ::google::protobuf::internal::CachedSize _issuer_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> expiry_date_;
    mutable ::google::protobuf::internal::CachedSize _expiry_date_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> price_type_;
    mutable ::google::protobuf::internal::CachedSize _price_type_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> status_;
    mutable ::google::protobuf::internal::CachedSize _status_cached_byte_size_;
    ::int32_t sort_by_;
    ::int32_t sort_order_;
    ::int32_t sort_offset_;
    ::int32_t sort_count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class Depth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.Depth) */ {
 public:
  inline Depth() : Depth(nullptr) {}
  ~Depth() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Depth(::google::protobuf::internal::ConstantInitialized);

  inline Depth(const Depth& from)
      : Depth(nullptr, from) {}
  Depth(Depth&& from) noexcept
    : Depth() {
    *this = ::std::move(from);
  }

  inline Depth& operator=(const Depth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Depth& operator=(Depth&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Depth& default_instance() {
    return *internal_default_instance();
  }
  static inline const Depth* internal_default_instance() {
    return reinterpret_cast<const Depth*>(
               &_Depth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Depth& a, Depth& b) {
    a.Swap(&b);
  }
  inline void Swap(Depth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Depth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Depth* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Depth>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Depth& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Depth& from) {
    Depth::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Depth* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.Depth";
  }
  protected:
  explicit Depth(::google::protobuf::Arena* arena);
  Depth(::google::protobuf::Arena* arena, const Depth& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 2,
    kVolumeFieldNumber = 3,
    kOrderNumFieldNumber = 4,
    kPositionFieldNumber = 1,
  };
  // string price = 2 [json_name = "price"];
  void clear_price() ;
  const std::string& price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* value);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // int64 volume = 3 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // int64 order_num = 4 [json_name = "orderNum"];
  void clear_order_num() ;
  ::int64_t order_num() const;
  void set_order_num(::int64_t value);

  private:
  ::int64_t _internal_order_num() const;
  void _internal_set_order_num(::int64_t value);

  public:
  // int32 position = 1 [json_name = "position"];
  void clear_position() ;
  ::int32_t position() const;
  void set_position(::int32_t value);

  private:
  ::int32_t _internal_position() const;
  void _internal_set_position(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.Depth)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr price_;
    ::int64_t volume_;
    ::int64_t order_num_;
    ::int32_t position_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class CapitalFlowIntradayResponse_CapitalFlowLine final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine) */ {
 public:
  inline CapitalFlowIntradayResponse_CapitalFlowLine() : CapitalFlowIntradayResponse_CapitalFlowLine(nullptr) {}
  ~CapitalFlowIntradayResponse_CapitalFlowLine() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CapitalFlowIntradayResponse_CapitalFlowLine(::google::protobuf::internal::ConstantInitialized);

  inline CapitalFlowIntradayResponse_CapitalFlowLine(const CapitalFlowIntradayResponse_CapitalFlowLine& from)
      : CapitalFlowIntradayResponse_CapitalFlowLine(nullptr, from) {}
  CapitalFlowIntradayResponse_CapitalFlowLine(CapitalFlowIntradayResponse_CapitalFlowLine&& from) noexcept
    : CapitalFlowIntradayResponse_CapitalFlowLine() {
    *this = ::std::move(from);
  }

  inline CapitalFlowIntradayResponse_CapitalFlowLine& operator=(const CapitalFlowIntradayResponse_CapitalFlowLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapitalFlowIntradayResponse_CapitalFlowLine& operator=(CapitalFlowIntradayResponse_CapitalFlowLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapitalFlowIntradayResponse_CapitalFlowLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapitalFlowIntradayResponse_CapitalFlowLine* internal_default_instance() {
    return reinterpret_cast<const CapitalFlowIntradayResponse_CapitalFlowLine*>(
               &_CapitalFlowIntradayResponse_CapitalFlowLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CapitalFlowIntradayResponse_CapitalFlowLine& a, CapitalFlowIntradayResponse_CapitalFlowLine& b) {
    a.Swap(&b);
  }
  inline void Swap(CapitalFlowIntradayResponse_CapitalFlowLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapitalFlowIntradayResponse_CapitalFlowLine* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapitalFlowIntradayResponse_CapitalFlowLine* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapitalFlowIntradayResponse_CapitalFlowLine>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CapitalFlowIntradayResponse_CapitalFlowLine& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CapitalFlowIntradayResponse_CapitalFlowLine& from) {
    CapitalFlowIntradayResponse_CapitalFlowLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CapitalFlowIntradayResponse_CapitalFlowLine* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine";
  }
  protected:
  explicit CapitalFlowIntradayResponse_CapitalFlowLine(::google::protobuf::Arena* arena);
  CapitalFlowIntradayResponse_CapitalFlowLine(::google::protobuf::Arena* arena, const CapitalFlowIntradayResponse_CapitalFlowLine& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInflowFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // string inflow = 1 [json_name = "inflow"];
  void clear_inflow() ;
  const std::string& inflow() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflow(Arg_&& arg, Args_... args);
  std::string* mutable_inflow();
  PROTOBUF_NODISCARD std::string* release_inflow();
  void set_allocated_inflow(std::string* value);

  private:
  const std::string& _internal_inflow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflow(
      const std::string& value);
  std::string* _internal_mutable_inflow();

  public:
  // int64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      79, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr inflow_;
    ::int64_t timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class CapitalFlowIntradayRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.CapitalFlowIntradayRequest) */ {
 public:
  inline CapitalFlowIntradayRequest() : CapitalFlowIntradayRequest(nullptr) {}
  ~CapitalFlowIntradayRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CapitalFlowIntradayRequest(::google::protobuf::internal::ConstantInitialized);

  inline CapitalFlowIntradayRequest(const CapitalFlowIntradayRequest& from)
      : CapitalFlowIntradayRequest(nullptr, from) {}
  CapitalFlowIntradayRequest(CapitalFlowIntradayRequest&& from) noexcept
    : CapitalFlowIntradayRequest() {
    *this = ::std::move(from);
  }

  inline CapitalFlowIntradayRequest& operator=(const CapitalFlowIntradayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapitalFlowIntradayRequest& operator=(CapitalFlowIntradayRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapitalFlowIntradayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapitalFlowIntradayRequest* internal_default_instance() {
    return reinterpret_cast<const CapitalFlowIntradayRequest*>(
               &_CapitalFlowIntradayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CapitalFlowIntradayRequest& a, CapitalFlowIntradayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CapitalFlowIntradayRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapitalFlowIntradayRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapitalFlowIntradayRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapitalFlowIntradayRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CapitalFlowIntradayRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CapitalFlowIntradayRequest& from) {
    CapitalFlowIntradayRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CapitalFlowIntradayRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.CapitalFlowIntradayRequest";
  }
  protected:
  explicit CapitalFlowIntradayRequest(::google::protobuf::Arena* arena);
  CapitalFlowIntradayRequest(::google::protobuf::Arena* arena, const CapitalFlowIntradayRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.CapitalFlowIntradayRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class CapitalDistributionResponse_CapitalDistribution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution) */ {
 public:
  inline CapitalDistributionResponse_CapitalDistribution() : CapitalDistributionResponse_CapitalDistribution(nullptr) {}
  ~CapitalDistributionResponse_CapitalDistribution() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CapitalDistributionResponse_CapitalDistribution(::google::protobuf::internal::ConstantInitialized);

  inline CapitalDistributionResponse_CapitalDistribution(const CapitalDistributionResponse_CapitalDistribution& from)
      : CapitalDistributionResponse_CapitalDistribution(nullptr, from) {}
  CapitalDistributionResponse_CapitalDistribution(CapitalDistributionResponse_CapitalDistribution&& from) noexcept
    : CapitalDistributionResponse_CapitalDistribution() {
    *this = ::std::move(from);
  }

  inline CapitalDistributionResponse_CapitalDistribution& operator=(const CapitalDistributionResponse_CapitalDistribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapitalDistributionResponse_CapitalDistribution& operator=(CapitalDistributionResponse_CapitalDistribution&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapitalDistributionResponse_CapitalDistribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapitalDistributionResponse_CapitalDistribution* internal_default_instance() {
    return reinterpret_cast<const CapitalDistributionResponse_CapitalDistribution*>(
               &_CapitalDistributionResponse_CapitalDistribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CapitalDistributionResponse_CapitalDistribution& a, CapitalDistributionResponse_CapitalDistribution& b) {
    a.Swap(&b);
  }
  inline void Swap(CapitalDistributionResponse_CapitalDistribution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapitalDistributionResponse_CapitalDistribution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapitalDistributionResponse_CapitalDistribution* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapitalDistributionResponse_CapitalDistribution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CapitalDistributionResponse_CapitalDistribution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CapitalDistributionResponse_CapitalDistribution& from) {
    CapitalDistributionResponse_CapitalDistribution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CapitalDistributionResponse_CapitalDistribution* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution";
  }
  protected:
  explicit CapitalDistributionResponse_CapitalDistribution(::google::protobuf::Arena* arena);
  CapitalDistributionResponse_CapitalDistribution(::google::protobuf::Arena* arena, const CapitalDistributionResponse_CapitalDistribution& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeFieldNumber = 1,
    kMediumFieldNumber = 2,
    kSmallFieldNumber = 3,
  };
  // string large = 1 [json_name = "large"];
  void clear_large() ;
  const std::string& large() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_large(Arg_&& arg, Args_... args);
  std::string* mutable_large();
  PROTOBUF_NODISCARD std::string* release_large();
  void set_allocated_large(std::string* value);

  private:
  const std::string& _internal_large() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_large(
      const std::string& value);
  std::string* _internal_mutable_large();

  public:
  // string medium = 2 [json_name = "medium"];
  void clear_medium() ;
  const std::string& medium() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_medium(Arg_&& arg, Args_... args);
  std::string* mutable_medium();
  PROTOBUF_NODISCARD std::string* release_medium();
  void set_allocated_medium(std::string* value);

  private:
  const std::string& _internal_medium() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_medium(
      const std::string& value);
  std::string* _internal_mutable_medium();

  public:
  // string small = 3 [json_name = "small"];
  void clear_small() ;
  const std::string& small() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_small(Arg_&& arg, Args_... args);
  std::string* mutable_small();
  PROTOBUF_NODISCARD std::string* release_small();
  void set_allocated_small(std::string* value);

  private:
  const std::string& _internal_small() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_small(
      const std::string& value);
  std::string* _internal_mutable_small();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      93, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr large_;
    ::google::protobuf::internal::ArenaStringPtr medium_;
    ::google::protobuf::internal::ArenaStringPtr small_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class Candlestick final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.Candlestick) */ {
 public:
  inline Candlestick() : Candlestick(nullptr) {}
  ~Candlestick() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Candlestick(::google::protobuf::internal::ConstantInitialized);

  inline Candlestick(const Candlestick& from)
      : Candlestick(nullptr, from) {}
  Candlestick(Candlestick&& from) noexcept
    : Candlestick() {
    *this = ::std::move(from);
  }

  inline Candlestick& operator=(const Candlestick& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candlestick& operator=(Candlestick&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Candlestick& default_instance() {
    return *internal_default_instance();
  }
  static inline const Candlestick* internal_default_instance() {
    return reinterpret_cast<const Candlestick*>(
               &_Candlestick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Candlestick& a, Candlestick& b) {
    a.Swap(&b);
  }
  inline void Swap(Candlestick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Candlestick* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Candlestick* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Candlestick>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Candlestick& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Candlestick& from) {
    Candlestick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Candlestick* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.Candlestick";
  }
  protected:
  explicit Candlestick(::google::protobuf::Arena* arena);
  Candlestick(::google::protobuf::Arena* arena, const Candlestick& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloseFieldNumber = 1,
    kOpenFieldNumber = 2,
    kLowFieldNumber = 3,
    kHighFieldNumber = 4,
    kTurnoverFieldNumber = 6,
    kVolumeFieldNumber = 5,
    kTimestampFieldNumber = 7,
  };
  // string close = 1 [json_name = "close"];
  void clear_close() ;
  const std::string& close() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_close(Arg_&& arg, Args_... args);
  std::string* mutable_close();
  PROTOBUF_NODISCARD std::string* release_close();
  void set_allocated_close(std::string* value);

  private:
  const std::string& _internal_close() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_close(
      const std::string& value);
  std::string* _internal_mutable_close();

  public:
  // string open = 2 [json_name = "open"];
  void clear_open() ;
  const std::string& open() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open(Arg_&& arg, Args_... args);
  std::string* mutable_open();
  PROTOBUF_NODISCARD std::string* release_open();
  void set_allocated_open(std::string* value);

  private:
  const std::string& _internal_open() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open(
      const std::string& value);
  std::string* _internal_mutable_open();

  public:
  // string low = 3 [json_name = "low"];
  void clear_low() ;
  const std::string& low() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_low(Arg_&& arg, Args_... args);
  std::string* mutable_low();
  PROTOBUF_NODISCARD std::string* release_low();
  void set_allocated_low(std::string* value);

  private:
  const std::string& _internal_low() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_low(
      const std::string& value);
  std::string* _internal_mutable_low();

  public:
  // string high = 4 [json_name = "high"];
  void clear_high() ;
  const std::string& high() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_high(Arg_&& arg, Args_... args);
  std::string* mutable_high();
  PROTOBUF_NODISCARD std::string* release_high();
  void set_allocated_high(std::string* value);

  private:
  const std::string& _internal_high() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_high(
      const std::string& value);
  std::string* _internal_mutable_high();

  public:
  // string turnover = 6 [json_name = "turnover"];
  void clear_turnover() ;
  const std::string& turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_turnover();
  PROTOBUF_NODISCARD std::string* release_turnover();
  void set_allocated_turnover(std::string* value);

  private:
  const std::string& _internal_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover(
      const std::string& value);
  std::string* _internal_mutable_turnover();

  public:
  // int64 volume = 5 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // int64 timestamp = 7 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.Candlestick)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr close_;
    ::google::protobuf::internal::ArenaStringPtr open_;
    ::google::protobuf::internal::ArenaStringPtr low_;
    ::google::protobuf::internal::ArenaStringPtr high_;
    ::google::protobuf::internal::ArenaStringPtr turnover_;
    ::int64_t volume_;
    ::int64_t timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class Brokers final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.Brokers) */ {
 public:
  inline Brokers() : Brokers(nullptr) {}
  ~Brokers() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Brokers(::google::protobuf::internal::ConstantInitialized);

  inline Brokers(const Brokers& from)
      : Brokers(nullptr, from) {}
  Brokers(Brokers&& from) noexcept
    : Brokers() {
    *this = ::std::move(from);
  }

  inline Brokers& operator=(const Brokers& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brokers& operator=(Brokers&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Brokers& default_instance() {
    return *internal_default_instance();
  }
  static inline const Brokers* internal_default_instance() {
    return reinterpret_cast<const Brokers*>(
               &_Brokers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Brokers& a, Brokers& b) {
    a.Swap(&b);
  }
  inline void Swap(Brokers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brokers* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Brokers* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Brokers>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Brokers& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Brokers& from) {
    Brokers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Brokers* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.Brokers";
  }
  protected:
  explicit Brokers(::google::protobuf::Arena* arena);
  Brokers(::google::protobuf::Arena* arena, const Brokers& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerIdsFieldNumber = 2,
    kPositionFieldNumber = 1,
  };
  // repeated int32 broker_ids = 2 [json_name = "brokerIds"];
  int broker_ids_size() const;
  private:
  int _internal_broker_ids_size() const;

  public:
  void clear_broker_ids() ;
  ::int32_t broker_ids(int index) const;
  void set_broker_ids(int index, ::int32_t value);
  void add_broker_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& broker_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_broker_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_broker_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_broker_ids();

  public:
  // int32 position = 1 [json_name = "position"];
  void clear_position() ;
  ::int32_t position() const;
  void set_position(::int32_t value);

  private:
  ::int32_t _internal_position() const;
  void _internal_set_position(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.Brokers)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> broker_ids_;
    mutable ::google::protobuf::internal::CachedSize _broker_ids_cached_byte_size_;
    ::int32_t position_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class WarrantQuote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.WarrantQuote) */ {
 public:
  inline WarrantQuote() : WarrantQuote(nullptr) {}
  ~WarrantQuote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WarrantQuote(::google::protobuf::internal::ConstantInitialized);

  inline WarrantQuote(const WarrantQuote& from)
      : WarrantQuote(nullptr, from) {}
  WarrantQuote(WarrantQuote&& from) noexcept
    : WarrantQuote() {
    *this = ::std::move(from);
  }

  inline WarrantQuote& operator=(const WarrantQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarrantQuote& operator=(WarrantQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WarrantQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const WarrantQuote* internal_default_instance() {
    return reinterpret_cast<const WarrantQuote*>(
               &_WarrantQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WarrantQuote& a, WarrantQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(WarrantQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarrantQuote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WarrantQuote* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WarrantQuote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WarrantQuote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WarrantQuote& from) {
    WarrantQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WarrantQuote* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.WarrantQuote";
  }
  protected:
  explicit WarrantQuote(::google::protobuf::Arena* arena);
  WarrantQuote(::google::protobuf::Arena* arena, const WarrantQuote& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kLastDoneFieldNumber = 2,
    kPrevCloseFieldNumber = 3,
    kOpenFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kTurnoverFieldNumber = 9,
    kWarrantExtendFieldNumber = 11,
    kTimestampFieldNumber = 7,
    kVolumeFieldNumber = 8,
    kTradeStatusFieldNumber = 10,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string last_done = 2 [json_name = "lastDone"];
  void clear_last_done() ;
  const std::string& last_done() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_done(Arg_&& arg, Args_... args);
  std::string* mutable_last_done();
  PROTOBUF_NODISCARD std::string* release_last_done();
  void set_allocated_last_done(std::string* value);

  private:
  const std::string& _internal_last_done() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_done(
      const std::string& value);
  std::string* _internal_mutable_last_done();

  public:
  // string prev_close = 3 [json_name = "prevClose"];
  void clear_prev_close() ;
  const std::string& prev_close() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prev_close(Arg_&& arg, Args_... args);
  std::string* mutable_prev_close();
  PROTOBUF_NODISCARD std::string* release_prev_close();
  void set_allocated_prev_close(std::string* value);

  private:
  const std::string& _internal_prev_close() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_close(
      const std::string& value);
  std::string* _internal_mutable_prev_close();

  public:
  // string open = 4 [json_name = "open"];
  void clear_open() ;
  const std::string& open() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open(Arg_&& arg, Args_... args);
  std::string* mutable_open();
  PROTOBUF_NODISCARD std::string* release_open();
  void set_allocated_open(std::string* value);

  private:
  const std::string& _internal_open() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open(
      const std::string& value);
  std::string* _internal_mutable_open();

  public:
  // string high = 5 [json_name = "high"];
  void clear_high() ;
  const std::string& high() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_high(Arg_&& arg, Args_... args);
  std::string* mutable_high();
  PROTOBUF_NODISCARD std::string* release_high();
  void set_allocated_high(std::string* value);

  private:
  const std::string& _internal_high() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_high(
      const std::string& value);
  std::string* _internal_mutable_high();

  public:
  // string low = 6 [json_name = "low"];
  void clear_low() ;
  const std::string& low() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_low(Arg_&& arg, Args_... args);
  std::string* mutable_low();
  PROTOBUF_NODISCARD std::string* release_low();
  void set_allocated_low(std::string* value);

  private:
  const std::string& _internal_low() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_low(
      const std::string& value);
  std::string* _internal_mutable_low();

  public:
  // string turnover = 9 [json_name = "turnover"];
  void clear_turnover() ;
  const std::string& turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_turnover();
  PROTOBUF_NODISCARD std::string* release_turnover();
  void set_allocated_turnover(std::string* value);

  private:
  const std::string& _internal_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover(
      const std::string& value);
  std::string* _internal_mutable_turnover();

  public:
  // .longportapp.quote.v1.WarrantExtend warrant_extend = 11 [json_name = "warrantExtend"];
  bool has_warrant_extend() const;
  void clear_warrant_extend() ;
  const ::longportapp::quote::v1::WarrantExtend& warrant_extend() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::WarrantExtend* release_warrant_extend();
  ::longportapp::quote::v1::WarrantExtend* mutable_warrant_extend();
  void set_allocated_warrant_extend(::longportapp::quote::v1::WarrantExtend* value);
  void unsafe_arena_set_allocated_warrant_extend(::longportapp::quote::v1::WarrantExtend* value);
  ::longportapp::quote::v1::WarrantExtend* unsafe_arena_release_warrant_extend();

  private:
  const ::longportapp::quote::v1::WarrantExtend& _internal_warrant_extend() const;
  ::longportapp::quote::v1::WarrantExtend* _internal_mutable_warrant_extend();

  public:
  // int64 timestamp = 7 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int64 volume = 8 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // .longportapp.quote.v1.TradeStatus trade_status = 10 [json_name = "tradeStatus"];
  void clear_trade_status() ;
  ::longportapp::quote::v1::TradeStatus trade_status() const;
  void set_trade_status(::longportapp::quote::v1::TradeStatus value);

  private:
  ::longportapp::quote::v1::TradeStatus _internal_trade_status() const;
  void _internal_set_trade_status(::longportapp::quote::v1::TradeStatus value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.WarrantQuote)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      94, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr last_done_;
    ::google::protobuf::internal::ArenaStringPtr prev_close_;
    ::google::protobuf::internal::ArenaStringPtr open_;
    ::google::protobuf::internal::ArenaStringPtr high_;
    ::google::protobuf::internal::ArenaStringPtr low_;
    ::google::protobuf::internal::ArenaStringPtr turnover_;
    ::longportapp::quote::v1::WarrantExtend* warrant_extend_;
    ::int64_t timestamp_;
    ::int64_t volume_;
    int trade_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class WarrantFilterListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.WarrantFilterListResponse) */ {
 public:
  inline WarrantFilterListResponse() : WarrantFilterListResponse(nullptr) {}
  ~WarrantFilterListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WarrantFilterListResponse(::google::protobuf::internal::ConstantInitialized);

  inline WarrantFilterListResponse(const WarrantFilterListResponse& from)
      : WarrantFilterListResponse(nullptr, from) {}
  WarrantFilterListResponse(WarrantFilterListResponse&& from) noexcept
    : WarrantFilterListResponse() {
    *this = ::std::move(from);
  }

  inline WarrantFilterListResponse& operator=(const WarrantFilterListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarrantFilterListResponse& operator=(WarrantFilterListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WarrantFilterListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WarrantFilterListResponse* internal_default_instance() {
    return reinterpret_cast<const WarrantFilterListResponse*>(
               &_WarrantFilterListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(WarrantFilterListResponse& a, WarrantFilterListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WarrantFilterListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarrantFilterListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WarrantFilterListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WarrantFilterListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WarrantFilterListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WarrantFilterListResponse& from) {
    WarrantFilterListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WarrantFilterListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.WarrantFilterListResponse";
  }
  protected:
  explicit WarrantFilterListResponse(::google::protobuf::Arena* arena);
  WarrantFilterListResponse(::google::protobuf::Arena* arena, const WarrantFilterListResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarrantListFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .longportapp.quote.v1.FilterWarrant warrant_list = 1 [json_name = "warrantList"];
  int warrant_list_size() const;
  private:
  int _internal_warrant_list_size() const;

  public:
  void clear_warrant_list() ;
  ::longportapp::quote::v1::FilterWarrant* mutable_warrant_list(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::FilterWarrant >*
      mutable_warrant_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::FilterWarrant>& _internal_warrant_list() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::FilterWarrant>* _internal_mutable_warrant_list();
  public:
  const ::longportapp::quote::v1::FilterWarrant& warrant_list(int index) const;
  ::longportapp::quote::v1::FilterWarrant* add_warrant_list();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::FilterWarrant >&
      warrant_list() const;
  // int32 total_count = 2 [json_name = "totalCount"];
  void clear_total_count() ;
  ::int32_t total_count() const;
  void set_total_count(::int32_t value);

  private:
  ::int32_t _internal_total_count() const;
  void _internal_set_total_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.WarrantFilterListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::FilterWarrant > warrant_list_;
    ::int32_t total_count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class WarrantFilterListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.WarrantFilterListRequest) */ {
 public:
  inline WarrantFilterListRequest() : WarrantFilterListRequest(nullptr) {}
  ~WarrantFilterListRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WarrantFilterListRequest(::google::protobuf::internal::ConstantInitialized);

  inline WarrantFilterListRequest(const WarrantFilterListRequest& from)
      : WarrantFilterListRequest(nullptr, from) {}
  WarrantFilterListRequest(WarrantFilterListRequest&& from) noexcept
    : WarrantFilterListRequest() {
    *this = ::std::move(from);
  }

  inline WarrantFilterListRequest& operator=(const WarrantFilterListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarrantFilterListRequest& operator=(WarrantFilterListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WarrantFilterListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WarrantFilterListRequest* internal_default_instance() {
    return reinterpret_cast<const WarrantFilterListRequest*>(
               &_WarrantFilterListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(WarrantFilterListRequest& a, WarrantFilterListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WarrantFilterListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarrantFilterListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WarrantFilterListRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WarrantFilterListRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WarrantFilterListRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WarrantFilterListRequest& from) {
    WarrantFilterListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WarrantFilterListRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.WarrantFilterListRequest";
  }
  protected:
  explicit WarrantFilterListRequest(::google::protobuf::Arena* arena);
  WarrantFilterListRequest(::google::protobuf::Arena* arena, const WarrantFilterListRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kFilterConfigFieldNumber = 2,
    kLanguageFieldNumber = 3,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // .longportapp.quote.v1.FilterConfig filter_config = 2 [json_name = "filterConfig"];
  bool has_filter_config() const;
  void clear_filter_config() ;
  const ::longportapp::quote::v1::FilterConfig& filter_config() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::FilterConfig* release_filter_config();
  ::longportapp::quote::v1::FilterConfig* mutable_filter_config();
  void set_allocated_filter_config(::longportapp::quote::v1::FilterConfig* value);
  void unsafe_arena_set_allocated_filter_config(::longportapp::quote::v1::FilterConfig* value);
  ::longportapp::quote::v1::FilterConfig* unsafe_arena_release_filter_config();

  private:
  const ::longportapp::quote::v1::FilterConfig& _internal_filter_config() const;
  ::longportapp::quote::v1::FilterConfig* _internal_mutable_filter_config();

  public:
  // int32 language = 3 [json_name = "language"];
  void clear_language() ;
  ::int32_t language() const;
  void set_language(::int32_t value);

  private:
  ::int32_t _internal_language() const;
  void _internal_set_language(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.WarrantFilterListRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::longportapp::quote::v1::FilterConfig* filter_config_;
    ::int32_t language_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class UserQuoteLevelDetail_MarketPackageDetail final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail) */ {
 public:
  inline UserQuoteLevelDetail_MarketPackageDetail() : UserQuoteLevelDetail_MarketPackageDetail(nullptr) {}
  ~UserQuoteLevelDetail_MarketPackageDetail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserQuoteLevelDetail_MarketPackageDetail(::google::protobuf::internal::ConstantInitialized);

  inline UserQuoteLevelDetail_MarketPackageDetail(const UserQuoteLevelDetail_MarketPackageDetail& from)
      : UserQuoteLevelDetail_MarketPackageDetail(nullptr, from) {}
  UserQuoteLevelDetail_MarketPackageDetail(UserQuoteLevelDetail_MarketPackageDetail&& from) noexcept
    : UserQuoteLevelDetail_MarketPackageDetail() {
    *this = ::std::move(from);
  }

  inline UserQuoteLevelDetail_MarketPackageDetail& operator=(const UserQuoteLevelDetail_MarketPackageDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQuoteLevelDetail_MarketPackageDetail& operator=(UserQuoteLevelDetail_MarketPackageDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserQuoteLevelDetail_MarketPackageDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserQuoteLevelDetail_MarketPackageDetail* internal_default_instance() {
    return reinterpret_cast<const UserQuoteLevelDetail_MarketPackageDetail*>(
               &_UserQuoteLevelDetail_MarketPackageDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(UserQuoteLevelDetail_MarketPackageDetail& a, UserQuoteLevelDetail_MarketPackageDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQuoteLevelDetail_MarketPackageDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQuoteLevelDetail_MarketPackageDetail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserQuoteLevelDetail_MarketPackageDetail* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserQuoteLevelDetail_MarketPackageDetail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserQuoteLevelDetail_MarketPackageDetail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserQuoteLevelDetail_MarketPackageDetail& from) {
    UserQuoteLevelDetail_MarketPackageDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserQuoteLevelDetail_MarketPackageDetail* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail";
  }
  protected:
  explicit UserQuoteLevelDetail_MarketPackageDetail(::google::protobuf::Arena* arena);
  UserQuoteLevelDetail_MarketPackageDetail(::google::protobuf::Arena* arena, const UserQuoteLevelDetail_MarketPackageDetail& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
    kWarningMsgFieldNumber = 4,
  };
  // repeated .longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail packages = 1 [json_name = "packages"];
  int packages_size() const;
  private:
  int _internal_packages_size() const;

  public:
  void clear_packages() ;
  ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail* mutable_packages(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail >*
      mutable_packages();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>& _internal_packages() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>* _internal_mutable_packages();
  public:
  const ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail& packages(int index) const;
  ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail* add_packages();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail >&
      packages() const;
  // string warning_msg = 4 [json_name = "warningMsg"];
  void clear_warning_msg() ;
  const std::string& warning_msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_warning_msg(Arg_&& arg, Args_... args);
  std::string* mutable_warning_msg();
  PROTOBUF_NODISCARD std::string* release_warning_msg();
  void set_allocated_warning_msg(std::string* value);

  private:
  const std::string& _internal_warning_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_warning_msg(
      const std::string& value);
  std::string* _internal_mutable_warning_msg();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      81, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail > packages_;
    ::google::protobuf::internal::ArenaStringPtr warning_msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse, std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse, std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse*>(
        &_UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "longportapp.quote.v1.UserQuoteLevelDetail.ByPackageKeyEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_quote_2fapi_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SubscriptionResponse) */ {
 public:
  inline SubscriptionResponse() : SubscriptionResponse(nullptr) {}
  ~SubscriptionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionResponse(::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionResponse(const SubscriptionResponse& from)
      : SubscriptionResponse(nullptr, from) {}
  SubscriptionResponse(SubscriptionResponse&& from) noexcept
    : SubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline SubscriptionResponse& operator=(const SubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionResponse& operator=(SubscriptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const SubscriptionResponse*>(
               &_SubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SubscriptionResponse& a, SubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscriptionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscriptionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SubscriptionResponse& from) {
    SubscriptionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubscriptionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SubscriptionResponse";
  }
  protected:
  explicit SubscriptionResponse(::google::protobuf::Arena* arena);
  SubscriptionResponse(::google::protobuf::Arena* arena, const SubscriptionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubListFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.SubTypeList sub_list = 1 [json_name = "subList"];
  int sub_list_size() const;
  private:
  int _internal_sub_list_size() const;

  public:
  void clear_sub_list() ;
  ::longportapp::quote::v1::SubTypeList* mutable_sub_list(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::SubTypeList >*
      mutable_sub_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SubTypeList>& _internal_sub_list() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SubTypeList>* _internal_mutable_sub_list();
  public:
  const ::longportapp::quote::v1::SubTypeList& sub_list(int index) const;
  ::longportapp::quote::v1::SubTypeList* add_sub_list();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::SubTypeList >&
      sub_list() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SubscriptionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::SubTypeList > sub_list_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityTradeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityTradeResponse) */ {
 public:
  inline SecurityTradeResponse() : SecurityTradeResponse(nullptr) {}
  ~SecurityTradeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityTradeResponse(::google::protobuf::internal::ConstantInitialized);

  inline SecurityTradeResponse(const SecurityTradeResponse& from)
      : SecurityTradeResponse(nullptr, from) {}
  SecurityTradeResponse(SecurityTradeResponse&& from) noexcept
    : SecurityTradeResponse() {
    *this = ::std::move(from);
  }

  inline SecurityTradeResponse& operator=(const SecurityTradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityTradeResponse& operator=(SecurityTradeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityTradeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityTradeResponse* internal_default_instance() {
    return reinterpret_cast<const SecurityTradeResponse*>(
               &_SecurityTradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SecurityTradeResponse& a, SecurityTradeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityTradeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityTradeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityTradeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityTradeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityTradeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityTradeResponse& from) {
    SecurityTradeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityTradeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityTradeResponse";
  }
  protected:
  explicit SecurityTradeResponse(::google::protobuf::Arena* arena);
  SecurityTradeResponse(::google::protobuf::Arena* arena, const SecurityTradeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 2,
    kSymbolFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.Trade trades = 2 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;

  public:
  void clear_trades() ;
  ::longportapp::quote::v1::Trade* mutable_trades(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Trade >*
      mutable_trades();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>& _internal_trades() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>* _internal_mutable_trades();
  public:
  const ::longportapp::quote::v1::Trade& trades(int index) const;
  ::longportapp::quote::v1::Trade* add_trades();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Trade >&
      trades() const;
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityTradeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Trade > trades_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityStaticInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityStaticInfoResponse) */ {
 public:
  inline SecurityStaticInfoResponse() : SecurityStaticInfoResponse(nullptr) {}
  ~SecurityStaticInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityStaticInfoResponse(::google::protobuf::internal::ConstantInitialized);

  inline SecurityStaticInfoResponse(const SecurityStaticInfoResponse& from)
      : SecurityStaticInfoResponse(nullptr, from) {}
  SecurityStaticInfoResponse(SecurityStaticInfoResponse&& from) noexcept
    : SecurityStaticInfoResponse() {
    *this = ::std::move(from);
  }

  inline SecurityStaticInfoResponse& operator=(const SecurityStaticInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityStaticInfoResponse& operator=(SecurityStaticInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityStaticInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityStaticInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SecurityStaticInfoResponse*>(
               &_SecurityStaticInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SecurityStaticInfoResponse& a, SecurityStaticInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityStaticInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityStaticInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityStaticInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityStaticInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityStaticInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityStaticInfoResponse& from) {
    SecurityStaticInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityStaticInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityStaticInfoResponse";
  }
  protected:
  explicit SecurityStaticInfoResponse(::google::protobuf::Arena* arena);
  SecurityStaticInfoResponse(::google::protobuf::Arena* arena, const SecurityStaticInfoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecuStaticInfoFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.StaticInfo secu_static_info = 1 [json_name = "secuStaticInfo"];
  int secu_static_info_size() const;
  private:
  int _internal_secu_static_info_size() const;

  public:
  void clear_secu_static_info() ;
  ::longportapp::quote::v1::StaticInfo* mutable_secu_static_info(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::StaticInfo >*
      mutable_secu_static_info();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StaticInfo>& _internal_secu_static_info() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StaticInfo>* _internal_mutable_secu_static_info();
  public:
  const ::longportapp::quote::v1::StaticInfo& secu_static_info(int index) const;
  ::longportapp::quote::v1::StaticInfo* add_secu_static_info();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::StaticInfo >&
      secu_static_info() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityStaticInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::StaticInfo > secu_static_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityQuote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityQuote) */ {
 public:
  inline SecurityQuote() : SecurityQuote(nullptr) {}
  ~SecurityQuote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityQuote(::google::protobuf::internal::ConstantInitialized);

  inline SecurityQuote(const SecurityQuote& from)
      : SecurityQuote(nullptr, from) {}
  SecurityQuote(SecurityQuote&& from) noexcept
    : SecurityQuote() {
    *this = ::std::move(from);
  }

  inline SecurityQuote& operator=(const SecurityQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityQuote& operator=(SecurityQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityQuote* internal_default_instance() {
    return reinterpret_cast<const SecurityQuote*>(
               &_SecurityQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SecurityQuote& a, SecurityQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityQuote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityQuote* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityQuote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityQuote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityQuote& from) {
    SecurityQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityQuote* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityQuote";
  }
  protected:
  explicit SecurityQuote(::google::protobuf::Arena* arena);
  SecurityQuote(::google::protobuf::Arena* arena, const SecurityQuote& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kLastDoneFieldNumber = 2,
    kPrevCloseFieldNumber = 3,
    kOpenFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kTurnoverFieldNumber = 9,
    kPreMarketQuoteFieldNumber = 11,
    kPostMarketQuoteFieldNumber = 12,
    kOverNightQuoteFieldNumber = 13,
    kTimestampFieldNumber = 7,
    kVolumeFieldNumber = 8,
    kTradeStatusFieldNumber = 10,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string last_done = 2 [json_name = "lastDone"];
  void clear_last_done() ;
  const std::string& last_done() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_done(Arg_&& arg, Args_... args);
  std::string* mutable_last_done();
  PROTOBUF_NODISCARD std::string* release_last_done();
  void set_allocated_last_done(std::string* value);

  private:
  const std::string& _internal_last_done() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_done(
      const std::string& value);
  std::string* _internal_mutable_last_done();

  public:
  // string prev_close = 3 [json_name = "prevClose"];
  void clear_prev_close() ;
  const std::string& prev_close() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prev_close(Arg_&& arg, Args_... args);
  std::string* mutable_prev_close();
  PROTOBUF_NODISCARD std::string* release_prev_close();
  void set_allocated_prev_close(std::string* value);

  private:
  const std::string& _internal_prev_close() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_close(
      const std::string& value);
  std::string* _internal_mutable_prev_close();

  public:
  // string open = 4 [json_name = "open"];
  void clear_open() ;
  const std::string& open() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open(Arg_&& arg, Args_... args);
  std::string* mutable_open();
  PROTOBUF_NODISCARD std::string* release_open();
  void set_allocated_open(std::string* value);

  private:
  const std::string& _internal_open() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open(
      const std::string& value);
  std::string* _internal_mutable_open();

  public:
  // string high = 5 [json_name = "high"];
  void clear_high() ;
  const std::string& high() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_high(Arg_&& arg, Args_... args);
  std::string* mutable_high();
  PROTOBUF_NODISCARD std::string* release_high();
  void set_allocated_high(std::string* value);

  private:
  const std::string& _internal_high() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_high(
      const std::string& value);
  std::string* _internal_mutable_high();

  public:
  // string low = 6 [json_name = "low"];
  void clear_low() ;
  const std::string& low() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_low(Arg_&& arg, Args_... args);
  std::string* mutable_low();
  PROTOBUF_NODISCARD std::string* release_low();
  void set_allocated_low(std::string* value);

  private:
  const std::string& _internal_low() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_low(
      const std::string& value);
  std::string* _internal_mutable_low();

  public:
  // string turnover = 9 [json_name = "turnover"];
  void clear_turnover() ;
  const std::string& turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_turnover();
  PROTOBUF_NODISCARD std::string* release_turnover();
  void set_allocated_turnover(std::string* value);

  private:
  const std::string& _internal_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover(
      const std::string& value);
  std::string* _internal_mutable_turnover();

  public:
  // .longportapp.quote.v1.PrePostQuote pre_market_quote = 11 [json_name = "preMarketQuote"];
  bool has_pre_market_quote() const;
  void clear_pre_market_quote() ;
  const ::longportapp::quote::v1::PrePostQuote& pre_market_quote() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::PrePostQuote* release_pre_market_quote();
  ::longportapp::quote::v1::PrePostQuote* mutable_pre_market_quote();
  void set_allocated_pre_market_quote(::longportapp::quote::v1::PrePostQuote* value);
  void unsafe_arena_set_allocated_pre_market_quote(::longportapp::quote::v1::PrePostQuote* value);
  ::longportapp::quote::v1::PrePostQuote* unsafe_arena_release_pre_market_quote();

  private:
  const ::longportapp::quote::v1::PrePostQuote& _internal_pre_market_quote() const;
  ::longportapp::quote::v1::PrePostQuote* _internal_mutable_pre_market_quote();

  public:
  // .longportapp.quote.v1.PrePostQuote post_market_quote = 12 [json_name = "postMarketQuote"];
  bool has_post_market_quote() const;
  void clear_post_market_quote() ;
  const ::longportapp::quote::v1::PrePostQuote& post_market_quote() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::PrePostQuote* release_post_market_quote();
  ::longportapp::quote::v1::PrePostQuote* mutable_post_market_quote();
  void set_allocated_post_market_quote(::longportapp::quote::v1::PrePostQuote* value);
  void unsafe_arena_set_allocated_post_market_quote(::longportapp::quote::v1::PrePostQuote* value);
  ::longportapp::quote::v1::PrePostQuote* unsafe_arena_release_post_market_quote();

  private:
  const ::longportapp::quote::v1::PrePostQuote& _internal_post_market_quote() const;
  ::longportapp::quote::v1::PrePostQuote* _internal_mutable_post_market_quote();

  public:
  // .longportapp.quote.v1.PrePostQuote over_night_quote = 13 [json_name = "overNightQuote"];
  bool has_over_night_quote() const;
  void clear_over_night_quote() ;
  const ::longportapp::quote::v1::PrePostQuote& over_night_quote() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::PrePostQuote* release_over_night_quote();
  ::longportapp::quote::v1::PrePostQuote* mutable_over_night_quote();
  void set_allocated_over_night_quote(::longportapp::quote::v1::PrePostQuote* value);
  void unsafe_arena_set_allocated_over_night_quote(::longportapp::quote::v1::PrePostQuote* value);
  ::longportapp::quote::v1::PrePostQuote* unsafe_arena_release_over_night_quote();

  private:
  const ::longportapp::quote::v1::PrePostQuote& _internal_over_night_quote() const;
  ::longportapp::quote::v1::PrePostQuote* _internal_mutable_over_night_quote();

  public:
  // int64 timestamp = 7 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int64 volume = 8 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // .longportapp.quote.v1.TradeStatus trade_status = 10 [json_name = "tradeStatus"];
  void clear_trade_status() ;
  ::longportapp::quote::v1::TradeStatus trade_status() const;
  void set_trade_status(::longportapp::quote::v1::TradeStatus value);

  private:
  ::longportapp::quote::v1::TradeStatus _internal_trade_status() const;
  void _internal_set_trade_status(::longportapp::quote::v1::TradeStatus value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityQuote)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 3,
      95, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr last_done_;
    ::google::protobuf::internal::ArenaStringPtr prev_close_;
    ::google::protobuf::internal::ArenaStringPtr open_;
    ::google::protobuf::internal::ArenaStringPtr high_;
    ::google::protobuf::internal::ArenaStringPtr low_;
    ::google::protobuf::internal::ArenaStringPtr turnover_;
    ::longportapp::quote::v1::PrePostQuote* pre_market_quote_;
    ::longportapp::quote::v1::PrePostQuote* post_market_quote_;
    ::longportapp::quote::v1::PrePostQuote* over_night_quote_;
    ::int64_t timestamp_;
    ::int64_t volume_;
    int trade_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityIntradayResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityIntradayResponse) */ {
 public:
  inline SecurityIntradayResponse() : SecurityIntradayResponse(nullptr) {}
  ~SecurityIntradayResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityIntradayResponse(::google::protobuf::internal::ConstantInitialized);

  inline SecurityIntradayResponse(const SecurityIntradayResponse& from)
      : SecurityIntradayResponse(nullptr, from) {}
  SecurityIntradayResponse(SecurityIntradayResponse&& from) noexcept
    : SecurityIntradayResponse() {
    *this = ::std::move(from);
  }

  inline SecurityIntradayResponse& operator=(const SecurityIntradayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityIntradayResponse& operator=(SecurityIntradayResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityIntradayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityIntradayResponse* internal_default_instance() {
    return reinterpret_cast<const SecurityIntradayResponse*>(
               &_SecurityIntradayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SecurityIntradayResponse& a, SecurityIntradayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityIntradayResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityIntradayResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityIntradayResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityIntradayResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityIntradayResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityIntradayResponse& from) {
    SecurityIntradayResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityIntradayResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityIntradayResponse";
  }
  protected:
  explicit SecurityIntradayResponse(::google::protobuf::Arena* arena);
  SecurityIntradayResponse(::google::protobuf::Arena* arena, const SecurityIntradayResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 2,
    kSymbolFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.Line lines = 2 [json_name = "lines"];
  int lines_size() const;
  private:
  int _internal_lines_size() const;

  public:
  void clear_lines() ;
  ::longportapp::quote::v1::Line* mutable_lines(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Line >*
      mutable_lines();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Line>& _internal_lines() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Line>* _internal_mutable_lines();
  public:
  const ::longportapp::quote::v1::Line& lines(int index) const;
  ::longportapp::quote::v1::Line* add_lines();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Line >&
      lines() const;
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityIntradayResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Line > lines_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityHistoryCandlestickRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityHistoryCandlestickRequest) */ {
 public:
  inline SecurityHistoryCandlestickRequest() : SecurityHistoryCandlestickRequest(nullptr) {}
  ~SecurityHistoryCandlestickRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityHistoryCandlestickRequest(::google::protobuf::internal::ConstantInitialized);

  inline SecurityHistoryCandlestickRequest(const SecurityHistoryCandlestickRequest& from)
      : SecurityHistoryCandlestickRequest(nullptr, from) {}
  SecurityHistoryCandlestickRequest(SecurityHistoryCandlestickRequest&& from) noexcept
    : SecurityHistoryCandlestickRequest() {
    *this = ::std::move(from);
  }

  inline SecurityHistoryCandlestickRequest& operator=(const SecurityHistoryCandlestickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityHistoryCandlestickRequest& operator=(SecurityHistoryCandlestickRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityHistoryCandlestickRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityHistoryCandlestickRequest* internal_default_instance() {
    return reinterpret_cast<const SecurityHistoryCandlestickRequest*>(
               &_SecurityHistoryCandlestickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SecurityHistoryCandlestickRequest& a, SecurityHistoryCandlestickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityHistoryCandlestickRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityHistoryCandlestickRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityHistoryCandlestickRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityHistoryCandlestickRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityHistoryCandlestickRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityHistoryCandlestickRequest& from) {
    SecurityHistoryCandlestickRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityHistoryCandlestickRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityHistoryCandlestickRequest";
  }
  protected:
  explicit SecurityHistoryCandlestickRequest(::google::protobuf::Arena* arena);
  SecurityHistoryCandlestickRequest(::google::protobuf::Arena* arena, const SecurityHistoryCandlestickRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using OffsetQuery = SecurityHistoryCandlestickRequest_OffsetQuery;
  using DateQuery = SecurityHistoryCandlestickRequest_DateQuery;

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kOffsetRequestFieldNumber = 5,
    kDateRequestFieldNumber = 6,
    kPeriodFieldNumber = 2,
    kAdjustTypeFieldNumber = 3,
    kQueryTypeFieldNumber = 4,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // .longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery offset_request = 5 [json_name = "offsetRequest"];
  bool has_offset_request() const;
  void clear_offset_request() ;
  const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery& offset_request() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* release_offset_request();
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* mutable_offset_request();
  void set_allocated_offset_request(::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* value);
  void unsafe_arena_set_allocated_offset_request(::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* value);
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* unsafe_arena_release_offset_request();

  private:
  const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery& _internal_offset_request() const;
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* _internal_mutable_offset_request();

  public:
  // .longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery date_request = 6 [json_name = "dateRequest"];
  bool has_date_request() const;
  void clear_date_request() ;
  const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery& date_request() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* release_date_request();
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* mutable_date_request();
  void set_allocated_date_request(::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* value);
  void unsafe_arena_set_allocated_date_request(::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* value);
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* unsafe_arena_release_date_request();

  private:
  const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery& _internal_date_request() const;
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* _internal_mutable_date_request();

  public:
  // .longportapp.quote.v1.Period period = 2 [json_name = "period"];
  void clear_period() ;
  ::longportapp::quote::v1::Period period() const;
  void set_period(::longportapp::quote::v1::Period value);

  private:
  ::longportapp::quote::v1::Period _internal_period() const;
  void _internal_set_period(::longportapp::quote::v1::Period value);

  public:
  // .longportapp.quote.v1.AdjustType adjust_type = 3 [json_name = "adjustType"];
  void clear_adjust_type() ;
  ::longportapp::quote::v1::AdjustType adjust_type() const;
  void set_adjust_type(::longportapp::quote::v1::AdjustType value);

  private:
  ::longportapp::quote::v1::AdjustType _internal_adjust_type() const;
  void _internal_set_adjust_type(::longportapp::quote::v1::AdjustType value);

  public:
  // .longportapp.quote.v1.HistoryCandlestickQueryType query_type = 4 [json_name = "queryType"];
  void clear_query_type() ;
  ::longportapp::quote::v1::HistoryCandlestickQueryType query_type() const;
  void set_query_type(::longportapp::quote::v1::HistoryCandlestickQueryType value);

  private:
  ::longportapp::quote::v1::HistoryCandlestickQueryType _internal_query_type() const;
  void _internal_set_query_type(::longportapp::quote::v1::HistoryCandlestickQueryType value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityHistoryCandlestickRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      69, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* offset_request_;
    ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* date_request_;
    int period_;
    int adjust_type_;
    int query_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityDepthResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityDepthResponse) */ {
 public:
  inline SecurityDepthResponse() : SecurityDepthResponse(nullptr) {}
  ~SecurityDepthResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityDepthResponse(::google::protobuf::internal::ConstantInitialized);

  inline SecurityDepthResponse(const SecurityDepthResponse& from)
      : SecurityDepthResponse(nullptr, from) {}
  SecurityDepthResponse(SecurityDepthResponse&& from) noexcept
    : SecurityDepthResponse() {
    *this = ::std::move(from);
  }

  inline SecurityDepthResponse& operator=(const SecurityDepthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityDepthResponse& operator=(SecurityDepthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityDepthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityDepthResponse* internal_default_instance() {
    return reinterpret_cast<const SecurityDepthResponse*>(
               &_SecurityDepthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SecurityDepthResponse& a, SecurityDepthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityDepthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityDepthResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityDepthResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityDepthResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityDepthResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityDepthResponse& from) {
    SecurityDepthResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityDepthResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityDepthResponse";
  }
  protected:
  explicit SecurityDepthResponse(::google::protobuf::Arena* arena);
  SecurityDepthResponse(::google::protobuf::Arena* arena, const SecurityDepthResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskFieldNumber = 2,
    kBidFieldNumber = 3,
    kSymbolFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.Depth ask = 2 [json_name = "ask"];
  int ask_size() const;
  private:
  int _internal_ask_size() const;

  public:
  void clear_ask() ;
  ::longportapp::quote::v1::Depth* mutable_ask(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth >*
      mutable_ask();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>& _internal_ask() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>* _internal_mutable_ask();
  public:
  const ::longportapp::quote::v1::Depth& ask(int index) const;
  ::longportapp::quote::v1::Depth* add_ask();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth >&
      ask() const;
  // repeated .longportapp.quote.v1.Depth bid = 3 [json_name = "bid"];
  int bid_size() const;
  private:
  int _internal_bid_size() const;

  public:
  void clear_bid() ;
  ::longportapp::quote::v1::Depth* mutable_bid(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth >*
      mutable_bid();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>& _internal_bid() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>* _internal_mutable_bid();
  public:
  const ::longportapp::quote::v1::Depth& bid(int index) const;
  ::longportapp::quote::v1::Depth* add_bid();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth >&
      bid() const;
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityDepthResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth > ask_;
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth > bid_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityCandlestickResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityCandlestickResponse) */ {
 public:
  inline SecurityCandlestickResponse() : SecurityCandlestickResponse(nullptr) {}
  ~SecurityCandlestickResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityCandlestickResponse(::google::protobuf::internal::ConstantInitialized);

  inline SecurityCandlestickResponse(const SecurityCandlestickResponse& from)
      : SecurityCandlestickResponse(nullptr, from) {}
  SecurityCandlestickResponse(SecurityCandlestickResponse&& from) noexcept
    : SecurityCandlestickResponse() {
    *this = ::std::move(from);
  }

  inline SecurityCandlestickResponse& operator=(const SecurityCandlestickResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityCandlestickResponse& operator=(SecurityCandlestickResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityCandlestickResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityCandlestickResponse* internal_default_instance() {
    return reinterpret_cast<const SecurityCandlestickResponse*>(
               &_SecurityCandlestickResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SecurityCandlestickResponse& a, SecurityCandlestickResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityCandlestickResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityCandlestickResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityCandlestickResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityCandlestickResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityCandlestickResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityCandlestickResponse& from) {
    SecurityCandlestickResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityCandlestickResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityCandlestickResponse";
  }
  protected:
  explicit SecurityCandlestickResponse(::google::protobuf::Arena* arena);
  SecurityCandlestickResponse(::google::protobuf::Arena* arena, const SecurityCandlestickResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandlesticksFieldNumber = 2,
    kSymbolFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.Candlestick candlesticks = 2 [json_name = "candlesticks"];
  int candlesticks_size() const;
  private:
  int _internal_candlesticks_size() const;

  public:
  void clear_candlesticks() ;
  ::longportapp::quote::v1::Candlestick* mutable_candlesticks(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Candlestick >*
      mutable_candlesticks();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Candlestick>& _internal_candlesticks() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Candlestick>* _internal_mutable_candlesticks();
  public:
  const ::longportapp::quote::v1::Candlestick& candlesticks(int index) const;
  ::longportapp::quote::v1::Candlestick* add_candlesticks();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Candlestick >&
      candlesticks() const;
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityCandlestickResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Candlestick > candlesticks_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityCalcQuoteResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityCalcQuoteResponse) */ {
 public:
  inline SecurityCalcQuoteResponse() : SecurityCalcQuoteResponse(nullptr) {}
  ~SecurityCalcQuoteResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityCalcQuoteResponse(::google::protobuf::internal::ConstantInitialized);

  inline SecurityCalcQuoteResponse(const SecurityCalcQuoteResponse& from)
      : SecurityCalcQuoteResponse(nullptr, from) {}
  SecurityCalcQuoteResponse(SecurityCalcQuoteResponse&& from) noexcept
    : SecurityCalcQuoteResponse() {
    *this = ::std::move(from);
  }

  inline SecurityCalcQuoteResponse& operator=(const SecurityCalcQuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityCalcQuoteResponse& operator=(SecurityCalcQuoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityCalcQuoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityCalcQuoteResponse* internal_default_instance() {
    return reinterpret_cast<const SecurityCalcQuoteResponse*>(
               &_SecurityCalcQuoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SecurityCalcQuoteResponse& a, SecurityCalcQuoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityCalcQuoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityCalcQuoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityCalcQuoteResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityCalcQuoteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityCalcQuoteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityCalcQuoteResponse& from) {
    SecurityCalcQuoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityCalcQuoteResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityCalcQuoteResponse";
  }
  protected:
  explicit SecurityCalcQuoteResponse(::google::protobuf::Arena* arena);
  SecurityCalcQuoteResponse(::google::protobuf::Arena* arena, const SecurityCalcQuoteResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityCalcIndexFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.SecurityCalcIndex security_calc_index = 1 [json_name = "securityCalcIndex"];
  int security_calc_index_size() const;
  private:
  int _internal_security_calc_index_size() const;

  public:
  void clear_security_calc_index() ;
  ::longportapp::quote::v1::SecurityCalcIndex* mutable_security_calc_index(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::SecurityCalcIndex >*
      mutable_security_calc_index();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityCalcIndex>& _internal_security_calc_index() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityCalcIndex>* _internal_mutable_security_calc_index();
  public:
  const ::longportapp::quote::v1::SecurityCalcIndex& security_calc_index(int index) const;
  ::longportapp::quote::v1::SecurityCalcIndex* add_security_calc_index();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::SecurityCalcIndex >&
      security_calc_index() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityCalcQuoteResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::SecurityCalcIndex > security_calc_index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class SecurityBrokersResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityBrokersResponse) */ {
 public:
  inline SecurityBrokersResponse() : SecurityBrokersResponse(nullptr) {}
  ~SecurityBrokersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityBrokersResponse(::google::protobuf::internal::ConstantInitialized);

  inline SecurityBrokersResponse(const SecurityBrokersResponse& from)
      : SecurityBrokersResponse(nullptr, from) {}
  SecurityBrokersResponse(SecurityBrokersResponse&& from) noexcept
    : SecurityBrokersResponse() {
    *this = ::std::move(from);
  }

  inline SecurityBrokersResponse& operator=(const SecurityBrokersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityBrokersResponse& operator=(SecurityBrokersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityBrokersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityBrokersResponse* internal_default_instance() {
    return reinterpret_cast<const SecurityBrokersResponse*>(
               &_SecurityBrokersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SecurityBrokersResponse& a, SecurityBrokersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityBrokersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityBrokersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityBrokersResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityBrokersResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityBrokersResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityBrokersResponse& from) {
    SecurityBrokersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityBrokersResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityBrokersResponse";
  }
  protected:
  explicit SecurityBrokersResponse(::google::protobuf::Arena* arena);
  SecurityBrokersResponse(::google::protobuf::Arena* arena, const SecurityBrokersResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskBrokersFieldNumber = 2,
    kBidBrokersFieldNumber = 3,
    kSymbolFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.Brokers ask_brokers = 2 [json_name = "askBrokers"];
  int ask_brokers_size() const;
  private:
  int _internal_ask_brokers_size() const;

  public:
  void clear_ask_brokers() ;
  ::longportapp::quote::v1::Brokers* mutable_ask_brokers(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers >*
      mutable_ask_brokers();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>& _internal_ask_brokers() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>* _internal_mutable_ask_brokers();
  public:
  const ::longportapp::quote::v1::Brokers& ask_brokers(int index) const;
  ::longportapp::quote::v1::Brokers* add_ask_brokers();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers >&
      ask_brokers() const;
  // repeated .longportapp.quote.v1.Brokers bid_brokers = 3 [json_name = "bidBrokers"];
  int bid_brokers_size() const;
  private:
  int _internal_bid_brokers_size() const;

  public:
  void clear_bid_brokers() ;
  ::longportapp::quote::v1::Brokers* mutable_bid_brokers(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers >*
      mutable_bid_brokers();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>& _internal_bid_brokers() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>* _internal_mutable_bid_brokers();
  public:
  const ::longportapp::quote::v1::Brokers& bid_brokers(int index) const;
  ::longportapp::quote::v1::Brokers* add_bid_brokers();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers >&
      bid_brokers() const;
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityBrokersResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers > ask_brokers_;
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers > bid_brokers_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class PushTrade final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.PushTrade) */ {
 public:
  inline PushTrade() : PushTrade(nullptr) {}
  ~PushTrade() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PushTrade(::google::protobuf::internal::ConstantInitialized);

  inline PushTrade(const PushTrade& from)
      : PushTrade(nullptr, from) {}
  PushTrade(PushTrade&& from) noexcept
    : PushTrade() {
    *this = ::std::move(from);
  }

  inline PushTrade& operator=(const PushTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushTrade& operator=(PushTrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushTrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushTrade* internal_default_instance() {
    return reinterpret_cast<const PushTrade*>(
               &_PushTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PushTrade& a, PushTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(PushTrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushTrade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushTrade* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushTrade>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushTrade& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PushTrade& from) {
    PushTrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PushTrade* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.PushTrade";
  }
  protected:
  explicit PushTrade(::google::protobuf::Arena* arena);
  PushTrade(::google::protobuf::Arena* arena, const PushTrade& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeFieldNumber = 3,
    kSymbolFieldNumber = 1,
    kSequenceFieldNumber = 2,
  };
  // repeated .longportapp.quote.v1.Trade trade = 3 [json_name = "trade"];
  int trade_size() const;
  private:
  int _internal_trade_size() const;

  public:
  void clear_trade() ;
  ::longportapp::quote::v1::Trade* mutable_trade(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Trade >*
      mutable_trade();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>& _internal_trade() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>* _internal_mutable_trade();
  public:
  const ::longportapp::quote::v1::Trade& trade(int index) const;
  ::longportapp::quote::v1::Trade* add_trade();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Trade >&
      trade() const;
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // int64 sequence = 2 [json_name = "sequence"];
  void clear_sequence() ;
  ::int64_t sequence() const;
  void set_sequence(::int64_t value);

  private:
  ::int64_t _internal_sequence() const;
  void _internal_set_sequence(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.PushTrade)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Trade > trade_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::int64_t sequence_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class PushDepth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.PushDepth) */ {
 public:
  inline PushDepth() : PushDepth(nullptr) {}
  ~PushDepth() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PushDepth(::google::protobuf::internal::ConstantInitialized);

  inline PushDepth(const PushDepth& from)
      : PushDepth(nullptr, from) {}
  PushDepth(PushDepth&& from) noexcept
    : PushDepth() {
    *this = ::std::move(from);
  }

  inline PushDepth& operator=(const PushDepth& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushDepth& operator=(PushDepth&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushDepth& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushDepth* internal_default_instance() {
    return reinterpret_cast<const PushDepth*>(
               &_PushDepth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PushDepth& a, PushDepth& b) {
    a.Swap(&b);
  }
  inline void Swap(PushDepth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushDepth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushDepth* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushDepth>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushDepth& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PushDepth& from) {
    PushDepth::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PushDepth* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.PushDepth";
  }
  protected:
  explicit PushDepth(::google::protobuf::Arena* arena);
  PushDepth(::google::protobuf::Arena* arena, const PushDepth& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskFieldNumber = 3,
    kBidFieldNumber = 4,
    kSymbolFieldNumber = 1,
    kSequenceFieldNumber = 2,
  };
  // repeated .longportapp.quote.v1.Depth ask = 3 [json_name = "ask"];
  int ask_size() const;
  private:
  int _internal_ask_size() const;

  public:
  void clear_ask() ;
  ::longportapp::quote::v1::Depth* mutable_ask(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth >*
      mutable_ask();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>& _internal_ask() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>* _internal_mutable_ask();
  public:
  const ::longportapp::quote::v1::Depth& ask(int index) const;
  ::longportapp::quote::v1::Depth* add_ask();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth >&
      ask() const;
  // repeated .longportapp.quote.v1.Depth bid = 4 [json_name = "bid"];
  int bid_size() const;
  private:
  int _internal_bid_size() const;

  public:
  void clear_bid() ;
  ::longportapp::quote::v1::Depth* mutable_bid(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth >*
      mutable_bid();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>& _internal_bid() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>* _internal_mutable_bid();
  public:
  const ::longportapp::quote::v1::Depth& bid(int index) const;
  ::longportapp::quote::v1::Depth* add_bid();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth >&
      bid() const;
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // int64 sequence = 2 [json_name = "sequence"];
  void clear_sequence() ;
  ::int64_t sequence() const;
  void set_sequence(::int64_t value);

  private:
  ::int64_t _internal_sequence() const;
  void _internal_set_sequence(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.PushDepth)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth > ask_;
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Depth > bid_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::int64_t sequence_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class PushBrokers final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.PushBrokers) */ {
 public:
  inline PushBrokers() : PushBrokers(nullptr) {}
  ~PushBrokers() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PushBrokers(::google::protobuf::internal::ConstantInitialized);

  inline PushBrokers(const PushBrokers& from)
      : PushBrokers(nullptr, from) {}
  PushBrokers(PushBrokers&& from) noexcept
    : PushBrokers() {
    *this = ::std::move(from);
  }

  inline PushBrokers& operator=(const PushBrokers& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushBrokers& operator=(PushBrokers&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushBrokers& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushBrokers* internal_default_instance() {
    return reinterpret_cast<const PushBrokers*>(
               &_PushBrokers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PushBrokers& a, PushBrokers& b) {
    a.Swap(&b);
  }
  inline void Swap(PushBrokers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushBrokers* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushBrokers* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushBrokers>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushBrokers& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PushBrokers& from) {
    PushBrokers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PushBrokers* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.PushBrokers";
  }
  protected:
  explicit PushBrokers(::google::protobuf::Arena* arena);
  PushBrokers(::google::protobuf::Arena* arena, const PushBrokers& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskBrokersFieldNumber = 3,
    kBidBrokersFieldNumber = 4,
    kSymbolFieldNumber = 1,
    kSequenceFieldNumber = 2,
  };
  // repeated .longportapp.quote.v1.Brokers ask_brokers = 3 [json_name = "askBrokers"];
  int ask_brokers_size() const;
  private:
  int _internal_ask_brokers_size() const;

  public:
  void clear_ask_brokers() ;
  ::longportapp::quote::v1::Brokers* mutable_ask_brokers(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers >*
      mutable_ask_brokers();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>& _internal_ask_brokers() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>* _internal_mutable_ask_brokers();
  public:
  const ::longportapp::quote::v1::Brokers& ask_brokers(int index) const;
  ::longportapp::quote::v1::Brokers* add_ask_brokers();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers >&
      ask_brokers() const;
  // repeated .longportapp.quote.v1.Brokers bid_brokers = 4 [json_name = "bidBrokers"];
  int bid_brokers_size() const;
  private:
  int _internal_bid_brokers_size() const;

  public:
  void clear_bid_brokers() ;
  ::longportapp::quote::v1::Brokers* mutable_bid_brokers(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers >*
      mutable_bid_brokers();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>& _internal_bid_brokers() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>* _internal_mutable_bid_brokers();
  public:
  const ::longportapp::quote::v1::Brokers& bid_brokers(int index) const;
  ::longportapp::quote::v1::Brokers* add_bid_brokers();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers >&
      bid_brokers() const;
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // int64 sequence = 2 [json_name = "sequence"];
  void clear_sequence() ;
  ::int64_t sequence() const;
  void set_sequence(::int64_t value);

  private:
  ::int64_t _internal_sequence() const;
  void _internal_set_sequence(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.PushBrokers)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers > ask_brokers_;
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::Brokers > bid_brokers_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::int64_t sequence_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class ParticipantBrokerIdsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.ParticipantBrokerIdsResponse) */ {
 public:
  inline ParticipantBrokerIdsResponse() : ParticipantBrokerIdsResponse(nullptr) {}
  ~ParticipantBrokerIdsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ParticipantBrokerIdsResponse(::google::protobuf::internal::ConstantInitialized);

  inline ParticipantBrokerIdsResponse(const ParticipantBrokerIdsResponse& from)
      : ParticipantBrokerIdsResponse(nullptr, from) {}
  ParticipantBrokerIdsResponse(ParticipantBrokerIdsResponse&& from) noexcept
    : ParticipantBrokerIdsResponse() {
    *this = ::std::move(from);
  }

  inline ParticipantBrokerIdsResponse& operator=(const ParticipantBrokerIdsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParticipantBrokerIdsResponse& operator=(ParticipantBrokerIdsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParticipantBrokerIdsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParticipantBrokerIdsResponse* internal_default_instance() {
    return reinterpret_cast<const ParticipantBrokerIdsResponse*>(
               &_ParticipantBrokerIdsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ParticipantBrokerIdsResponse& a, ParticipantBrokerIdsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ParticipantBrokerIdsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParticipantBrokerIdsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParticipantBrokerIdsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParticipantBrokerIdsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParticipantBrokerIdsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ParticipantBrokerIdsResponse& from) {
    ParticipantBrokerIdsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ParticipantBrokerIdsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.ParticipantBrokerIdsResponse";
  }
  protected:
  explicit ParticipantBrokerIdsResponse(::google::protobuf::Arena* arena);
  ParticipantBrokerIdsResponse(::google::protobuf::Arena* arena, const ParticipantBrokerIdsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantBrokerNumbersFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.ParticipantInfo participant_broker_numbers = 1 [json_name = "participantBrokerNumbers"];
  int participant_broker_numbers_size() const;
  private:
  int _internal_participant_broker_numbers_size() const;

  public:
  void clear_participant_broker_numbers() ;
  ::longportapp::quote::v1::ParticipantInfo* mutable_participant_broker_numbers(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::ParticipantInfo >*
      mutable_participant_broker_numbers();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::ParticipantInfo>& _internal_participant_broker_numbers() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::ParticipantInfo>* _internal_mutable_participant_broker_numbers();
  public:
  const ::longportapp::quote::v1::ParticipantInfo& participant_broker_numbers(int index) const;
  ::longportapp::quote::v1::ParticipantInfo* add_participant_broker_numbers();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::ParticipantInfo >&
      participant_broker_numbers() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.ParticipantBrokerIdsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::ParticipantInfo > participant_broker_numbers_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class OptionQuote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.OptionQuote) */ {
 public:
  inline OptionQuote() : OptionQuote(nullptr) {}
  ~OptionQuote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionQuote(::google::protobuf::internal::ConstantInitialized);

  inline OptionQuote(const OptionQuote& from)
      : OptionQuote(nullptr, from) {}
  OptionQuote(OptionQuote&& from) noexcept
    : OptionQuote() {
    *this = ::std::move(from);
  }

  inline OptionQuote& operator=(const OptionQuote& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionQuote& operator=(OptionQuote&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionQuote& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionQuote* internal_default_instance() {
    return reinterpret_cast<const OptionQuote*>(
               &_OptionQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OptionQuote& a, OptionQuote& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionQuote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionQuote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionQuote* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionQuote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptionQuote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OptionQuote& from) {
    OptionQuote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionQuote* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.OptionQuote";
  }
  protected:
  explicit OptionQuote(::google::protobuf::Arena* arena);
  OptionQuote(::google::protobuf::Arena* arena, const OptionQuote& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kLastDoneFieldNumber = 2,
    kPrevCloseFieldNumber = 3,
    kOpenFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kTurnoverFieldNumber = 9,
    kOptionExtendFieldNumber = 11,
    kTimestampFieldNumber = 7,
    kVolumeFieldNumber = 8,
    kTradeStatusFieldNumber = 10,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string last_done = 2 [json_name = "lastDone"];
  void clear_last_done() ;
  const std::string& last_done() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_done(Arg_&& arg, Args_... args);
  std::string* mutable_last_done();
  PROTOBUF_NODISCARD std::string* release_last_done();
  void set_allocated_last_done(std::string* value);

  private:
  const std::string& _internal_last_done() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_done(
      const std::string& value);
  std::string* _internal_mutable_last_done();

  public:
  // string prev_close = 3 [json_name = "prevClose"];
  void clear_prev_close() ;
  const std::string& prev_close() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prev_close(Arg_&& arg, Args_... args);
  std::string* mutable_prev_close();
  PROTOBUF_NODISCARD std::string* release_prev_close();
  void set_allocated_prev_close(std::string* value);

  private:
  const std::string& _internal_prev_close() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_close(
      const std::string& value);
  std::string* _internal_mutable_prev_close();

  public:
  // string open = 4 [json_name = "open"];
  void clear_open() ;
  const std::string& open() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open(Arg_&& arg, Args_... args);
  std::string* mutable_open();
  PROTOBUF_NODISCARD std::string* release_open();
  void set_allocated_open(std::string* value);

  private:
  const std::string& _internal_open() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open(
      const std::string& value);
  std::string* _internal_mutable_open();

  public:
  // string high = 5 [json_name = "high"];
  void clear_high() ;
  const std::string& high() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_high(Arg_&& arg, Args_... args);
  std::string* mutable_high();
  PROTOBUF_NODISCARD std::string* release_high();
  void set_allocated_high(std::string* value);

  private:
  const std::string& _internal_high() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_high(
      const std::string& value);
  std::string* _internal_mutable_high();

  public:
  // string low = 6 [json_name = "low"];
  void clear_low() ;
  const std::string& low() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_low(Arg_&& arg, Args_... args);
  std::string* mutable_low();
  PROTOBUF_NODISCARD std::string* release_low();
  void set_allocated_low(std::string* value);

  private:
  const std::string& _internal_low() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_low(
      const std::string& value);
  std::string* _internal_mutable_low();

  public:
  // string turnover = 9 [json_name = "turnover"];
  void clear_turnover() ;
  const std::string& turnover() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turnover(Arg_&& arg, Args_... args);
  std::string* mutable_turnover();
  PROTOBUF_NODISCARD std::string* release_turnover();
  void set_allocated_turnover(std::string* value);

  private:
  const std::string& _internal_turnover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turnover(
      const std::string& value);
  std::string* _internal_mutable_turnover();

  public:
  // .longportapp.quote.v1.OptionExtend option_extend = 11 [json_name = "optionExtend"];
  bool has_option_extend() const;
  void clear_option_extend() ;
  const ::longportapp::quote::v1::OptionExtend& option_extend() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::OptionExtend* release_option_extend();
  ::longportapp::quote::v1::OptionExtend* mutable_option_extend();
  void set_allocated_option_extend(::longportapp::quote::v1::OptionExtend* value);
  void unsafe_arena_set_allocated_option_extend(::longportapp::quote::v1::OptionExtend* value);
  ::longportapp::quote::v1::OptionExtend* unsafe_arena_release_option_extend();

  private:
  const ::longportapp::quote::v1::OptionExtend& _internal_option_extend() const;
  ::longportapp::quote::v1::OptionExtend* _internal_mutable_option_extend();

  public:
  // int64 timestamp = 7 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int64 volume = 8 [json_name = "volume"];
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // .longportapp.quote.v1.TradeStatus trade_status = 10 [json_name = "tradeStatus"];
  void clear_trade_status() ;
  ::longportapp::quote::v1::TradeStatus trade_status() const;
  void set_trade_status(::longportapp::quote::v1::TradeStatus value);

  private:
  ::longportapp::quote::v1::TradeStatus _internal_trade_status() const;
  void _internal_set_trade_status(::longportapp::quote::v1::TradeStatus value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.OptionQuote)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      93, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr last_done_;
    ::google::protobuf::internal::ArenaStringPtr prev_close_;
    ::google::protobuf::internal::ArenaStringPtr open_;
    ::google::protobuf::internal::ArenaStringPtr high_;
    ::google::protobuf::internal::ArenaStringPtr low_;
    ::google::protobuf::internal::ArenaStringPtr turnover_;
    ::longportapp::quote::v1::OptionExtend* option_extend_;
    ::int64_t timestamp_;
    ::int64_t volume_;
    int trade_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class OptionChainDateStrikeInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.OptionChainDateStrikeInfoResponse) */ {
 public:
  inline OptionChainDateStrikeInfoResponse() : OptionChainDateStrikeInfoResponse(nullptr) {}
  ~OptionChainDateStrikeInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionChainDateStrikeInfoResponse(::google::protobuf::internal::ConstantInitialized);

  inline OptionChainDateStrikeInfoResponse(const OptionChainDateStrikeInfoResponse& from)
      : OptionChainDateStrikeInfoResponse(nullptr, from) {}
  OptionChainDateStrikeInfoResponse(OptionChainDateStrikeInfoResponse&& from) noexcept
    : OptionChainDateStrikeInfoResponse() {
    *this = ::std::move(from);
  }

  inline OptionChainDateStrikeInfoResponse& operator=(const OptionChainDateStrikeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionChainDateStrikeInfoResponse& operator=(OptionChainDateStrikeInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionChainDateStrikeInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionChainDateStrikeInfoResponse* internal_default_instance() {
    return reinterpret_cast<const OptionChainDateStrikeInfoResponse*>(
               &_OptionChainDateStrikeInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(OptionChainDateStrikeInfoResponse& a, OptionChainDateStrikeInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionChainDateStrikeInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionChainDateStrikeInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionChainDateStrikeInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionChainDateStrikeInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptionChainDateStrikeInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OptionChainDateStrikeInfoResponse& from) {
    OptionChainDateStrikeInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionChainDateStrikeInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.OptionChainDateStrikeInfoResponse";
  }
  protected:
  explicit OptionChainDateStrikeInfoResponse(::google::protobuf::Arena* arena);
  OptionChainDateStrikeInfoResponse(::google::protobuf::Arena* arena, const OptionChainDateStrikeInfoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrikePriceInfoFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.StrikePriceInfo strike_price_info = 1 [json_name = "strikePriceInfo"];
  int strike_price_info_size() const;
  private:
  int _internal_strike_price_info_size() const;

  public:
  void clear_strike_price_info() ;
  ::longportapp::quote::v1::StrikePriceInfo* mutable_strike_price_info(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::StrikePriceInfo >*
      mutable_strike_price_info();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StrikePriceInfo>& _internal_strike_price_info() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StrikePriceInfo>* _internal_mutable_strike_price_info();
  public:
  const ::longportapp::quote::v1::StrikePriceInfo& strike_price_info(int index) const;
  ::longportapp::quote::v1::StrikePriceInfo* add_strike_price_info();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::StrikePriceInfo >&
      strike_price_info() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.OptionChainDateStrikeInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::StrikePriceInfo > strike_price_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class MarketTradePeriod final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.MarketTradePeriod) */ {
 public:
  inline MarketTradePeriod() : MarketTradePeriod(nullptr) {}
  ~MarketTradePeriod() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketTradePeriod(::google::protobuf::internal::ConstantInitialized);

  inline MarketTradePeriod(const MarketTradePeriod& from)
      : MarketTradePeriod(nullptr, from) {}
  MarketTradePeriod(MarketTradePeriod&& from) noexcept
    : MarketTradePeriod() {
    *this = ::std::move(from);
  }

  inline MarketTradePeriod& operator=(const MarketTradePeriod& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketTradePeriod& operator=(MarketTradePeriod&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketTradePeriod& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketTradePeriod* internal_default_instance() {
    return reinterpret_cast<const MarketTradePeriod*>(
               &_MarketTradePeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(MarketTradePeriod& a, MarketTradePeriod& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketTradePeriod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketTradePeriod* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketTradePeriod* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketTradePeriod>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketTradePeriod& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MarketTradePeriod& from) {
    MarketTradePeriod::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MarketTradePeriod* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.MarketTradePeriod";
  }
  protected:
  explicit MarketTradePeriod(::google::protobuf::Arena* arena);
  MarketTradePeriod(::google::protobuf::Arena* arena, const MarketTradePeriod& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeSessionFieldNumber = 2,
    kMarketFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.TradePeriod trade_session = 2 [json_name = "tradeSession"];
  int trade_session_size() const;
  private:
  int _internal_trade_session_size() const;

  public:
  void clear_trade_session() ;
  ::longportapp::quote::v1::TradePeriod* mutable_trade_session(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::TradePeriod >*
      mutable_trade_session();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::TradePeriod>& _internal_trade_session() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::TradePeriod>* _internal_mutable_trade_session();
  public:
  const ::longportapp::quote::v1::TradePeriod& trade_session(int index) const;
  ::longportapp::quote::v1::TradePeriod* add_trade_session();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::TradePeriod >&
      trade_session() const;
  // string market = 1 [json_name = "market"];
  void clear_market() ;
  const std::string& market() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market(Arg_&& arg, Args_... args);
  std::string* mutable_market();
  PROTOBUF_NODISCARD std::string* release_market();
  void set_allocated_market(std::string* value);

  private:
  const std::string& _internal_market() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market(
      const std::string& value);
  std::string* _internal_mutable_market();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.MarketTradePeriod)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::TradePeriod > trade_session_;
    ::google::protobuf::internal::ArenaStringPtr market_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class IssuerInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.IssuerInfoResponse) */ {
 public:
  inline IssuerInfoResponse() : IssuerInfoResponse(nullptr) {}
  ~IssuerInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IssuerInfoResponse(::google::protobuf::internal::ConstantInitialized);

  inline IssuerInfoResponse(const IssuerInfoResponse& from)
      : IssuerInfoResponse(nullptr, from) {}
  IssuerInfoResponse(IssuerInfoResponse&& from) noexcept
    : IssuerInfoResponse() {
    *this = ::std::move(from);
  }

  inline IssuerInfoResponse& operator=(const IssuerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IssuerInfoResponse& operator=(IssuerInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IssuerInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IssuerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const IssuerInfoResponse*>(
               &_IssuerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(IssuerInfoResponse& a, IssuerInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IssuerInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IssuerInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IssuerInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IssuerInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IssuerInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IssuerInfoResponse& from) {
    IssuerInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IssuerInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.IssuerInfoResponse";
  }
  protected:
  explicit IssuerInfoResponse(::google::protobuf::Arena* arena);
  IssuerInfoResponse(::google::protobuf::Arena* arena, const IssuerInfoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIssuerInfoFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.IssuerInfo issuer_info = 1 [json_name = "issuerInfo"];
  int issuer_info_size() const;
  private:
  int _internal_issuer_info_size() const;

  public:
  void clear_issuer_info() ;
  ::longportapp::quote::v1::IssuerInfo* mutable_issuer_info(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::IssuerInfo >*
      mutable_issuer_info();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::IssuerInfo>& _internal_issuer_info() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::IssuerInfo>* _internal_mutable_issuer_info();
  public:
  const ::longportapp::quote::v1::IssuerInfo& issuer_info(int index) const;
  ::longportapp::quote::v1::IssuerInfo* add_issuer_info();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::IssuerInfo >&
      issuer_info() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.IssuerInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::IssuerInfo > issuer_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class CapitalFlowIntradayResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.CapitalFlowIntradayResponse) */ {
 public:
  inline CapitalFlowIntradayResponse() : CapitalFlowIntradayResponse(nullptr) {}
  ~CapitalFlowIntradayResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CapitalFlowIntradayResponse(::google::protobuf::internal::ConstantInitialized);

  inline CapitalFlowIntradayResponse(const CapitalFlowIntradayResponse& from)
      : CapitalFlowIntradayResponse(nullptr, from) {}
  CapitalFlowIntradayResponse(CapitalFlowIntradayResponse&& from) noexcept
    : CapitalFlowIntradayResponse() {
    *this = ::std::move(from);
  }

  inline CapitalFlowIntradayResponse& operator=(const CapitalFlowIntradayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapitalFlowIntradayResponse& operator=(CapitalFlowIntradayResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapitalFlowIntradayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapitalFlowIntradayResponse* internal_default_instance() {
    return reinterpret_cast<const CapitalFlowIntradayResponse*>(
               &_CapitalFlowIntradayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CapitalFlowIntradayResponse& a, CapitalFlowIntradayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CapitalFlowIntradayResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapitalFlowIntradayResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapitalFlowIntradayResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapitalFlowIntradayResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CapitalFlowIntradayResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CapitalFlowIntradayResponse& from) {
    CapitalFlowIntradayResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CapitalFlowIntradayResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.CapitalFlowIntradayResponse";
  }
  protected:
  explicit CapitalFlowIntradayResponse(::google::protobuf::Arena* arena);
  CapitalFlowIntradayResponse(::google::protobuf::Arena* arena, const CapitalFlowIntradayResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CapitalFlowLine = CapitalFlowIntradayResponse_CapitalFlowLine;

  // accessors -------------------------------------------------------

  enum : int {
    kCapitalFlowLinesFieldNumber = 2,
    kSymbolFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine capital_flow_lines = 2 [json_name = "capitalFlowLines"];
  int capital_flow_lines_size() const;
  private:
  int _internal_capital_flow_lines_size() const;

  public:
  void clear_capital_flow_lines() ;
  ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine* mutable_capital_flow_lines(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine >*
      mutable_capital_flow_lines();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine>& _internal_capital_flow_lines() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine>* _internal_mutable_capital_flow_lines();
  public:
  const ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine& capital_flow_lines(int index) const;
  ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine* add_capital_flow_lines();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine >&
      capital_flow_lines() const;
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.CapitalFlowIntradayResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine > capital_flow_lines_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class CapitalDistributionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.CapitalDistributionResponse) */ {
 public:
  inline CapitalDistributionResponse() : CapitalDistributionResponse(nullptr) {}
  ~CapitalDistributionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CapitalDistributionResponse(::google::protobuf::internal::ConstantInitialized);

  inline CapitalDistributionResponse(const CapitalDistributionResponse& from)
      : CapitalDistributionResponse(nullptr, from) {}
  CapitalDistributionResponse(CapitalDistributionResponse&& from) noexcept
    : CapitalDistributionResponse() {
    *this = ::std::move(from);
  }

  inline CapitalDistributionResponse& operator=(const CapitalDistributionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapitalDistributionResponse& operator=(CapitalDistributionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapitalDistributionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapitalDistributionResponse* internal_default_instance() {
    return reinterpret_cast<const CapitalDistributionResponse*>(
               &_CapitalDistributionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CapitalDistributionResponse& a, CapitalDistributionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CapitalDistributionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapitalDistributionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapitalDistributionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapitalDistributionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CapitalDistributionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CapitalDistributionResponse& from) {
    CapitalDistributionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CapitalDistributionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.CapitalDistributionResponse";
  }
  protected:
  explicit CapitalDistributionResponse(::google::protobuf::Arena* arena);
  CapitalDistributionResponse(::google::protobuf::Arena* arena, const CapitalDistributionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CapitalDistribution = CapitalDistributionResponse_CapitalDistribution;

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kCapitalInFieldNumber = 3,
    kCapitalOutFieldNumber = 4,
    kTimestampFieldNumber = 2,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // .longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution capital_in = 3 [json_name = "capitalIn"];
  bool has_capital_in() const;
  void clear_capital_in() ;
  const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution& capital_in() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* release_capital_in();
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* mutable_capital_in();
  void set_allocated_capital_in(::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* value);
  void unsafe_arena_set_allocated_capital_in(::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* value);
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* unsafe_arena_release_capital_in();

  private:
  const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution& _internal_capital_in() const;
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* _internal_mutable_capital_in();

  public:
  // .longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution capital_out = 4 [json_name = "capitalOut"];
  bool has_capital_out() const;
  void clear_capital_out() ;
  const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution& capital_out() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* release_capital_out();
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* mutable_capital_out();
  void set_allocated_capital_out(::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* value);
  void unsafe_arena_set_allocated_capital_out(::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* value);
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* unsafe_arena_release_capital_out();

  private:
  const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution& _internal_capital_out() const;
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* _internal_mutable_capital_out();

  public:
  // int64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.CapitalDistributionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* capital_in_;
    ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* capital_out_;
    ::int64_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class WarrantQuoteResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.WarrantQuoteResponse) */ {
 public:
  inline WarrantQuoteResponse() : WarrantQuoteResponse(nullptr) {}
  ~WarrantQuoteResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WarrantQuoteResponse(::google::protobuf::internal::ConstantInitialized);

  inline WarrantQuoteResponse(const WarrantQuoteResponse& from)
      : WarrantQuoteResponse(nullptr, from) {}
  WarrantQuoteResponse(WarrantQuoteResponse&& from) noexcept
    : WarrantQuoteResponse() {
    *this = ::std::move(from);
  }

  inline WarrantQuoteResponse& operator=(const WarrantQuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarrantQuoteResponse& operator=(WarrantQuoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WarrantQuoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WarrantQuoteResponse* internal_default_instance() {
    return reinterpret_cast<const WarrantQuoteResponse*>(
               &_WarrantQuoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WarrantQuoteResponse& a, WarrantQuoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WarrantQuoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarrantQuoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WarrantQuoteResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WarrantQuoteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WarrantQuoteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WarrantQuoteResponse& from) {
    WarrantQuoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WarrantQuoteResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.WarrantQuoteResponse";
  }
  protected:
  explicit WarrantQuoteResponse(::google::protobuf::Arena* arena);
  WarrantQuoteResponse(::google::protobuf::Arena* arena, const WarrantQuoteResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecuQuoteFieldNumber = 2,
  };
  // repeated .longportapp.quote.v1.WarrantQuote secu_quote = 2 [json_name = "secuQuote"];
  int secu_quote_size() const;
  private:
  int _internal_secu_quote_size() const;

  public:
  void clear_secu_quote() ;
  ::longportapp::quote::v1::WarrantQuote* mutable_secu_quote(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::WarrantQuote >*
      mutable_secu_quote();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::WarrantQuote>& _internal_secu_quote() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::WarrantQuote>* _internal_mutable_secu_quote();
  public:
  const ::longportapp::quote::v1::WarrantQuote& secu_quote(int index) const;
  ::longportapp::quote::v1::WarrantQuote* add_secu_quote();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::WarrantQuote >&
      secu_quote() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.WarrantQuoteResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::WarrantQuote > secu_quote_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse, std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse, std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse*>(
        &_UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "longportapp.quote.v1.UserQuoteLevelDetail.ByMarketCodeEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_quote_2fapi_2eproto;
};
// -------------------------------------------------------------------

class SecurityQuoteResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.SecurityQuoteResponse) */ {
 public:
  inline SecurityQuoteResponse() : SecurityQuoteResponse(nullptr) {}
  ~SecurityQuoteResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecurityQuoteResponse(::google::protobuf::internal::ConstantInitialized);

  inline SecurityQuoteResponse(const SecurityQuoteResponse& from)
      : SecurityQuoteResponse(nullptr, from) {}
  SecurityQuoteResponse(SecurityQuoteResponse&& from) noexcept
    : SecurityQuoteResponse() {
    *this = ::std::move(from);
  }

  inline SecurityQuoteResponse& operator=(const SecurityQuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityQuoteResponse& operator=(SecurityQuoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityQuoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityQuoteResponse* internal_default_instance() {
    return reinterpret_cast<const SecurityQuoteResponse*>(
               &_SecurityQuoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SecurityQuoteResponse& a, SecurityQuoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityQuoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityQuoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityQuoteResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityQuoteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SecurityQuoteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SecurityQuoteResponse& from) {
    SecurityQuoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SecurityQuoteResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.SecurityQuoteResponse";
  }
  protected:
  explicit SecurityQuoteResponse(::google::protobuf::Arena* arena);
  SecurityQuoteResponse(::google::protobuf::Arena* arena, const SecurityQuoteResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecuQuoteFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.SecurityQuote secu_quote = 1 [json_name = "secuQuote"];
  int secu_quote_size() const;
  private:
  int _internal_secu_quote_size() const;

  public:
  void clear_secu_quote() ;
  ::longportapp::quote::v1::SecurityQuote* mutable_secu_quote(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::SecurityQuote >*
      mutable_secu_quote();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityQuote>& _internal_secu_quote() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityQuote>* _internal_mutable_secu_quote();
  public:
  const ::longportapp::quote::v1::SecurityQuote& secu_quote(int index) const;
  ::longportapp::quote::v1::SecurityQuote* add_secu_quote();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::SecurityQuote >&
      secu_quote() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.SecurityQuoteResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::SecurityQuote > secu_quote_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class OptionQuoteResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.OptionQuoteResponse) */ {
 public:
  inline OptionQuoteResponse() : OptionQuoteResponse(nullptr) {}
  ~OptionQuoteResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionQuoteResponse(::google::protobuf::internal::ConstantInitialized);

  inline OptionQuoteResponse(const OptionQuoteResponse& from)
      : OptionQuoteResponse(nullptr, from) {}
  OptionQuoteResponse(OptionQuoteResponse&& from) noexcept
    : OptionQuoteResponse() {
    *this = ::std::move(from);
  }

  inline OptionQuoteResponse& operator=(const OptionQuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionQuoteResponse& operator=(OptionQuoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionQuoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionQuoteResponse* internal_default_instance() {
    return reinterpret_cast<const OptionQuoteResponse*>(
               &_OptionQuoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OptionQuoteResponse& a, OptionQuoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionQuoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionQuoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionQuoteResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionQuoteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptionQuoteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OptionQuoteResponse& from) {
    OptionQuoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionQuoteResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.OptionQuoteResponse";
  }
  protected:
  explicit OptionQuoteResponse(::google::protobuf::Arena* arena);
  OptionQuoteResponse(::google::protobuf::Arena* arena, const OptionQuoteResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecuQuoteFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.OptionQuote secu_quote = 1 [json_name = "secuQuote"];
  int secu_quote_size() const;
  private:
  int _internal_secu_quote_size() const;

  public:
  void clear_secu_quote() ;
  ::longportapp::quote::v1::OptionQuote* mutable_secu_quote(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::OptionQuote >*
      mutable_secu_quote();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::OptionQuote>& _internal_secu_quote() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::OptionQuote>* _internal_mutable_secu_quote();
  public:
  const ::longportapp::quote::v1::OptionQuote& secu_quote(int index) const;
  ::longportapp::quote::v1::OptionQuote* add_secu_quote();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::OptionQuote >&
      secu_quote() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.OptionQuoteResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::OptionQuote > secu_quote_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class MarketTradePeriodResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.MarketTradePeriodResponse) */ {
 public:
  inline MarketTradePeriodResponse() : MarketTradePeriodResponse(nullptr) {}
  ~MarketTradePeriodResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketTradePeriodResponse(::google::protobuf::internal::ConstantInitialized);

  inline MarketTradePeriodResponse(const MarketTradePeriodResponse& from)
      : MarketTradePeriodResponse(nullptr, from) {}
  MarketTradePeriodResponse(MarketTradePeriodResponse&& from) noexcept
    : MarketTradePeriodResponse() {
    *this = ::std::move(from);
  }

  inline MarketTradePeriodResponse& operator=(const MarketTradePeriodResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketTradePeriodResponse& operator=(MarketTradePeriodResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketTradePeriodResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketTradePeriodResponse* internal_default_instance() {
    return reinterpret_cast<const MarketTradePeriodResponse*>(
               &_MarketTradePeriodResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(MarketTradePeriodResponse& a, MarketTradePeriodResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketTradePeriodResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketTradePeriodResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketTradePeriodResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketTradePeriodResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketTradePeriodResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MarketTradePeriodResponse& from) {
    MarketTradePeriodResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MarketTradePeriodResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.MarketTradePeriodResponse";
  }
  protected:
  explicit MarketTradePeriodResponse(::google::protobuf::Arena* arena);
  MarketTradePeriodResponse(::google::protobuf::Arena* arena, const MarketTradePeriodResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketTradeSessionFieldNumber = 1,
  };
  // repeated .longportapp.quote.v1.MarketTradePeriod market_trade_session = 1 [json_name = "marketTradeSession"];
  int market_trade_session_size() const;
  private:
  int _internal_market_trade_session_size() const;

  public:
  void clear_market_trade_session() ;
  ::longportapp::quote::v1::MarketTradePeriod* mutable_market_trade_session(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::MarketTradePeriod >*
      mutable_market_trade_session();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::MarketTradePeriod>& _internal_market_trade_session() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::MarketTradePeriod>* _internal_mutable_market_trade_session();
  public:
  const ::longportapp::quote::v1::MarketTradePeriod& market_trade_session(int index) const;
  ::longportapp::quote::v1::MarketTradePeriod* add_market_trade_session();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::MarketTradePeriod >&
      market_trade_session() const;
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.MarketTradePeriodResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::MarketTradePeriod > market_trade_session_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class UserQuoteLevelDetail final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.UserQuoteLevelDetail) */ {
 public:
  inline UserQuoteLevelDetail() : UserQuoteLevelDetail(nullptr) {}
  ~UserQuoteLevelDetail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserQuoteLevelDetail(::google::protobuf::internal::ConstantInitialized);

  inline UserQuoteLevelDetail(const UserQuoteLevelDetail& from)
      : UserQuoteLevelDetail(nullptr, from) {}
  UserQuoteLevelDetail(UserQuoteLevelDetail&& from) noexcept
    : UserQuoteLevelDetail() {
    *this = ::std::move(from);
  }

  inline UserQuoteLevelDetail& operator=(const UserQuoteLevelDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQuoteLevelDetail& operator=(UserQuoteLevelDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserQuoteLevelDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserQuoteLevelDetail* internal_default_instance() {
    return reinterpret_cast<const UserQuoteLevelDetail*>(
               &_UserQuoteLevelDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(UserQuoteLevelDetail& a, UserQuoteLevelDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQuoteLevelDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQuoteLevelDetail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserQuoteLevelDetail* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserQuoteLevelDetail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserQuoteLevelDetail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserQuoteLevelDetail& from) {
    UserQuoteLevelDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserQuoteLevelDetail* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.UserQuoteLevelDetail";
  }
  protected:
  explicit UserQuoteLevelDetail(::google::protobuf::Arena* arena);
  UserQuoteLevelDetail(::google::protobuf::Arena* arena, const UserQuoteLevelDetail& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PackageDetail = UserQuoteLevelDetail_PackageDetail;
  using MarketPackageDetail = UserQuoteLevelDetail_MarketPackageDetail;

  // accessors -------------------------------------------------------

  enum : int {
    kByPackageKeyFieldNumber = 1,
    kByMarketCodeFieldNumber = 2,
  };
  // map<string, .longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail> by_package_key = 1 [json_name = "byPackageKey"];
  int by_package_key_size() const;
  private:
  int _internal_by_package_key_size() const;

  public:
  void clear_by_package_key() ;
  const ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>& by_package_key() const;
  ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>* mutable_by_package_key();

  private:
  const ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>& _internal_by_package_key() const;
  ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>* _internal_mutable_by_package_key();

  public:
  // map<string, .longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail> by_market_code = 2 [json_name = "byMarketCode"];
  int by_market_code_size() const;
  private:
  int _internal_by_market_code_size() const;

  public:
  void clear_by_market_code() ;
  const ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail>& by_market_code() const;
  ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail>* mutable_by_market_code();

  private:
  const ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail>& _internal_by_market_code() const;
  ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail>* _internal_mutable_by_market_code();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.UserQuoteLevelDetail)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 4,
      78, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<UserQuoteLevelDetail_ByPackageKeyEntry_DoNotUse, std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        by_package_key_;
    ::google::protobuf::internal::MapField<UserQuoteLevelDetail_ByMarketCodeEntry_DoNotUse, std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        by_market_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};// -------------------------------------------------------------------

class UserQuoteProfileResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.quote.v1.UserQuoteProfileResponse) */ {
 public:
  inline UserQuoteProfileResponse() : UserQuoteProfileResponse(nullptr) {}
  ~UserQuoteProfileResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserQuoteProfileResponse(::google::protobuf::internal::ConstantInitialized);

  inline UserQuoteProfileResponse(const UserQuoteProfileResponse& from)
      : UserQuoteProfileResponse(nullptr, from) {}
  UserQuoteProfileResponse(UserQuoteProfileResponse&& from) noexcept
    : UserQuoteProfileResponse() {
    *this = ::std::move(from);
  }

  inline UserQuoteProfileResponse& operator=(const UserQuoteProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQuoteProfileResponse& operator=(UserQuoteProfileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserQuoteProfileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserQuoteProfileResponse* internal_default_instance() {
    return reinterpret_cast<const UserQuoteProfileResponse*>(
               &_UserQuoteProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(UserQuoteProfileResponse& a, UserQuoteProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQuoteProfileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQuoteProfileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserQuoteProfileResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserQuoteProfileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserQuoteProfileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserQuoteProfileResponse& from) {
    UserQuoteProfileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserQuoteProfileResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.quote.v1.UserQuoteProfileResponse";
  }
  protected:
  explicit UserQuoteProfileResponse(::google::protobuf::Arena* arena);
  UserQuoteProfileResponse(::google::protobuf::Arena* arena, const UserQuoteProfileResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateLimitFieldNumber = 5,
    kQuoteLevelFieldNumber = 2,
    kQuoteLevelDetailFieldNumber = 6,
    kMemberIdFieldNumber = 1,
    kSubscribeLimitFieldNumber = 3,
    kHistoryCandlestickLimitFieldNumber = 4,
  };
  // repeated .longportapp.quote.v1.RateLimit rate_limit = 5 [json_name = "rateLimit"];
  int rate_limit_size() const;
  private:
  int _internal_rate_limit_size() const;

  public:
  void clear_rate_limit() ;
  ::longportapp::quote::v1::RateLimit* mutable_rate_limit(int index);
  ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::RateLimit >*
      mutable_rate_limit();
  private:
  const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::RateLimit>& _internal_rate_limit() const;
  ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::RateLimit>* _internal_mutable_rate_limit();
  public:
  const ::longportapp::quote::v1::RateLimit& rate_limit(int index) const;
  ::longportapp::quote::v1::RateLimit* add_rate_limit();
  const ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::RateLimit >&
      rate_limit() const;
  // string quote_level = 2 [json_name = "quoteLevel"];
  void clear_quote_level() ;
  const std::string& quote_level() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote_level(Arg_&& arg, Args_... args);
  std::string* mutable_quote_level();
  PROTOBUF_NODISCARD std::string* release_quote_level();
  void set_allocated_quote_level(std::string* value);

  private:
  const std::string& _internal_quote_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_level(
      const std::string& value);
  std::string* _internal_mutable_quote_level();

  public:
  // .longportapp.quote.v1.UserQuoteLevelDetail quote_level_detail = 6 [json_name = "quoteLevelDetail"];
  bool has_quote_level_detail() const;
  void clear_quote_level_detail() ;
  const ::longportapp::quote::v1::UserQuoteLevelDetail& quote_level_detail() const;
  PROTOBUF_NODISCARD ::longportapp::quote::v1::UserQuoteLevelDetail* release_quote_level_detail();
  ::longportapp::quote::v1::UserQuoteLevelDetail* mutable_quote_level_detail();
  void set_allocated_quote_level_detail(::longportapp::quote::v1::UserQuoteLevelDetail* value);
  void unsafe_arena_set_allocated_quote_level_detail(::longportapp::quote::v1::UserQuoteLevelDetail* value);
  ::longportapp::quote::v1::UserQuoteLevelDetail* unsafe_arena_release_quote_level_detail();

  private:
  const ::longportapp::quote::v1::UserQuoteLevelDetail& _internal_quote_level_detail() const;
  ::longportapp::quote::v1::UserQuoteLevelDetail* _internal_mutable_quote_level_detail();

  public:
  // int64 member_id = 1 [json_name = "memberId"];
  void clear_member_id() ;
  ::int64_t member_id() const;
  void set_member_id(::int64_t value);

  private:
  ::int64_t _internal_member_id() const;
  void _internal_set_member_id(::int64_t value);

  public:
  // int32 subscribe_limit = 3 [json_name = "subscribeLimit"];
  void clear_subscribe_limit() ;
  ::int32_t subscribe_limit() const;
  void set_subscribe_limit(::int32_t value);

  private:
  ::int32_t _internal_subscribe_limit() const;
  void _internal_set_subscribe_limit(::int32_t value);

  public:
  // int32 history_candlestick_limit = 4 [json_name = "historyCandlestickLimit"];
  void clear_history_candlestick_limit() ;
  ::int32_t history_candlestick_limit() const;
  void set_history_candlestick_limit(::int32_t value);

  private:
  ::int32_t _internal_history_candlestick_limit() const;
  void _internal_set_history_candlestick_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.quote.v1.UserQuoteProfileResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::longportapp::quote::v1::RateLimit > rate_limit_;
    ::google::protobuf::internal::ArenaStringPtr quote_level_;
    ::longportapp::quote::v1::UserQuoteLevelDetail* quote_level_detail_;
    ::int64_t member_id_;
    ::int32_t subscribe_limit_;
    ::int32_t history_candlestick_limit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quote_2fapi_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SecurityRequest

// string symbol = 1 [json_name = "symbol"];
inline void SecurityRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityRequest.symbol)
}
inline std::string* SecurityRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityRequest.symbol)
  return _s;
}
inline const std::string& SecurityRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityRequest::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityRequest::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityRequest::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityRequest.symbol)
}

// -------------------------------------------------------------------

// MultiSecurityRequest

// repeated string symbol = 1 [json_name = "symbol"];
inline int MultiSecurityRequest::_internal_symbol_size() const {
  return _internal_symbol().size();
}
inline int MultiSecurityRequest::symbol_size() const {
  return _internal_symbol_size();
}
inline void MultiSecurityRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.Clear();
}
inline std::string* MultiSecurityRequest::add_symbol()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_symbol()->Add();
  // @@protoc_insertion_point(field_add_mutable:longportapp.quote.v1.MultiSecurityRequest.symbol)
  return _s;
}
inline const std::string& MultiSecurityRequest::symbol(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.MultiSecurityRequest.symbol)
  return _internal_symbol().Get(index);
}
inline std::string* MultiSecurityRequest::mutable_symbol(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.MultiSecurityRequest.symbol)
  return _internal_mutable_symbol()->Mutable(index);
}
inline void MultiSecurityRequest::set_symbol(int index, const std::string& value) {
  _internal_mutable_symbol()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline void MultiSecurityRequest::set_symbol(int index, std::string&& value) {
  _internal_mutable_symbol()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline void MultiSecurityRequest::set_symbol(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbol()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline void MultiSecurityRequest::set_symbol(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_symbol()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline void MultiSecurityRequest::set_symbol(int index, absl::string_view value) {
  _internal_mutable_symbol()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline void MultiSecurityRequest::add_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline void MultiSecurityRequest::add_symbol(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline void MultiSecurityRequest::add_symbol(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline void MultiSecurityRequest::add_symbol(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline void MultiSecurityRequest::add_symbol(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:longportapp.quote.v1.MultiSecurityRequest.symbol)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MultiSecurityRequest::symbol() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.MultiSecurityRequest.symbol)
  return _internal_symbol();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MultiSecurityRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.MultiSecurityRequest.symbol)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_symbol();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MultiSecurityRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MultiSecurityRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.symbol_;
}

// -------------------------------------------------------------------

// SecurityStaticInfoResponse

// repeated .longportapp.quote.v1.StaticInfo secu_static_info = 1 [json_name = "secuStaticInfo"];
inline int SecurityStaticInfoResponse::_internal_secu_static_info_size() const {
  return _internal_secu_static_info().size();
}
inline int SecurityStaticInfoResponse::secu_static_info_size() const {
  return _internal_secu_static_info_size();
}
inline void SecurityStaticInfoResponse::clear_secu_static_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secu_static_info_.Clear();
}
inline ::longportapp::quote::v1::StaticInfo* SecurityStaticInfoResponse::mutable_secu_static_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityStaticInfoResponse.secu_static_info)
  return _internal_mutable_secu_static_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StaticInfo>* SecurityStaticInfoResponse::mutable_secu_static_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityStaticInfoResponse.secu_static_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_secu_static_info();
}
inline const ::longportapp::quote::v1::StaticInfo& SecurityStaticInfoResponse::secu_static_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityStaticInfoResponse.secu_static_info)
  return _internal_secu_static_info().Get(index);
}
inline ::longportapp::quote::v1::StaticInfo* SecurityStaticInfoResponse::add_secu_static_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::StaticInfo* _add = _internal_mutable_secu_static_info()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityStaticInfoResponse.secu_static_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StaticInfo>& SecurityStaticInfoResponse::secu_static_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityStaticInfoResponse.secu_static_info)
  return _internal_secu_static_info();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StaticInfo>&
SecurityStaticInfoResponse::_internal_secu_static_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secu_static_info_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StaticInfo>*
SecurityStaticInfoResponse::_internal_mutable_secu_static_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.secu_static_info_;
}

// -------------------------------------------------------------------

// StaticInfo

// string symbol = 1 [json_name = "symbol"];
inline void StaticInfo::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& StaticInfo::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.symbol)
}
inline std::string* StaticInfo::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.symbol)
  return _s;
}
inline const std::string& StaticInfo::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void StaticInfo::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.symbol)
  return _impl_.symbol_.Release();
}
inline void StaticInfo::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.symbol)
}

// string name_cn = 2 [json_name = "nameCn"];
inline void StaticInfo::clear_name_cn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_cn_.ClearToEmpty();
}
inline const std::string& StaticInfo::name_cn() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.name_cn)
  return _internal_name_cn();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_name_cn(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_cn_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.name_cn)
}
inline std::string* StaticInfo::mutable_name_cn() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_cn();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.name_cn)
  return _s;
}
inline const std::string& StaticInfo::_internal_name_cn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_cn_.Get();
}
inline void StaticInfo::_internal_set_name_cn(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_cn_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_name_cn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_cn_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_name_cn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.name_cn)
  return _impl_.name_cn_.Release();
}
inline void StaticInfo::set_allocated_name_cn(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_cn_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_cn_.IsDefault()) {
          _impl_.name_cn_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.name_cn)
}

// string name_en = 3 [json_name = "nameEn"];
inline void StaticInfo::clear_name_en() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_en_.ClearToEmpty();
}
inline const std::string& StaticInfo::name_en() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.name_en)
  return _internal_name_en();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_name_en(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_en_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.name_en)
}
inline std::string* StaticInfo::mutable_name_en() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_en();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.name_en)
  return _s;
}
inline const std::string& StaticInfo::_internal_name_en() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_en_.Get();
}
inline void StaticInfo::_internal_set_name_en(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_en_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_name_en() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_en_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_name_en() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.name_en)
  return _impl_.name_en_.Release();
}
inline void StaticInfo::set_allocated_name_en(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_en_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_en_.IsDefault()) {
          _impl_.name_en_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.name_en)
}

// string name_hk = 4 [json_name = "nameHk"];
inline void StaticInfo::clear_name_hk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_hk_.ClearToEmpty();
}
inline const std::string& StaticInfo::name_hk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.name_hk)
  return _internal_name_hk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_name_hk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_hk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.name_hk)
}
inline std::string* StaticInfo::mutable_name_hk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_hk();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.name_hk)
  return _s;
}
inline const std::string& StaticInfo::_internal_name_hk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_hk_.Get();
}
inline void StaticInfo::_internal_set_name_hk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_hk_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_name_hk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_hk_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_name_hk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.name_hk)
  return _impl_.name_hk_.Release();
}
inline void StaticInfo::set_allocated_name_hk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_hk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_hk_.IsDefault()) {
          _impl_.name_hk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.name_hk)
}

// string listing_date = 5 [json_name = "listingDate"];
inline void StaticInfo::clear_listing_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.listing_date_.ClearToEmpty();
}
inline const std::string& StaticInfo::listing_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.listing_date)
  return _internal_listing_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_listing_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.listing_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.listing_date)
}
inline std::string* StaticInfo::mutable_listing_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_listing_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.listing_date)
  return _s;
}
inline const std::string& StaticInfo::_internal_listing_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.listing_date_.Get();
}
inline void StaticInfo::_internal_set_listing_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.listing_date_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_listing_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.listing_date_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_listing_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.listing_date)
  return _impl_.listing_date_.Release();
}
inline void StaticInfo::set_allocated_listing_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.listing_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.listing_date_.IsDefault()) {
          _impl_.listing_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.listing_date)
}

// string exchange = 6 [json_name = "exchange"];
inline void StaticInfo::clear_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& StaticInfo::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.exchange)
}
inline std::string* StaticInfo::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.exchange)
  return _s;
}
inline const std::string& StaticInfo::_internal_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_.Get();
}
inline void StaticInfo::_internal_set_exchange(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.exchange)
  return _impl_.exchange_.Release();
}
inline void StaticInfo::set_allocated_exchange(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_.IsDefault()) {
          _impl_.exchange_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.exchange)
}

// string currency = 7 [json_name = "currency"];
inline void StaticInfo::clear_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& StaticInfo::currency() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_currency(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.currency)
}
inline std::string* StaticInfo::mutable_currency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.currency)
  return _s;
}
inline const std::string& StaticInfo::_internal_currency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currency_.Get();
}
inline void StaticInfo::_internal_set_currency(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.currency_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.currency_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_currency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.currency)
  return _impl_.currency_.Release();
}
inline void StaticInfo::set_allocated_currency(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currency_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.currency)
}

// int32 lot_size = 8 [json_name = "lotSize"];
inline void StaticInfo::clear_lot_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lot_size_ = 0;
}
inline ::int32_t StaticInfo::lot_size() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.lot_size)
  return _internal_lot_size();
}
inline void StaticInfo::set_lot_size(::int32_t value) {
  _internal_set_lot_size(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.lot_size)
}
inline ::int32_t StaticInfo::_internal_lot_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lot_size_;
}
inline void StaticInfo::_internal_set_lot_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lot_size_ = value;
}

// int64 total_shares = 9 [json_name = "totalShares"];
inline void StaticInfo::clear_total_shares() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_shares_ = ::int64_t{0};
}
inline ::int64_t StaticInfo::total_shares() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.total_shares)
  return _internal_total_shares();
}
inline void StaticInfo::set_total_shares(::int64_t value) {
  _internal_set_total_shares(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.total_shares)
}
inline ::int64_t StaticInfo::_internal_total_shares() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_shares_;
}
inline void StaticInfo::_internal_set_total_shares(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_shares_ = value;
}

// int64 circulating_shares = 10 [json_name = "circulatingShares"];
inline void StaticInfo::clear_circulating_shares() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.circulating_shares_ = ::int64_t{0};
}
inline ::int64_t StaticInfo::circulating_shares() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.circulating_shares)
  return _internal_circulating_shares();
}
inline void StaticInfo::set_circulating_shares(::int64_t value) {
  _internal_set_circulating_shares(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.circulating_shares)
}
inline ::int64_t StaticInfo::_internal_circulating_shares() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.circulating_shares_;
}
inline void StaticInfo::_internal_set_circulating_shares(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.circulating_shares_ = value;
}

// int64 hk_shares = 11 [json_name = "hkShares"];
inline void StaticInfo::clear_hk_shares() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hk_shares_ = ::int64_t{0};
}
inline ::int64_t StaticInfo::hk_shares() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.hk_shares)
  return _internal_hk_shares();
}
inline void StaticInfo::set_hk_shares(::int64_t value) {
  _internal_set_hk_shares(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.hk_shares)
}
inline ::int64_t StaticInfo::_internal_hk_shares() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hk_shares_;
}
inline void StaticInfo::_internal_set_hk_shares(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hk_shares_ = value;
}

// string eps = 12 [json_name = "eps"];
inline void StaticInfo::clear_eps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eps_.ClearToEmpty();
}
inline const std::string& StaticInfo::eps() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.eps)
  return _internal_eps();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_eps(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eps_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.eps)
}
inline std::string* StaticInfo::mutable_eps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_eps();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.eps)
  return _s;
}
inline const std::string& StaticInfo::_internal_eps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eps_.Get();
}
inline void StaticInfo::_internal_set_eps(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eps_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_eps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.eps_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_eps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.eps)
  return _impl_.eps_.Release();
}
inline void StaticInfo::set_allocated_eps(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eps_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.eps_.IsDefault()) {
          _impl_.eps_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.eps)
}

// string eps_ttm = 13 [json_name = "epsTtm"];
inline void StaticInfo::clear_eps_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eps_ttm_.ClearToEmpty();
}
inline const std::string& StaticInfo::eps_ttm() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.eps_ttm)
  return _internal_eps_ttm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_eps_ttm(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eps_ttm_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.eps_ttm)
}
inline std::string* StaticInfo::mutable_eps_ttm() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_eps_ttm();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.eps_ttm)
  return _s;
}
inline const std::string& StaticInfo::_internal_eps_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eps_ttm_.Get();
}
inline void StaticInfo::_internal_set_eps_ttm(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eps_ttm_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_eps_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.eps_ttm_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_eps_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.eps_ttm)
  return _impl_.eps_ttm_.Release();
}
inline void StaticInfo::set_allocated_eps_ttm(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eps_ttm_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.eps_ttm_.IsDefault()) {
          _impl_.eps_ttm_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.eps_ttm)
}

// string bps = 14 [json_name = "bps"];
inline void StaticInfo::clear_bps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bps_.ClearToEmpty();
}
inline const std::string& StaticInfo::bps() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.bps)
  return _internal_bps();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_bps(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bps_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.bps)
}
inline std::string* StaticInfo::mutable_bps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bps();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.bps)
  return _s;
}
inline const std::string& StaticInfo::_internal_bps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bps_.Get();
}
inline void StaticInfo::_internal_set_bps(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bps_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_bps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bps_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_bps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.bps)
  return _impl_.bps_.Release();
}
inline void StaticInfo::set_allocated_bps(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bps_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bps_.IsDefault()) {
          _impl_.bps_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.bps)
}

// string dividend_yield = 15 [json_name = "dividendYield"];
inline void StaticInfo::clear_dividend_yield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividend_yield_.ClearToEmpty();
}
inline const std::string& StaticInfo::dividend_yield() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.dividend_yield)
  return _internal_dividend_yield();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_dividend_yield(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividend_yield_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.dividend_yield)
}
inline std::string* StaticInfo::mutable_dividend_yield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dividend_yield();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.dividend_yield)
  return _s;
}
inline const std::string& StaticInfo::_internal_dividend_yield() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dividend_yield_.Get();
}
inline void StaticInfo::_internal_set_dividend_yield(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividend_yield_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_dividend_yield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.dividend_yield_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_dividend_yield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.dividend_yield)
  return _impl_.dividend_yield_.Release();
}
inline void StaticInfo::set_allocated_dividend_yield(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividend_yield_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dividend_yield_.IsDefault()) {
          _impl_.dividend_yield_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.dividend_yield)
}

// repeated int32 stock_derivatives = 16 [json_name = "stockDerivatives"];
inline int StaticInfo::_internal_stock_derivatives_size() const {
  return _internal_stock_derivatives().size();
}
inline int StaticInfo::stock_derivatives_size() const {
  return _internal_stock_derivatives_size();
}
inline void StaticInfo::clear_stock_derivatives() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stock_derivatives_.Clear();
}
inline ::int32_t StaticInfo::stock_derivatives(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.stock_derivatives)
  return _internal_stock_derivatives().Get(index);
}
inline void StaticInfo::set_stock_derivatives(int index, ::int32_t value) {
  _internal_mutable_stock_derivatives()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.stock_derivatives)
}
inline void StaticInfo::add_stock_derivatives(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stock_derivatives()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.StaticInfo.stock_derivatives)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& StaticInfo::stock_derivatives() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.StaticInfo.stock_derivatives)
  return _internal_stock_derivatives();
}
inline ::google::protobuf::RepeatedField<::int32_t>* StaticInfo::mutable_stock_derivatives()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.StaticInfo.stock_derivatives)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_stock_derivatives();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& StaticInfo::_internal_stock_derivatives()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stock_derivatives_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* StaticInfo::_internal_mutable_stock_derivatives() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.stock_derivatives_;
}

// string board = 17 [json_name = "board"];
inline void StaticInfo::clear_board() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.board_.ClearToEmpty();
}
inline const std::string& StaticInfo::board() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StaticInfo.board)
  return _internal_board();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StaticInfo::set_board(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.board_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StaticInfo.board)
}
inline std::string* StaticInfo::mutable_board() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_board();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StaticInfo.board)
  return _s;
}
inline const std::string& StaticInfo::_internal_board() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.board_.Get();
}
inline void StaticInfo::_internal_set_board(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.board_.Set(value, GetArena());
}
inline std::string* StaticInfo::_internal_mutable_board() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.board_.Mutable( GetArena());
}
inline std::string* StaticInfo::release_board() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StaticInfo.board)
  return _impl_.board_.Release();
}
inline void StaticInfo::set_allocated_board(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.board_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.board_.IsDefault()) {
          _impl_.board_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StaticInfo.board)
}

// -------------------------------------------------------------------

// SecurityQuoteResponse

// repeated .longportapp.quote.v1.SecurityQuote secu_quote = 1 [json_name = "secuQuote"];
inline int SecurityQuoteResponse::_internal_secu_quote_size() const {
  return _internal_secu_quote().size();
}
inline int SecurityQuoteResponse::secu_quote_size() const {
  return _internal_secu_quote_size();
}
inline void SecurityQuoteResponse::clear_secu_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secu_quote_.Clear();
}
inline ::longportapp::quote::v1::SecurityQuote* SecurityQuoteResponse::mutable_secu_quote(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuoteResponse.secu_quote)
  return _internal_mutable_secu_quote()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityQuote>* SecurityQuoteResponse::mutable_secu_quote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityQuoteResponse.secu_quote)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_secu_quote();
}
inline const ::longportapp::quote::v1::SecurityQuote& SecurityQuoteResponse::secu_quote(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuoteResponse.secu_quote)
  return _internal_secu_quote().Get(index);
}
inline ::longportapp::quote::v1::SecurityQuote* SecurityQuoteResponse::add_secu_quote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::SecurityQuote* _add = _internal_mutable_secu_quote()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityQuoteResponse.secu_quote)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityQuote>& SecurityQuoteResponse::secu_quote() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityQuoteResponse.secu_quote)
  return _internal_secu_quote();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityQuote>&
SecurityQuoteResponse::_internal_secu_quote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secu_quote_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityQuote>*
SecurityQuoteResponse::_internal_mutable_secu_quote() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.secu_quote_;
}

// -------------------------------------------------------------------

// SecurityQuote

// string symbol = 1 [json_name = "symbol"];
inline void SecurityQuote::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityQuote::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityQuote::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.symbol)
}
inline std::string* SecurityQuote::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.symbol)
  return _s;
}
inline const std::string& SecurityQuote::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityQuote::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityQuote::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityQuote::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityQuote::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.symbol)
}

// string last_done = 2 [json_name = "lastDone"];
inline void SecurityQuote::clear_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.ClearToEmpty();
}
inline const std::string& SecurityQuote::last_done() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.last_done)
  return _internal_last_done();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityQuote::set_last_done(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.last_done)
}
inline std::string* SecurityQuote::mutable_last_done() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_done();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.last_done)
  return _s;
}
inline const std::string& SecurityQuote::_internal_last_done() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_done_.Get();
}
inline void SecurityQuote::_internal_set_last_done(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(value, GetArena());
}
inline std::string* SecurityQuote::_internal_mutable_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_done_.Mutable( GetArena());
}
inline std::string* SecurityQuote::release_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.last_done)
  return _impl_.last_done_.Release();
}
inline void SecurityQuote::set_allocated_last_done(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_done_.IsDefault()) {
          _impl_.last_done_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.last_done)
}

// string prev_close = 3 [json_name = "prevClose"];
inline void SecurityQuote::clear_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prev_close_.ClearToEmpty();
}
inline const std::string& SecurityQuote::prev_close() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.prev_close)
  return _internal_prev_close();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityQuote::set_prev_close(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prev_close_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.prev_close)
}
inline std::string* SecurityQuote::mutable_prev_close() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prev_close();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.prev_close)
  return _s;
}
inline const std::string& SecurityQuote::_internal_prev_close() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prev_close_.Get();
}
inline void SecurityQuote::_internal_set_prev_close(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prev_close_.Set(value, GetArena());
}
inline std::string* SecurityQuote::_internal_mutable_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.prev_close_.Mutable( GetArena());
}
inline std::string* SecurityQuote::release_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.prev_close)
  return _impl_.prev_close_.Release();
}
inline void SecurityQuote::set_allocated_prev_close(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prev_close_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prev_close_.IsDefault()) {
          _impl_.prev_close_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.prev_close)
}

// string open = 4 [json_name = "open"];
inline void SecurityQuote::clear_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.ClearToEmpty();
}
inline const std::string& SecurityQuote::open() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.open)
  return _internal_open();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityQuote::set_open(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.open)
}
inline std::string* SecurityQuote::mutable_open() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.open)
  return _s;
}
inline const std::string& SecurityQuote::_internal_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_.Get();
}
inline void SecurityQuote::_internal_set_open(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(value, GetArena());
}
inline std::string* SecurityQuote::_internal_mutable_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_.Mutable( GetArena());
}
inline std::string* SecurityQuote::release_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.open)
  return _impl_.open_.Release();
}
inline void SecurityQuote::set_allocated_open(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_.IsDefault()) {
          _impl_.open_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.open)
}

// string high = 5 [json_name = "high"];
inline void SecurityQuote::clear_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.ClearToEmpty();
}
inline const std::string& SecurityQuote::high() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.high)
  return _internal_high();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityQuote::set_high(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.high)
}
inline std::string* SecurityQuote::mutable_high() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_high();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.high)
  return _s;
}
inline const std::string& SecurityQuote::_internal_high() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.high_.Get();
}
inline void SecurityQuote::_internal_set_high(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(value, GetArena());
}
inline std::string* SecurityQuote::_internal_mutable_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.high_.Mutable( GetArena());
}
inline std::string* SecurityQuote::release_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.high)
  return _impl_.high_.Release();
}
inline void SecurityQuote::set_allocated_high(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.high_.IsDefault()) {
          _impl_.high_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.high)
}

// string low = 6 [json_name = "low"];
inline void SecurityQuote::clear_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.ClearToEmpty();
}
inline const std::string& SecurityQuote::low() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.low)
  return _internal_low();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityQuote::set_low(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.low)
}
inline std::string* SecurityQuote::mutable_low() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_low();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.low)
  return _s;
}
inline const std::string& SecurityQuote::_internal_low() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.low_.Get();
}
inline void SecurityQuote::_internal_set_low(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(value, GetArena());
}
inline std::string* SecurityQuote::_internal_mutable_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.low_.Mutable( GetArena());
}
inline std::string* SecurityQuote::release_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.low)
  return _impl_.low_.Release();
}
inline void SecurityQuote::set_allocated_low(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.low_.IsDefault()) {
          _impl_.low_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.low)
}

// int64 timestamp = 7 [json_name = "timestamp"];
inline void SecurityQuote::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t SecurityQuote::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.timestamp)
  return _internal_timestamp();
}
inline void SecurityQuote::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.timestamp)
}
inline ::int64_t SecurityQuote::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void SecurityQuote::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// int64 volume = 8 [json_name = "volume"];
inline void SecurityQuote::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t SecurityQuote::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.volume)
  return _internal_volume();
}
inline void SecurityQuote::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.volume)
}
inline ::int64_t SecurityQuote::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void SecurityQuote::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// string turnover = 9 [json_name = "turnover"];
inline void SecurityQuote::clear_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.ClearToEmpty();
}
inline const std::string& SecurityQuote::turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.turnover)
  return _internal_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityQuote::set_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.turnover)
}
inline std::string* SecurityQuote::mutable_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.turnover)
  return _s;
}
inline const std::string& SecurityQuote::_internal_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_.Get();
}
inline void SecurityQuote::_internal_set_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(value, GetArena());
}
inline std::string* SecurityQuote::_internal_mutable_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_.Mutable( GetArena());
}
inline std::string* SecurityQuote::release_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.turnover)
  return _impl_.turnover_.Release();
}
inline void SecurityQuote::set_allocated_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_.IsDefault()) {
          _impl_.turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.turnover)
}

// .longportapp.quote.v1.TradeStatus trade_status = 10 [json_name = "tradeStatus"];
inline void SecurityQuote::clear_trade_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_status_ = 0;
}
inline ::longportapp::quote::v1::TradeStatus SecurityQuote::trade_status() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.trade_status)
  return _internal_trade_status();
}
inline void SecurityQuote::set_trade_status(::longportapp::quote::v1::TradeStatus value) {
  _internal_set_trade_status(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityQuote.trade_status)
}
inline ::longportapp::quote::v1::TradeStatus SecurityQuote::_internal_trade_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::TradeStatus>(_impl_.trade_status_);
}
inline void SecurityQuote::_internal_set_trade_status(::longportapp::quote::v1::TradeStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_status_ = value;
}

// .longportapp.quote.v1.PrePostQuote pre_market_quote = 11 [json_name = "preMarketQuote"];
inline bool SecurityQuote::has_pre_market_quote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pre_market_quote_ != nullptr);
  return value;
}
inline void SecurityQuote::clear_pre_market_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pre_market_quote_ != nullptr) _impl_.pre_market_quote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::longportapp::quote::v1::PrePostQuote& SecurityQuote::_internal_pre_market_quote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::PrePostQuote* p = _impl_.pre_market_quote_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::PrePostQuote&>(::longportapp::quote::v1::_PrePostQuote_default_instance_);
}
inline const ::longportapp::quote::v1::PrePostQuote& SecurityQuote::pre_market_quote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.pre_market_quote)
  return _internal_pre_market_quote();
}
inline void SecurityQuote::unsafe_arena_set_allocated_pre_market_quote(::longportapp::quote::v1::PrePostQuote* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pre_market_quote_);
  }
  _impl_.pre_market_quote_ = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.SecurityQuote.pre_market_quote)
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::release_pre_market_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::PrePostQuote* released = _impl_.pre_market_quote_;
  _impl_.pre_market_quote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::unsafe_arena_release_pre_market_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.pre_market_quote)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::PrePostQuote* temp = _impl_.pre_market_quote_;
  _impl_.pre_market_quote_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::_internal_mutable_pre_market_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pre_market_quote_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::PrePostQuote>(GetArena());
    _impl_.pre_market_quote_ = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(p);
  }
  return _impl_.pre_market_quote_;
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::mutable_pre_market_quote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::PrePostQuote* _msg = _internal_mutable_pre_market_quote();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.pre_market_quote)
  return _msg;
}
inline void SecurityQuote::set_allocated_pre_market_quote(::longportapp::quote::v1::PrePostQuote* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(_impl_.pre_market_quote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pre_market_quote_ = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.pre_market_quote)
}

// .longportapp.quote.v1.PrePostQuote post_market_quote = 12 [json_name = "postMarketQuote"];
inline bool SecurityQuote::has_post_market_quote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_market_quote_ != nullptr);
  return value;
}
inline void SecurityQuote::clear_post_market_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.post_market_quote_ != nullptr) _impl_.post_market_quote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::longportapp::quote::v1::PrePostQuote& SecurityQuote::_internal_post_market_quote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::PrePostQuote* p = _impl_.post_market_quote_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::PrePostQuote&>(::longportapp::quote::v1::_PrePostQuote_default_instance_);
}
inline const ::longportapp::quote::v1::PrePostQuote& SecurityQuote::post_market_quote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.post_market_quote)
  return _internal_post_market_quote();
}
inline void SecurityQuote::unsafe_arena_set_allocated_post_market_quote(::longportapp::quote::v1::PrePostQuote* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_market_quote_);
  }
  _impl_.post_market_quote_ = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.SecurityQuote.post_market_quote)
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::release_post_market_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::longportapp::quote::v1::PrePostQuote* released = _impl_.post_market_quote_;
  _impl_.post_market_quote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::unsafe_arena_release_post_market_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.post_market_quote)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::longportapp::quote::v1::PrePostQuote* temp = _impl_.post_market_quote_;
  _impl_.post_market_quote_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::_internal_mutable_post_market_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.post_market_quote_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::PrePostQuote>(GetArena());
    _impl_.post_market_quote_ = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(p);
  }
  return _impl_.post_market_quote_;
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::mutable_post_market_quote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::PrePostQuote* _msg = _internal_mutable_post_market_quote();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.post_market_quote)
  return _msg;
}
inline void SecurityQuote::set_allocated_post_market_quote(::longportapp::quote::v1::PrePostQuote* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(_impl_.post_market_quote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.post_market_quote_ = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.post_market_quote)
}

// .longportapp.quote.v1.PrePostQuote over_night_quote = 13 [json_name = "overNightQuote"];
inline bool SecurityQuote::has_over_night_quote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.over_night_quote_ != nullptr);
  return value;
}
inline void SecurityQuote::clear_over_night_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.over_night_quote_ != nullptr) _impl_.over_night_quote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::longportapp::quote::v1::PrePostQuote& SecurityQuote::_internal_over_night_quote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::PrePostQuote* p = _impl_.over_night_quote_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::PrePostQuote&>(::longportapp::quote::v1::_PrePostQuote_default_instance_);
}
inline const ::longportapp::quote::v1::PrePostQuote& SecurityQuote::over_night_quote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityQuote.over_night_quote)
  return _internal_over_night_quote();
}
inline void SecurityQuote::unsafe_arena_set_allocated_over_night_quote(::longportapp::quote::v1::PrePostQuote* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.over_night_quote_);
  }
  _impl_.over_night_quote_ = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.SecurityQuote.over_night_quote)
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::release_over_night_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::longportapp::quote::v1::PrePostQuote* released = _impl_.over_night_quote_;
  _impl_.over_night_quote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::unsafe_arena_release_over_night_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityQuote.over_night_quote)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::longportapp::quote::v1::PrePostQuote* temp = _impl_.over_night_quote_;
  _impl_.over_night_quote_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::_internal_mutable_over_night_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.over_night_quote_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::PrePostQuote>(GetArena());
    _impl_.over_night_quote_ = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(p);
  }
  return _impl_.over_night_quote_;
}
inline ::longportapp::quote::v1::PrePostQuote* SecurityQuote::mutable_over_night_quote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::PrePostQuote* _msg = _internal_mutable_over_night_quote();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityQuote.over_night_quote)
  return _msg;
}
inline void SecurityQuote::set_allocated_over_night_quote(::longportapp::quote::v1::PrePostQuote* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(_impl_.over_night_quote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.over_night_quote_ = reinterpret_cast<::longportapp::quote::v1::PrePostQuote*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityQuote.over_night_quote)
}

// -------------------------------------------------------------------

// PrePostQuote

// string last_done = 1 [json_name = "lastDone"];
inline void PrePostQuote::clear_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.ClearToEmpty();
}
inline const std::string& PrePostQuote::last_done() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PrePostQuote.last_done)
  return _internal_last_done();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrePostQuote::set_last_done(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PrePostQuote.last_done)
}
inline std::string* PrePostQuote::mutable_last_done() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_done();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PrePostQuote.last_done)
  return _s;
}
inline const std::string& PrePostQuote::_internal_last_done() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_done_.Get();
}
inline void PrePostQuote::_internal_set_last_done(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(value, GetArena());
}
inline std::string* PrePostQuote::_internal_mutable_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_done_.Mutable( GetArena());
}
inline std::string* PrePostQuote::release_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PrePostQuote.last_done)
  return _impl_.last_done_.Release();
}
inline void PrePostQuote::set_allocated_last_done(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_done_.IsDefault()) {
          _impl_.last_done_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PrePostQuote.last_done)
}

// int64 timestamp = 2 [json_name = "timestamp"];
inline void PrePostQuote::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t PrePostQuote::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PrePostQuote.timestamp)
  return _internal_timestamp();
}
inline void PrePostQuote::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PrePostQuote.timestamp)
}
inline ::int64_t PrePostQuote::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void PrePostQuote::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// int64 volume = 3 [json_name = "volume"];
inline void PrePostQuote::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t PrePostQuote::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PrePostQuote.volume)
  return _internal_volume();
}
inline void PrePostQuote::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PrePostQuote.volume)
}
inline ::int64_t PrePostQuote::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void PrePostQuote::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// string turnover = 4 [json_name = "turnover"];
inline void PrePostQuote::clear_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.ClearToEmpty();
}
inline const std::string& PrePostQuote::turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PrePostQuote.turnover)
  return _internal_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrePostQuote::set_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PrePostQuote.turnover)
}
inline std::string* PrePostQuote::mutable_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PrePostQuote.turnover)
  return _s;
}
inline const std::string& PrePostQuote::_internal_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_.Get();
}
inline void PrePostQuote::_internal_set_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(value, GetArena());
}
inline std::string* PrePostQuote::_internal_mutable_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_.Mutable( GetArena());
}
inline std::string* PrePostQuote::release_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PrePostQuote.turnover)
  return _impl_.turnover_.Release();
}
inline void PrePostQuote::set_allocated_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_.IsDefault()) {
          _impl_.turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PrePostQuote.turnover)
}

// string high = 5 [json_name = "high"];
inline void PrePostQuote::clear_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.ClearToEmpty();
}
inline const std::string& PrePostQuote::high() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PrePostQuote.high)
  return _internal_high();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrePostQuote::set_high(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PrePostQuote.high)
}
inline std::string* PrePostQuote::mutable_high() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_high();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PrePostQuote.high)
  return _s;
}
inline const std::string& PrePostQuote::_internal_high() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.high_.Get();
}
inline void PrePostQuote::_internal_set_high(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(value, GetArena());
}
inline std::string* PrePostQuote::_internal_mutable_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.high_.Mutable( GetArena());
}
inline std::string* PrePostQuote::release_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PrePostQuote.high)
  return _impl_.high_.Release();
}
inline void PrePostQuote::set_allocated_high(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.high_.IsDefault()) {
          _impl_.high_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PrePostQuote.high)
}

// string low = 6 [json_name = "low"];
inline void PrePostQuote::clear_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.ClearToEmpty();
}
inline const std::string& PrePostQuote::low() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PrePostQuote.low)
  return _internal_low();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrePostQuote::set_low(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PrePostQuote.low)
}
inline std::string* PrePostQuote::mutable_low() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_low();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PrePostQuote.low)
  return _s;
}
inline const std::string& PrePostQuote::_internal_low() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.low_.Get();
}
inline void PrePostQuote::_internal_set_low(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(value, GetArena());
}
inline std::string* PrePostQuote::_internal_mutable_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.low_.Mutable( GetArena());
}
inline std::string* PrePostQuote::release_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PrePostQuote.low)
  return _impl_.low_.Release();
}
inline void PrePostQuote::set_allocated_low(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.low_.IsDefault()) {
          _impl_.low_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PrePostQuote.low)
}

// string prev_close = 7 [json_name = "prevClose"];
inline void PrePostQuote::clear_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prev_close_.ClearToEmpty();
}
inline const std::string& PrePostQuote::prev_close() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PrePostQuote.prev_close)
  return _internal_prev_close();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrePostQuote::set_prev_close(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prev_close_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PrePostQuote.prev_close)
}
inline std::string* PrePostQuote::mutable_prev_close() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prev_close();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PrePostQuote.prev_close)
  return _s;
}
inline const std::string& PrePostQuote::_internal_prev_close() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prev_close_.Get();
}
inline void PrePostQuote::_internal_set_prev_close(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prev_close_.Set(value, GetArena());
}
inline std::string* PrePostQuote::_internal_mutable_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.prev_close_.Mutable( GetArena());
}
inline std::string* PrePostQuote::release_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PrePostQuote.prev_close)
  return _impl_.prev_close_.Release();
}
inline void PrePostQuote::set_allocated_prev_close(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prev_close_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prev_close_.IsDefault()) {
          _impl_.prev_close_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PrePostQuote.prev_close)
}

// -------------------------------------------------------------------

// OptionQuoteResponse

// repeated .longportapp.quote.v1.OptionQuote secu_quote = 1 [json_name = "secuQuote"];
inline int OptionQuoteResponse::_internal_secu_quote_size() const {
  return _internal_secu_quote().size();
}
inline int OptionQuoteResponse::secu_quote_size() const {
  return _internal_secu_quote_size();
}
inline void OptionQuoteResponse::clear_secu_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secu_quote_.Clear();
}
inline ::longportapp::quote::v1::OptionQuote* OptionQuoteResponse::mutable_secu_quote(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionQuoteResponse.secu_quote)
  return _internal_mutable_secu_quote()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::OptionQuote>* OptionQuoteResponse::mutable_secu_quote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.OptionQuoteResponse.secu_quote)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_secu_quote();
}
inline const ::longportapp::quote::v1::OptionQuote& OptionQuoteResponse::secu_quote(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuoteResponse.secu_quote)
  return _internal_secu_quote().Get(index);
}
inline ::longportapp::quote::v1::OptionQuote* OptionQuoteResponse::add_secu_quote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::OptionQuote* _add = _internal_mutable_secu_quote()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.OptionQuoteResponse.secu_quote)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::OptionQuote>& OptionQuoteResponse::secu_quote() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.OptionQuoteResponse.secu_quote)
  return _internal_secu_quote();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::OptionQuote>&
OptionQuoteResponse::_internal_secu_quote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secu_quote_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::OptionQuote>*
OptionQuoteResponse::_internal_mutable_secu_quote() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.secu_quote_;
}

// -------------------------------------------------------------------

// OptionQuote

// string symbol = 1 [json_name = "symbol"];
inline void OptionQuote::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& OptionQuote::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionQuote::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.symbol)
}
inline std::string* OptionQuote::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionQuote.symbol)
  return _s;
}
inline const std::string& OptionQuote::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void OptionQuote::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* OptionQuote::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* OptionQuote::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionQuote.symbol)
  return _impl_.symbol_.Release();
}
inline void OptionQuote::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionQuote.symbol)
}

// string last_done = 2 [json_name = "lastDone"];
inline void OptionQuote::clear_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.ClearToEmpty();
}
inline const std::string& OptionQuote::last_done() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.last_done)
  return _internal_last_done();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionQuote::set_last_done(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.last_done)
}
inline std::string* OptionQuote::mutable_last_done() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_done();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionQuote.last_done)
  return _s;
}
inline const std::string& OptionQuote::_internal_last_done() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_done_.Get();
}
inline void OptionQuote::_internal_set_last_done(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(value, GetArena());
}
inline std::string* OptionQuote::_internal_mutable_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_done_.Mutable( GetArena());
}
inline std::string* OptionQuote::release_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionQuote.last_done)
  return _impl_.last_done_.Release();
}
inline void OptionQuote::set_allocated_last_done(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_done_.IsDefault()) {
          _impl_.last_done_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionQuote.last_done)
}

// string prev_close = 3 [json_name = "prevClose"];
inline void OptionQuote::clear_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prev_close_.ClearToEmpty();
}
inline const std::string& OptionQuote::prev_close() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.prev_close)
  return _internal_prev_close();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionQuote::set_prev_close(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prev_close_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.prev_close)
}
inline std::string* OptionQuote::mutable_prev_close() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prev_close();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionQuote.prev_close)
  return _s;
}
inline const std::string& OptionQuote::_internal_prev_close() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prev_close_.Get();
}
inline void OptionQuote::_internal_set_prev_close(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prev_close_.Set(value, GetArena());
}
inline std::string* OptionQuote::_internal_mutable_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.prev_close_.Mutable( GetArena());
}
inline std::string* OptionQuote::release_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionQuote.prev_close)
  return _impl_.prev_close_.Release();
}
inline void OptionQuote::set_allocated_prev_close(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prev_close_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prev_close_.IsDefault()) {
          _impl_.prev_close_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionQuote.prev_close)
}

// string open = 4 [json_name = "open"];
inline void OptionQuote::clear_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.ClearToEmpty();
}
inline const std::string& OptionQuote::open() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.open)
  return _internal_open();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionQuote::set_open(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.open)
}
inline std::string* OptionQuote::mutable_open() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionQuote.open)
  return _s;
}
inline const std::string& OptionQuote::_internal_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_.Get();
}
inline void OptionQuote::_internal_set_open(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(value, GetArena());
}
inline std::string* OptionQuote::_internal_mutable_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_.Mutable( GetArena());
}
inline std::string* OptionQuote::release_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionQuote.open)
  return _impl_.open_.Release();
}
inline void OptionQuote::set_allocated_open(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_.IsDefault()) {
          _impl_.open_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionQuote.open)
}

// string high = 5 [json_name = "high"];
inline void OptionQuote::clear_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.ClearToEmpty();
}
inline const std::string& OptionQuote::high() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.high)
  return _internal_high();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionQuote::set_high(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.high)
}
inline std::string* OptionQuote::mutable_high() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_high();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionQuote.high)
  return _s;
}
inline const std::string& OptionQuote::_internal_high() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.high_.Get();
}
inline void OptionQuote::_internal_set_high(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(value, GetArena());
}
inline std::string* OptionQuote::_internal_mutable_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.high_.Mutable( GetArena());
}
inline std::string* OptionQuote::release_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionQuote.high)
  return _impl_.high_.Release();
}
inline void OptionQuote::set_allocated_high(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.high_.IsDefault()) {
          _impl_.high_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionQuote.high)
}

// string low = 6 [json_name = "low"];
inline void OptionQuote::clear_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.ClearToEmpty();
}
inline const std::string& OptionQuote::low() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.low)
  return _internal_low();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionQuote::set_low(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.low)
}
inline std::string* OptionQuote::mutable_low() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_low();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionQuote.low)
  return _s;
}
inline const std::string& OptionQuote::_internal_low() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.low_.Get();
}
inline void OptionQuote::_internal_set_low(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(value, GetArena());
}
inline std::string* OptionQuote::_internal_mutable_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.low_.Mutable( GetArena());
}
inline std::string* OptionQuote::release_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionQuote.low)
  return _impl_.low_.Release();
}
inline void OptionQuote::set_allocated_low(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.low_.IsDefault()) {
          _impl_.low_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionQuote.low)
}

// int64 timestamp = 7 [json_name = "timestamp"];
inline void OptionQuote::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t OptionQuote::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.timestamp)
  return _internal_timestamp();
}
inline void OptionQuote::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.timestamp)
}
inline ::int64_t OptionQuote::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void OptionQuote::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// int64 volume = 8 [json_name = "volume"];
inline void OptionQuote::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t OptionQuote::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.volume)
  return _internal_volume();
}
inline void OptionQuote::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.volume)
}
inline ::int64_t OptionQuote::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void OptionQuote::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// string turnover = 9 [json_name = "turnover"];
inline void OptionQuote::clear_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.ClearToEmpty();
}
inline const std::string& OptionQuote::turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.turnover)
  return _internal_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionQuote::set_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.turnover)
}
inline std::string* OptionQuote::mutable_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionQuote.turnover)
  return _s;
}
inline const std::string& OptionQuote::_internal_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_.Get();
}
inline void OptionQuote::_internal_set_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(value, GetArena());
}
inline std::string* OptionQuote::_internal_mutable_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_.Mutable( GetArena());
}
inline std::string* OptionQuote::release_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionQuote.turnover)
  return _impl_.turnover_.Release();
}
inline void OptionQuote::set_allocated_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_.IsDefault()) {
          _impl_.turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionQuote.turnover)
}

// .longportapp.quote.v1.TradeStatus trade_status = 10 [json_name = "tradeStatus"];
inline void OptionQuote::clear_trade_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_status_ = 0;
}
inline ::longportapp::quote::v1::TradeStatus OptionQuote::trade_status() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.trade_status)
  return _internal_trade_status();
}
inline void OptionQuote::set_trade_status(::longportapp::quote::v1::TradeStatus value) {
  _internal_set_trade_status(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionQuote.trade_status)
}
inline ::longportapp::quote::v1::TradeStatus OptionQuote::_internal_trade_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::TradeStatus>(_impl_.trade_status_);
}
inline void OptionQuote::_internal_set_trade_status(::longportapp::quote::v1::TradeStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_status_ = value;
}

// .longportapp.quote.v1.OptionExtend option_extend = 11 [json_name = "optionExtend"];
inline bool OptionQuote::has_option_extend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.option_extend_ != nullptr);
  return value;
}
inline void OptionQuote::clear_option_extend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.option_extend_ != nullptr) _impl_.option_extend_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::longportapp::quote::v1::OptionExtend& OptionQuote::_internal_option_extend() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::OptionExtend* p = _impl_.option_extend_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::OptionExtend&>(::longportapp::quote::v1::_OptionExtend_default_instance_);
}
inline const ::longportapp::quote::v1::OptionExtend& OptionQuote::option_extend() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionQuote.option_extend)
  return _internal_option_extend();
}
inline void OptionQuote::unsafe_arena_set_allocated_option_extend(::longportapp::quote::v1::OptionExtend* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.option_extend_);
  }
  _impl_.option_extend_ = reinterpret_cast<::longportapp::quote::v1::OptionExtend*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.OptionQuote.option_extend)
}
inline ::longportapp::quote::v1::OptionExtend* OptionQuote::release_option_extend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::OptionExtend* released = _impl_.option_extend_;
  _impl_.option_extend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::OptionExtend* OptionQuote::unsafe_arena_release_option_extend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionQuote.option_extend)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::OptionExtend* temp = _impl_.option_extend_;
  _impl_.option_extend_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::OptionExtend* OptionQuote::_internal_mutable_option_extend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.option_extend_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::OptionExtend>(GetArena());
    _impl_.option_extend_ = reinterpret_cast<::longportapp::quote::v1::OptionExtend*>(p);
  }
  return _impl_.option_extend_;
}
inline ::longportapp::quote::v1::OptionExtend* OptionQuote::mutable_option_extend() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::OptionExtend* _msg = _internal_mutable_option_extend();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionQuote.option_extend)
  return _msg;
}
inline void OptionQuote::set_allocated_option_extend(::longportapp::quote::v1::OptionExtend* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::OptionExtend*>(_impl_.option_extend_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::OptionExtend*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.option_extend_ = reinterpret_cast<::longportapp::quote::v1::OptionExtend*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionQuote.option_extend)
}

// -------------------------------------------------------------------

// OptionExtend

// string implied_volatility = 1 [json_name = "impliedVolatility"];
inline void OptionExtend::clear_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.implied_volatility_.ClearToEmpty();
}
inline const std::string& OptionExtend::implied_volatility() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.implied_volatility)
  return _internal_implied_volatility();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionExtend::set_implied_volatility(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.implied_volatility_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.implied_volatility)
}
inline std::string* OptionExtend::mutable_implied_volatility() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_implied_volatility();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionExtend.implied_volatility)
  return _s;
}
inline const std::string& OptionExtend::_internal_implied_volatility() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.implied_volatility_.Get();
}
inline void OptionExtend::_internal_set_implied_volatility(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.implied_volatility_.Set(value, GetArena());
}
inline std::string* OptionExtend::_internal_mutable_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.implied_volatility_.Mutable( GetArena());
}
inline std::string* OptionExtend::release_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionExtend.implied_volatility)
  return _impl_.implied_volatility_.Release();
}
inline void OptionExtend::set_allocated_implied_volatility(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.implied_volatility_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.implied_volatility_.IsDefault()) {
          _impl_.implied_volatility_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionExtend.implied_volatility)
}

// int64 open_interest = 2 [json_name = "openInterest"];
inline void OptionExtend::clear_open_interest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_interest_ = ::int64_t{0};
}
inline ::int64_t OptionExtend::open_interest() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.open_interest)
  return _internal_open_interest();
}
inline void OptionExtend::set_open_interest(::int64_t value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.open_interest)
}
inline ::int64_t OptionExtend::_internal_open_interest() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_interest_;
}
inline void OptionExtend::_internal_set_open_interest(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_interest_ = value;
}

// string expiry_date = 3 [json_name = "expiryDate"];
inline void OptionExtend::clear_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.ClearToEmpty();
}
inline const std::string& OptionExtend::expiry_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.expiry_date)
  return _internal_expiry_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionExtend::set_expiry_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.expiry_date)
}
inline std::string* OptionExtend::mutable_expiry_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiry_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionExtend.expiry_date)
  return _s;
}
inline const std::string& OptionExtend::_internal_expiry_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expiry_date_.Get();
}
inline void OptionExtend::_internal_set_expiry_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(value, GetArena());
}
inline std::string* OptionExtend::_internal_mutable_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.expiry_date_.Mutable( GetArena());
}
inline std::string* OptionExtend::release_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionExtend.expiry_date)
  return _impl_.expiry_date_.Release();
}
inline void OptionExtend::set_allocated_expiry_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expiry_date_.IsDefault()) {
          _impl_.expiry_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionExtend.expiry_date)
}

// string strike_price = 4 [json_name = "strikePrice"];
inline void OptionExtend::clear_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strike_price_.ClearToEmpty();
}
inline const std::string& OptionExtend::strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.strike_price)
  return _internal_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionExtend::set_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.strike_price)
}
inline std::string* OptionExtend::mutable_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionExtend.strike_price)
  return _s;
}
inline const std::string& OptionExtend::_internal_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strike_price_.Get();
}
inline void OptionExtend::_internal_set_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strike_price_.Set(value, GetArena());
}
inline std::string* OptionExtend::_internal_mutable_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.strike_price_.Mutable( GetArena());
}
inline std::string* OptionExtend::release_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionExtend.strike_price)
  return _impl_.strike_price_.Release();
}
inline void OptionExtend::set_allocated_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strike_price_.IsDefault()) {
          _impl_.strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionExtend.strike_price)
}

// string contract_multiplier = 5 [json_name = "contractMultiplier"];
inline void OptionExtend::clear_contract_multiplier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contract_multiplier_.ClearToEmpty();
}
inline const std::string& OptionExtend::contract_multiplier() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.contract_multiplier)
  return _internal_contract_multiplier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionExtend::set_contract_multiplier(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contract_multiplier_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.contract_multiplier)
}
inline std::string* OptionExtend::mutable_contract_multiplier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contract_multiplier();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionExtend.contract_multiplier)
  return _s;
}
inline const std::string& OptionExtend::_internal_contract_multiplier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contract_multiplier_.Get();
}
inline void OptionExtend::_internal_set_contract_multiplier(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contract_multiplier_.Set(value, GetArena());
}
inline std::string* OptionExtend::_internal_mutable_contract_multiplier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.contract_multiplier_.Mutable( GetArena());
}
inline std::string* OptionExtend::release_contract_multiplier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionExtend.contract_multiplier)
  return _impl_.contract_multiplier_.Release();
}
inline void OptionExtend::set_allocated_contract_multiplier(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contract_multiplier_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_multiplier_.IsDefault()) {
          _impl_.contract_multiplier_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionExtend.contract_multiplier)
}

// string contract_type = 6 [json_name = "contractType"];
inline void OptionExtend::clear_contract_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contract_type_.ClearToEmpty();
}
inline const std::string& OptionExtend::contract_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.contract_type)
  return _internal_contract_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionExtend::set_contract_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contract_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.contract_type)
}
inline std::string* OptionExtend::mutable_contract_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contract_type();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionExtend.contract_type)
  return _s;
}
inline const std::string& OptionExtend::_internal_contract_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contract_type_.Get();
}
inline void OptionExtend::_internal_set_contract_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contract_type_.Set(value, GetArena());
}
inline std::string* OptionExtend::_internal_mutable_contract_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.contract_type_.Mutable( GetArena());
}
inline std::string* OptionExtend::release_contract_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionExtend.contract_type)
  return _impl_.contract_type_.Release();
}
inline void OptionExtend::set_allocated_contract_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contract_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_type_.IsDefault()) {
          _impl_.contract_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionExtend.contract_type)
}

// string contract_size = 7 [json_name = "contractSize"];
inline void OptionExtend::clear_contract_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contract_size_.ClearToEmpty();
}
inline const std::string& OptionExtend::contract_size() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.contract_size)
  return _internal_contract_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionExtend::set_contract_size(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contract_size_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.contract_size)
}
inline std::string* OptionExtend::mutable_contract_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contract_size();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionExtend.contract_size)
  return _s;
}
inline const std::string& OptionExtend::_internal_contract_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contract_size_.Get();
}
inline void OptionExtend::_internal_set_contract_size(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contract_size_.Set(value, GetArena());
}
inline std::string* OptionExtend::_internal_mutable_contract_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.contract_size_.Mutable( GetArena());
}
inline std::string* OptionExtend::release_contract_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionExtend.contract_size)
  return _impl_.contract_size_.Release();
}
inline void OptionExtend::set_allocated_contract_size(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contract_size_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_size_.IsDefault()) {
          _impl_.contract_size_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionExtend.contract_size)
}

// string direction = 8 [json_name = "direction"];
inline void OptionExtend::clear_direction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.direction_.ClearToEmpty();
}
inline const std::string& OptionExtend::direction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.direction)
  return _internal_direction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionExtend::set_direction(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.direction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.direction)
}
inline std::string* OptionExtend::mutable_direction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionExtend.direction)
  return _s;
}
inline const std::string& OptionExtend::_internal_direction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.direction_.Get();
}
inline void OptionExtend::_internal_set_direction(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.direction_.Set(value, GetArena());
}
inline std::string* OptionExtend::_internal_mutable_direction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.direction_.Mutable( GetArena());
}
inline std::string* OptionExtend::release_direction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionExtend.direction)
  return _impl_.direction_.Release();
}
inline void OptionExtend::set_allocated_direction(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.direction_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.direction_.IsDefault()) {
          _impl_.direction_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionExtend.direction)
}

// string historical_volatility = 9 [json_name = "historicalVolatility"];
inline void OptionExtend::clear_historical_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.historical_volatility_.ClearToEmpty();
}
inline const std::string& OptionExtend::historical_volatility() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.historical_volatility)
  return _internal_historical_volatility();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionExtend::set_historical_volatility(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.historical_volatility_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.historical_volatility)
}
inline std::string* OptionExtend::mutable_historical_volatility() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_historical_volatility();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionExtend.historical_volatility)
  return _s;
}
inline const std::string& OptionExtend::_internal_historical_volatility() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.historical_volatility_.Get();
}
inline void OptionExtend::_internal_set_historical_volatility(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.historical_volatility_.Set(value, GetArena());
}
inline std::string* OptionExtend::_internal_mutable_historical_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.historical_volatility_.Mutable( GetArena());
}
inline std::string* OptionExtend::release_historical_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionExtend.historical_volatility)
  return _impl_.historical_volatility_.Release();
}
inline void OptionExtend::set_allocated_historical_volatility(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.historical_volatility_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.historical_volatility_.IsDefault()) {
          _impl_.historical_volatility_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionExtend.historical_volatility)
}

// string underlying_symbol = 10 [json_name = "underlyingSymbol"];
inline void OptionExtend::clear_underlying_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.underlying_symbol_.ClearToEmpty();
}
inline const std::string& OptionExtend::underlying_symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionExtend.underlying_symbol)
  return _internal_underlying_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionExtend::set_underlying_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.underlying_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionExtend.underlying_symbol)
}
inline std::string* OptionExtend::mutable_underlying_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_underlying_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionExtend.underlying_symbol)
  return _s;
}
inline const std::string& OptionExtend::_internal_underlying_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.underlying_symbol_.Get();
}
inline void OptionExtend::_internal_set_underlying_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.underlying_symbol_.Set(value, GetArena());
}
inline std::string* OptionExtend::_internal_mutable_underlying_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.underlying_symbol_.Mutable( GetArena());
}
inline std::string* OptionExtend::release_underlying_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionExtend.underlying_symbol)
  return _impl_.underlying_symbol_.Release();
}
inline void OptionExtend::set_allocated_underlying_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.underlying_symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.underlying_symbol_.IsDefault()) {
          _impl_.underlying_symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionExtend.underlying_symbol)
}

// -------------------------------------------------------------------

// WarrantQuoteResponse

// repeated .longportapp.quote.v1.WarrantQuote secu_quote = 2 [json_name = "secuQuote"];
inline int WarrantQuoteResponse::_internal_secu_quote_size() const {
  return _internal_secu_quote().size();
}
inline int WarrantQuoteResponse::secu_quote_size() const {
  return _internal_secu_quote_size();
}
inline void WarrantQuoteResponse::clear_secu_quote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secu_quote_.Clear();
}
inline ::longportapp::quote::v1::WarrantQuote* WarrantQuoteResponse::mutable_secu_quote(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantQuoteResponse.secu_quote)
  return _internal_mutable_secu_quote()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::WarrantQuote>* WarrantQuoteResponse::mutable_secu_quote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.WarrantQuoteResponse.secu_quote)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_secu_quote();
}
inline const ::longportapp::quote::v1::WarrantQuote& WarrantQuoteResponse::secu_quote(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuoteResponse.secu_quote)
  return _internal_secu_quote().Get(index);
}
inline ::longportapp::quote::v1::WarrantQuote* WarrantQuoteResponse::add_secu_quote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::WarrantQuote* _add = _internal_mutable_secu_quote()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.WarrantQuoteResponse.secu_quote)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::WarrantQuote>& WarrantQuoteResponse::secu_quote() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.WarrantQuoteResponse.secu_quote)
  return _internal_secu_quote();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::WarrantQuote>&
WarrantQuoteResponse::_internal_secu_quote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secu_quote_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::WarrantQuote>*
WarrantQuoteResponse::_internal_mutable_secu_quote() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.secu_quote_;
}

// -------------------------------------------------------------------

// WarrantQuote

// string symbol = 1 [json_name = "symbol"];
inline void WarrantQuote::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& WarrantQuote::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantQuote::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.symbol)
}
inline std::string* WarrantQuote::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantQuote.symbol)
  return _s;
}
inline const std::string& WarrantQuote::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void WarrantQuote::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* WarrantQuote::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* WarrantQuote::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantQuote.symbol)
  return _impl_.symbol_.Release();
}
inline void WarrantQuote::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantQuote.symbol)
}

// string last_done = 2 [json_name = "lastDone"];
inline void WarrantQuote::clear_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.ClearToEmpty();
}
inline const std::string& WarrantQuote::last_done() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.last_done)
  return _internal_last_done();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantQuote::set_last_done(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.last_done)
}
inline std::string* WarrantQuote::mutable_last_done() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_done();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantQuote.last_done)
  return _s;
}
inline const std::string& WarrantQuote::_internal_last_done() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_done_.Get();
}
inline void WarrantQuote::_internal_set_last_done(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(value, GetArena());
}
inline std::string* WarrantQuote::_internal_mutable_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_done_.Mutable( GetArena());
}
inline std::string* WarrantQuote::release_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantQuote.last_done)
  return _impl_.last_done_.Release();
}
inline void WarrantQuote::set_allocated_last_done(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_done_.IsDefault()) {
          _impl_.last_done_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantQuote.last_done)
}

// string prev_close = 3 [json_name = "prevClose"];
inline void WarrantQuote::clear_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prev_close_.ClearToEmpty();
}
inline const std::string& WarrantQuote::prev_close() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.prev_close)
  return _internal_prev_close();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantQuote::set_prev_close(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prev_close_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.prev_close)
}
inline std::string* WarrantQuote::mutable_prev_close() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prev_close();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantQuote.prev_close)
  return _s;
}
inline const std::string& WarrantQuote::_internal_prev_close() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prev_close_.Get();
}
inline void WarrantQuote::_internal_set_prev_close(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prev_close_.Set(value, GetArena());
}
inline std::string* WarrantQuote::_internal_mutable_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.prev_close_.Mutable( GetArena());
}
inline std::string* WarrantQuote::release_prev_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantQuote.prev_close)
  return _impl_.prev_close_.Release();
}
inline void WarrantQuote::set_allocated_prev_close(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prev_close_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prev_close_.IsDefault()) {
          _impl_.prev_close_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantQuote.prev_close)
}

// string open = 4 [json_name = "open"];
inline void WarrantQuote::clear_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.ClearToEmpty();
}
inline const std::string& WarrantQuote::open() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.open)
  return _internal_open();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantQuote::set_open(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.open)
}
inline std::string* WarrantQuote::mutable_open() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantQuote.open)
  return _s;
}
inline const std::string& WarrantQuote::_internal_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_.Get();
}
inline void WarrantQuote::_internal_set_open(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(value, GetArena());
}
inline std::string* WarrantQuote::_internal_mutable_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_.Mutable( GetArena());
}
inline std::string* WarrantQuote::release_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantQuote.open)
  return _impl_.open_.Release();
}
inline void WarrantQuote::set_allocated_open(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_.IsDefault()) {
          _impl_.open_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantQuote.open)
}

// string high = 5 [json_name = "high"];
inline void WarrantQuote::clear_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.ClearToEmpty();
}
inline const std::string& WarrantQuote::high() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.high)
  return _internal_high();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantQuote::set_high(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.high)
}
inline std::string* WarrantQuote::mutable_high() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_high();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantQuote.high)
  return _s;
}
inline const std::string& WarrantQuote::_internal_high() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.high_.Get();
}
inline void WarrantQuote::_internal_set_high(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(value, GetArena());
}
inline std::string* WarrantQuote::_internal_mutable_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.high_.Mutable( GetArena());
}
inline std::string* WarrantQuote::release_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantQuote.high)
  return _impl_.high_.Release();
}
inline void WarrantQuote::set_allocated_high(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.high_.IsDefault()) {
          _impl_.high_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantQuote.high)
}

// string low = 6 [json_name = "low"];
inline void WarrantQuote::clear_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.ClearToEmpty();
}
inline const std::string& WarrantQuote::low() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.low)
  return _internal_low();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantQuote::set_low(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.low)
}
inline std::string* WarrantQuote::mutable_low() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_low();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantQuote.low)
  return _s;
}
inline const std::string& WarrantQuote::_internal_low() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.low_.Get();
}
inline void WarrantQuote::_internal_set_low(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(value, GetArena());
}
inline std::string* WarrantQuote::_internal_mutable_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.low_.Mutable( GetArena());
}
inline std::string* WarrantQuote::release_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantQuote.low)
  return _impl_.low_.Release();
}
inline void WarrantQuote::set_allocated_low(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.low_.IsDefault()) {
          _impl_.low_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantQuote.low)
}

// int64 timestamp = 7 [json_name = "timestamp"];
inline void WarrantQuote::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t WarrantQuote::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.timestamp)
  return _internal_timestamp();
}
inline void WarrantQuote::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.timestamp)
}
inline ::int64_t WarrantQuote::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void WarrantQuote::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// int64 volume = 8 [json_name = "volume"];
inline void WarrantQuote::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t WarrantQuote::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.volume)
  return _internal_volume();
}
inline void WarrantQuote::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.volume)
}
inline ::int64_t WarrantQuote::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void WarrantQuote::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// string turnover = 9 [json_name = "turnover"];
inline void WarrantQuote::clear_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.ClearToEmpty();
}
inline const std::string& WarrantQuote::turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.turnover)
  return _internal_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantQuote::set_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.turnover)
}
inline std::string* WarrantQuote::mutable_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantQuote.turnover)
  return _s;
}
inline const std::string& WarrantQuote::_internal_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_.Get();
}
inline void WarrantQuote::_internal_set_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(value, GetArena());
}
inline std::string* WarrantQuote::_internal_mutable_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_.Mutable( GetArena());
}
inline std::string* WarrantQuote::release_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantQuote.turnover)
  return _impl_.turnover_.Release();
}
inline void WarrantQuote::set_allocated_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_.IsDefault()) {
          _impl_.turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantQuote.turnover)
}

// .longportapp.quote.v1.TradeStatus trade_status = 10 [json_name = "tradeStatus"];
inline void WarrantQuote::clear_trade_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_status_ = 0;
}
inline ::longportapp::quote::v1::TradeStatus WarrantQuote::trade_status() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.trade_status)
  return _internal_trade_status();
}
inline void WarrantQuote::set_trade_status(::longportapp::quote::v1::TradeStatus value) {
  _internal_set_trade_status(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantQuote.trade_status)
}
inline ::longportapp::quote::v1::TradeStatus WarrantQuote::_internal_trade_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::TradeStatus>(_impl_.trade_status_);
}
inline void WarrantQuote::_internal_set_trade_status(::longportapp::quote::v1::TradeStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_status_ = value;
}

// .longportapp.quote.v1.WarrantExtend warrant_extend = 11 [json_name = "warrantExtend"];
inline bool WarrantQuote::has_warrant_extend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.warrant_extend_ != nullptr);
  return value;
}
inline void WarrantQuote::clear_warrant_extend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.warrant_extend_ != nullptr) _impl_.warrant_extend_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::longportapp::quote::v1::WarrantExtend& WarrantQuote::_internal_warrant_extend() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::WarrantExtend* p = _impl_.warrant_extend_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::WarrantExtend&>(::longportapp::quote::v1::_WarrantExtend_default_instance_);
}
inline const ::longportapp::quote::v1::WarrantExtend& WarrantQuote::warrant_extend() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantQuote.warrant_extend)
  return _internal_warrant_extend();
}
inline void WarrantQuote::unsafe_arena_set_allocated_warrant_extend(::longportapp::quote::v1::WarrantExtend* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.warrant_extend_);
  }
  _impl_.warrant_extend_ = reinterpret_cast<::longportapp::quote::v1::WarrantExtend*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.WarrantQuote.warrant_extend)
}
inline ::longportapp::quote::v1::WarrantExtend* WarrantQuote::release_warrant_extend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::WarrantExtend* released = _impl_.warrant_extend_;
  _impl_.warrant_extend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::WarrantExtend* WarrantQuote::unsafe_arena_release_warrant_extend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantQuote.warrant_extend)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::WarrantExtend* temp = _impl_.warrant_extend_;
  _impl_.warrant_extend_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::WarrantExtend* WarrantQuote::_internal_mutable_warrant_extend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.warrant_extend_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::WarrantExtend>(GetArena());
    _impl_.warrant_extend_ = reinterpret_cast<::longportapp::quote::v1::WarrantExtend*>(p);
  }
  return _impl_.warrant_extend_;
}
inline ::longportapp::quote::v1::WarrantExtend* WarrantQuote::mutable_warrant_extend() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::WarrantExtend* _msg = _internal_mutable_warrant_extend();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantQuote.warrant_extend)
  return _msg;
}
inline void WarrantQuote::set_allocated_warrant_extend(::longportapp::quote::v1::WarrantExtend* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::WarrantExtend*>(_impl_.warrant_extend_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::WarrantExtend*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.warrant_extend_ = reinterpret_cast<::longportapp::quote::v1::WarrantExtend*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantQuote.warrant_extend)
}

// -------------------------------------------------------------------

// WarrantExtend

// string implied_volatility = 1 [json_name = "impliedVolatility"];
inline void WarrantExtend::clear_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.implied_volatility_.ClearToEmpty();
}
inline const std::string& WarrantExtend::implied_volatility() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.implied_volatility)
  return _internal_implied_volatility();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_implied_volatility(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.implied_volatility_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.implied_volatility)
}
inline std::string* WarrantExtend::mutable_implied_volatility() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_implied_volatility();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.implied_volatility)
  return _s;
}
inline const std::string& WarrantExtend::_internal_implied_volatility() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.implied_volatility_.Get();
}
inline void WarrantExtend::_internal_set_implied_volatility(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.implied_volatility_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.implied_volatility_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.implied_volatility)
  return _impl_.implied_volatility_.Release();
}
inline void WarrantExtend::set_allocated_implied_volatility(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.implied_volatility_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.implied_volatility_.IsDefault()) {
          _impl_.implied_volatility_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.implied_volatility)
}

// string expiry_date = 2 [json_name = "expiryDate"];
inline void WarrantExtend::clear_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.ClearToEmpty();
}
inline const std::string& WarrantExtend::expiry_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.expiry_date)
  return _internal_expiry_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_expiry_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.expiry_date)
}
inline std::string* WarrantExtend::mutable_expiry_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiry_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.expiry_date)
  return _s;
}
inline const std::string& WarrantExtend::_internal_expiry_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expiry_date_.Get();
}
inline void WarrantExtend::_internal_set_expiry_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.expiry_date_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.expiry_date)
  return _impl_.expiry_date_.Release();
}
inline void WarrantExtend::set_allocated_expiry_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expiry_date_.IsDefault()) {
          _impl_.expiry_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.expiry_date)
}

// string last_trade_date = 3 [json_name = "lastTradeDate"];
inline void WarrantExtend::clear_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_trade_date_.ClearToEmpty();
}
inline const std::string& WarrantExtend::last_trade_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.last_trade_date)
  return _internal_last_trade_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_last_trade_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_trade_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.last_trade_date)
}
inline std::string* WarrantExtend::mutable_last_trade_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_trade_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.last_trade_date)
  return _s;
}
inline const std::string& WarrantExtend::_internal_last_trade_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_trade_date_.Get();
}
inline void WarrantExtend::_internal_set_last_trade_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_trade_date_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_trade_date_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_last_trade_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.last_trade_date)
  return _impl_.last_trade_date_.Release();
}
inline void WarrantExtend::set_allocated_last_trade_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_trade_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_trade_date_.IsDefault()) {
          _impl_.last_trade_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.last_trade_date)
}

// string outstanding_ratio = 4 [json_name = "outstandingRatio"];
inline void WarrantExtend::clear_outstanding_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_ratio_.ClearToEmpty();
}
inline const std::string& WarrantExtend::outstanding_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.outstanding_ratio)
  return _internal_outstanding_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_outstanding_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.outstanding_ratio)
}
inline std::string* WarrantExtend::mutable_outstanding_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_outstanding_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.outstanding_ratio)
  return _s;
}
inline const std::string& WarrantExtend::_internal_outstanding_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outstanding_ratio_.Get();
}
inline void WarrantExtend::_internal_set_outstanding_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_ratio_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_outstanding_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.outstanding_ratio_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_outstanding_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.outstanding_ratio)
  return _impl_.outstanding_ratio_.Release();
}
inline void WarrantExtend::set_allocated_outstanding_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.outstanding_ratio_.IsDefault()) {
          _impl_.outstanding_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.outstanding_ratio)
}

// int64 outstanding_qty = 5 [json_name = "outstandingQty"];
inline void WarrantExtend::clear_outstanding_qty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_qty_ = ::int64_t{0};
}
inline ::int64_t WarrantExtend::outstanding_qty() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.outstanding_qty)
  return _internal_outstanding_qty();
}
inline void WarrantExtend::set_outstanding_qty(::int64_t value) {
  _internal_set_outstanding_qty(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.outstanding_qty)
}
inline ::int64_t WarrantExtend::_internal_outstanding_qty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outstanding_qty_;
}
inline void WarrantExtend::_internal_set_outstanding_qty(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_qty_ = value;
}

// string conversion_ratio = 6 [json_name = "conversionRatio"];
inline void WarrantExtend::clear_conversion_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.conversion_ratio_.ClearToEmpty();
}
inline const std::string& WarrantExtend::conversion_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.conversion_ratio)
  return _internal_conversion_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_conversion_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.conversion_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.conversion_ratio)
}
inline std::string* WarrantExtend::mutable_conversion_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversion_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.conversion_ratio)
  return _s;
}
inline const std::string& WarrantExtend::_internal_conversion_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.conversion_ratio_.Get();
}
inline void WarrantExtend::_internal_set_conversion_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.conversion_ratio_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_conversion_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.conversion_ratio_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_conversion_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.conversion_ratio)
  return _impl_.conversion_ratio_.Release();
}
inline void WarrantExtend::set_allocated_conversion_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.conversion_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.conversion_ratio_.IsDefault()) {
          _impl_.conversion_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.conversion_ratio)
}

// string category = 7 [json_name = "category"];
inline void WarrantExtend::clear_category() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.category_.ClearToEmpty();
}
inline const std::string& WarrantExtend::category() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.category)
  return _internal_category();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_category(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.category)
}
inline std::string* WarrantExtend::mutable_category() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.category)
  return _s;
}
inline const std::string& WarrantExtend::_internal_category() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.category_.Get();
}
inline void WarrantExtend::_internal_set_category(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_category() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.category_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_category() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.category)
  return _impl_.category_.Release();
}
inline void WarrantExtend::set_allocated_category(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.category_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.category_.IsDefault()) {
          _impl_.category_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.category)
}

// string strike_price = 8 [json_name = "strikePrice"];
inline void WarrantExtend::clear_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strike_price_.ClearToEmpty();
}
inline const std::string& WarrantExtend::strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.strike_price)
  return _internal_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.strike_price)
}
inline std::string* WarrantExtend::mutable_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.strike_price)
  return _s;
}
inline const std::string& WarrantExtend::_internal_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strike_price_.Get();
}
inline void WarrantExtend::_internal_set_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strike_price_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.strike_price_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.strike_price)
  return _impl_.strike_price_.Release();
}
inline void WarrantExtend::set_allocated_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strike_price_.IsDefault()) {
          _impl_.strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.strike_price)
}

// string upper_strike_price = 9 [json_name = "upperStrikePrice"];
inline void WarrantExtend::clear_upper_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.upper_strike_price_.ClearToEmpty();
}
inline const std::string& WarrantExtend::upper_strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.upper_strike_price)
  return _internal_upper_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_upper_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.upper_strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.upper_strike_price)
}
inline std::string* WarrantExtend::mutable_upper_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_upper_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.upper_strike_price)
  return _s;
}
inline const std::string& WarrantExtend::_internal_upper_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.upper_strike_price_.Get();
}
inline void WarrantExtend::_internal_set_upper_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.upper_strike_price_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_upper_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.upper_strike_price_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_upper_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.upper_strike_price)
  return _impl_.upper_strike_price_.Release();
}
inline void WarrantExtend::set_allocated_upper_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.upper_strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.upper_strike_price_.IsDefault()) {
          _impl_.upper_strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.upper_strike_price)
}

// string lower_strike_price = 10 [json_name = "lowerStrikePrice"];
inline void WarrantExtend::clear_lower_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lower_strike_price_.ClearToEmpty();
}
inline const std::string& WarrantExtend::lower_strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.lower_strike_price)
  return _internal_lower_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_lower_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lower_strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.lower_strike_price)
}
inline std::string* WarrantExtend::mutable_lower_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lower_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.lower_strike_price)
  return _s;
}
inline const std::string& WarrantExtend::_internal_lower_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lower_strike_price_.Get();
}
inline void WarrantExtend::_internal_set_lower_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lower_strike_price_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_lower_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lower_strike_price_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_lower_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.lower_strike_price)
  return _impl_.lower_strike_price_.Release();
}
inline void WarrantExtend::set_allocated_lower_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lower_strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lower_strike_price_.IsDefault()) {
          _impl_.lower_strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.lower_strike_price)
}

// string call_price = 11 [json_name = "callPrice"];
inline void WarrantExtend::clear_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.call_price_.ClearToEmpty();
}
inline const std::string& WarrantExtend::call_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.call_price)
  return _internal_call_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_call_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.call_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.call_price)
}
inline std::string* WarrantExtend::mutable_call_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_call_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.call_price)
  return _s;
}
inline const std::string& WarrantExtend::_internal_call_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.call_price_.Get();
}
inline void WarrantExtend::_internal_set_call_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.call_price_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.call_price_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.call_price)
  return _impl_.call_price_.Release();
}
inline void WarrantExtend::set_allocated_call_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.call_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.call_price_.IsDefault()) {
          _impl_.call_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.call_price)
}

// string underlying_symbol = 12 [json_name = "underlyingSymbol"];
inline void WarrantExtend::clear_underlying_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.underlying_symbol_.ClearToEmpty();
}
inline const std::string& WarrantExtend::underlying_symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantExtend.underlying_symbol)
  return _internal_underlying_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantExtend::set_underlying_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.underlying_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantExtend.underlying_symbol)
}
inline std::string* WarrantExtend::mutable_underlying_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_underlying_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantExtend.underlying_symbol)
  return _s;
}
inline const std::string& WarrantExtend::_internal_underlying_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.underlying_symbol_.Get();
}
inline void WarrantExtend::_internal_set_underlying_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.underlying_symbol_.Set(value, GetArena());
}
inline std::string* WarrantExtend::_internal_mutable_underlying_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.underlying_symbol_.Mutable( GetArena());
}
inline std::string* WarrantExtend::release_underlying_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantExtend.underlying_symbol)
  return _impl_.underlying_symbol_.Release();
}
inline void WarrantExtend::set_allocated_underlying_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.underlying_symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.underlying_symbol_.IsDefault()) {
          _impl_.underlying_symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantExtend.underlying_symbol)
}

// -------------------------------------------------------------------

// SecurityDepthResponse

// string symbol = 1 [json_name = "symbol"];
inline void SecurityDepthResponse::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityDepthResponse::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityDepthResponse.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityDepthResponse::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityDepthResponse.symbol)
}
inline std::string* SecurityDepthResponse::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityDepthResponse.symbol)
  return _s;
}
inline const std::string& SecurityDepthResponse::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityDepthResponse::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityDepthResponse::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityDepthResponse::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityDepthResponse.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityDepthResponse::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityDepthResponse.symbol)
}

// repeated .longportapp.quote.v1.Depth ask = 2 [json_name = "ask"];
inline int SecurityDepthResponse::_internal_ask_size() const {
  return _internal_ask().size();
}
inline int SecurityDepthResponse::ask_size() const {
  return _internal_ask_size();
}
inline void SecurityDepthResponse::clear_ask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ask_.Clear();
}
inline ::longportapp::quote::v1::Depth* SecurityDepthResponse::mutable_ask(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityDepthResponse.ask)
  return _internal_mutable_ask()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>* SecurityDepthResponse::mutable_ask()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityDepthResponse.ask)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ask();
}
inline const ::longportapp::quote::v1::Depth& SecurityDepthResponse::ask(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityDepthResponse.ask)
  return _internal_ask().Get(index);
}
inline ::longportapp::quote::v1::Depth* SecurityDepthResponse::add_ask() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Depth* _add = _internal_mutable_ask()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityDepthResponse.ask)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>& SecurityDepthResponse::ask() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityDepthResponse.ask)
  return _internal_ask();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>&
SecurityDepthResponse::_internal_ask() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ask_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>*
SecurityDepthResponse::_internal_mutable_ask() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ask_;
}

// repeated .longportapp.quote.v1.Depth bid = 3 [json_name = "bid"];
inline int SecurityDepthResponse::_internal_bid_size() const {
  return _internal_bid().size();
}
inline int SecurityDepthResponse::bid_size() const {
  return _internal_bid_size();
}
inline void SecurityDepthResponse::clear_bid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bid_.Clear();
}
inline ::longportapp::quote::v1::Depth* SecurityDepthResponse::mutable_bid(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityDepthResponse.bid)
  return _internal_mutable_bid()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>* SecurityDepthResponse::mutable_bid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityDepthResponse.bid)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bid();
}
inline const ::longportapp::quote::v1::Depth& SecurityDepthResponse::bid(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityDepthResponse.bid)
  return _internal_bid().Get(index);
}
inline ::longportapp::quote::v1::Depth* SecurityDepthResponse::add_bid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Depth* _add = _internal_mutable_bid()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityDepthResponse.bid)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>& SecurityDepthResponse::bid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityDepthResponse.bid)
  return _internal_bid();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>&
SecurityDepthResponse::_internal_bid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bid_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>*
SecurityDepthResponse::_internal_mutable_bid() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bid_;
}

// -------------------------------------------------------------------

// Depth

// int32 position = 1 [json_name = "position"];
inline void Depth::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_ = 0;
}
inline ::int32_t Depth::position() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Depth.position)
  return _internal_position();
}
inline void Depth::set_position(::int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Depth.position)
}
inline ::int32_t Depth::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_;
}
inline void Depth::_internal_set_position(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_ = value;
}

// string price = 2 [json_name = "price"];
inline void Depth::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.ClearToEmpty();
}
inline const std::string& Depth::price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Depth.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Depth::set_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Depth.price)
}
inline std::string* Depth::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Depth.price)
  return _s;
}
inline const std::string& Depth::_internal_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_.Get();
}
inline void Depth::_internal_set_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(value, GetArena());
}
inline std::string* Depth::_internal_mutable_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.price_.Mutable( GetArena());
}
inline std::string* Depth::release_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Depth.price)
  return _impl_.price_.Release();
}
inline void Depth::set_allocated_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Depth.price)
}

// int64 volume = 3 [json_name = "volume"];
inline void Depth::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t Depth::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Depth.volume)
  return _internal_volume();
}
inline void Depth::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Depth.volume)
}
inline ::int64_t Depth::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void Depth::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// int64 order_num = 4 [json_name = "orderNum"];
inline void Depth::clear_order_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.order_num_ = ::int64_t{0};
}
inline ::int64_t Depth::order_num() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Depth.order_num)
  return _internal_order_num();
}
inline void Depth::set_order_num(::int64_t value) {
  _internal_set_order_num(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Depth.order_num)
}
inline ::int64_t Depth::_internal_order_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.order_num_;
}
inline void Depth::_internal_set_order_num(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.order_num_ = value;
}

// -------------------------------------------------------------------

// SecurityBrokersResponse

// string symbol = 1 [json_name = "symbol"];
inline void SecurityBrokersResponse::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityBrokersResponse::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityBrokersResponse.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityBrokersResponse::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityBrokersResponse.symbol)
}
inline std::string* SecurityBrokersResponse::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityBrokersResponse.symbol)
  return _s;
}
inline const std::string& SecurityBrokersResponse::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityBrokersResponse::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityBrokersResponse::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityBrokersResponse::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityBrokersResponse.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityBrokersResponse::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityBrokersResponse.symbol)
}

// repeated .longportapp.quote.v1.Brokers ask_brokers = 2 [json_name = "askBrokers"];
inline int SecurityBrokersResponse::_internal_ask_brokers_size() const {
  return _internal_ask_brokers().size();
}
inline int SecurityBrokersResponse::ask_brokers_size() const {
  return _internal_ask_brokers_size();
}
inline void SecurityBrokersResponse::clear_ask_brokers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ask_brokers_.Clear();
}
inline ::longportapp::quote::v1::Brokers* SecurityBrokersResponse::mutable_ask_brokers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityBrokersResponse.ask_brokers)
  return _internal_mutable_ask_brokers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>* SecurityBrokersResponse::mutable_ask_brokers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityBrokersResponse.ask_brokers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ask_brokers();
}
inline const ::longportapp::quote::v1::Brokers& SecurityBrokersResponse::ask_brokers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityBrokersResponse.ask_brokers)
  return _internal_ask_brokers().Get(index);
}
inline ::longportapp::quote::v1::Brokers* SecurityBrokersResponse::add_ask_brokers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Brokers* _add = _internal_mutable_ask_brokers()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityBrokersResponse.ask_brokers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>& SecurityBrokersResponse::ask_brokers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityBrokersResponse.ask_brokers)
  return _internal_ask_brokers();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>&
SecurityBrokersResponse::_internal_ask_brokers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ask_brokers_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>*
SecurityBrokersResponse::_internal_mutable_ask_brokers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ask_brokers_;
}

// repeated .longportapp.quote.v1.Brokers bid_brokers = 3 [json_name = "bidBrokers"];
inline int SecurityBrokersResponse::_internal_bid_brokers_size() const {
  return _internal_bid_brokers().size();
}
inline int SecurityBrokersResponse::bid_brokers_size() const {
  return _internal_bid_brokers_size();
}
inline void SecurityBrokersResponse::clear_bid_brokers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bid_brokers_.Clear();
}
inline ::longportapp::quote::v1::Brokers* SecurityBrokersResponse::mutable_bid_brokers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityBrokersResponse.bid_brokers)
  return _internal_mutable_bid_brokers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>* SecurityBrokersResponse::mutable_bid_brokers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityBrokersResponse.bid_brokers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bid_brokers();
}
inline const ::longportapp::quote::v1::Brokers& SecurityBrokersResponse::bid_brokers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityBrokersResponse.bid_brokers)
  return _internal_bid_brokers().Get(index);
}
inline ::longportapp::quote::v1::Brokers* SecurityBrokersResponse::add_bid_brokers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Brokers* _add = _internal_mutable_bid_brokers()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityBrokersResponse.bid_brokers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>& SecurityBrokersResponse::bid_brokers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityBrokersResponse.bid_brokers)
  return _internal_bid_brokers();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>&
SecurityBrokersResponse::_internal_bid_brokers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bid_brokers_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>*
SecurityBrokersResponse::_internal_mutable_bid_brokers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bid_brokers_;
}

// -------------------------------------------------------------------

// Brokers

// int32 position = 1 [json_name = "position"];
inline void Brokers::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_ = 0;
}
inline ::int32_t Brokers::position() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Brokers.position)
  return _internal_position();
}
inline void Brokers::set_position(::int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Brokers.position)
}
inline ::int32_t Brokers::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_;
}
inline void Brokers::_internal_set_position(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_ = value;
}

// repeated int32 broker_ids = 2 [json_name = "brokerIds"];
inline int Brokers::_internal_broker_ids_size() const {
  return _internal_broker_ids().size();
}
inline int Brokers::broker_ids_size() const {
  return _internal_broker_ids_size();
}
inline void Brokers::clear_broker_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.broker_ids_.Clear();
}
inline ::int32_t Brokers::broker_ids(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Brokers.broker_ids)
  return _internal_broker_ids().Get(index);
}
inline void Brokers::set_broker_ids(int index, ::int32_t value) {
  _internal_mutable_broker_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Brokers.broker_ids)
}
inline void Brokers::add_broker_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_broker_ids()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.Brokers.broker_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Brokers::broker_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.Brokers.broker_ids)
  return _internal_broker_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Brokers::mutable_broker_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.Brokers.broker_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_broker_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Brokers::_internal_broker_ids()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.broker_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Brokers::_internal_mutable_broker_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.broker_ids_;
}

// -------------------------------------------------------------------

// ParticipantBrokerIdsResponse

// repeated .longportapp.quote.v1.ParticipantInfo participant_broker_numbers = 1 [json_name = "participantBrokerNumbers"];
inline int ParticipantBrokerIdsResponse::_internal_participant_broker_numbers_size() const {
  return _internal_participant_broker_numbers().size();
}
inline int ParticipantBrokerIdsResponse::participant_broker_numbers_size() const {
  return _internal_participant_broker_numbers_size();
}
inline void ParticipantBrokerIdsResponse::clear_participant_broker_numbers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.participant_broker_numbers_.Clear();
}
inline ::longportapp::quote::v1::ParticipantInfo* ParticipantBrokerIdsResponse::mutable_participant_broker_numbers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.ParticipantBrokerIdsResponse.participant_broker_numbers)
  return _internal_mutable_participant_broker_numbers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::ParticipantInfo>* ParticipantBrokerIdsResponse::mutable_participant_broker_numbers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.ParticipantBrokerIdsResponse.participant_broker_numbers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_participant_broker_numbers();
}
inline const ::longportapp::quote::v1::ParticipantInfo& ParticipantBrokerIdsResponse::participant_broker_numbers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.ParticipantBrokerIdsResponse.participant_broker_numbers)
  return _internal_participant_broker_numbers().Get(index);
}
inline ::longportapp::quote::v1::ParticipantInfo* ParticipantBrokerIdsResponse::add_participant_broker_numbers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::ParticipantInfo* _add = _internal_mutable_participant_broker_numbers()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.ParticipantBrokerIdsResponse.participant_broker_numbers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::ParticipantInfo>& ParticipantBrokerIdsResponse::participant_broker_numbers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.ParticipantBrokerIdsResponse.participant_broker_numbers)
  return _internal_participant_broker_numbers();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::ParticipantInfo>&
ParticipantBrokerIdsResponse::_internal_participant_broker_numbers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.participant_broker_numbers_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::ParticipantInfo>*
ParticipantBrokerIdsResponse::_internal_mutable_participant_broker_numbers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.participant_broker_numbers_;
}

// -------------------------------------------------------------------

// ParticipantInfo

// repeated int32 broker_ids = 1 [json_name = "brokerIds"];
inline int ParticipantInfo::_internal_broker_ids_size() const {
  return _internal_broker_ids().size();
}
inline int ParticipantInfo::broker_ids_size() const {
  return _internal_broker_ids_size();
}
inline void ParticipantInfo::clear_broker_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.broker_ids_.Clear();
}
inline ::int32_t ParticipantInfo::broker_ids(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.ParticipantInfo.broker_ids)
  return _internal_broker_ids().Get(index);
}
inline void ParticipantInfo::set_broker_ids(int index, ::int32_t value) {
  _internal_mutable_broker_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.ParticipantInfo.broker_ids)
}
inline void ParticipantInfo::add_broker_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_broker_ids()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.ParticipantInfo.broker_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ParticipantInfo::broker_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.ParticipantInfo.broker_ids)
  return _internal_broker_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* ParticipantInfo::mutable_broker_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.ParticipantInfo.broker_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_broker_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ParticipantInfo::_internal_broker_ids()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.broker_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* ParticipantInfo::_internal_mutable_broker_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.broker_ids_;
}

// string participant_name_cn = 2 [json_name = "participantNameCn"];
inline void ParticipantInfo::clear_participant_name_cn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.participant_name_cn_.ClearToEmpty();
}
inline const std::string& ParticipantInfo::participant_name_cn() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.ParticipantInfo.participant_name_cn)
  return _internal_participant_name_cn();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ParticipantInfo::set_participant_name_cn(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.participant_name_cn_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.ParticipantInfo.participant_name_cn)
}
inline std::string* ParticipantInfo::mutable_participant_name_cn() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant_name_cn();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.ParticipantInfo.participant_name_cn)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_participant_name_cn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.participant_name_cn_.Get();
}
inline void ParticipantInfo::_internal_set_participant_name_cn(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.participant_name_cn_.Set(value, GetArena());
}
inline std::string* ParticipantInfo::_internal_mutable_participant_name_cn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.participant_name_cn_.Mutable( GetArena());
}
inline std::string* ParticipantInfo::release_participant_name_cn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.ParticipantInfo.participant_name_cn)
  return _impl_.participant_name_cn_.Release();
}
inline void ParticipantInfo::set_allocated_participant_name_cn(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.participant_name_cn_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_name_cn_.IsDefault()) {
          _impl_.participant_name_cn_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.ParticipantInfo.participant_name_cn)
}

// string participant_name_en = 3 [json_name = "participantNameEn"];
inline void ParticipantInfo::clear_participant_name_en() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.participant_name_en_.ClearToEmpty();
}
inline const std::string& ParticipantInfo::participant_name_en() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.ParticipantInfo.participant_name_en)
  return _internal_participant_name_en();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ParticipantInfo::set_participant_name_en(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.participant_name_en_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.ParticipantInfo.participant_name_en)
}
inline std::string* ParticipantInfo::mutable_participant_name_en() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant_name_en();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.ParticipantInfo.participant_name_en)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_participant_name_en() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.participant_name_en_.Get();
}
inline void ParticipantInfo::_internal_set_participant_name_en(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.participant_name_en_.Set(value, GetArena());
}
inline std::string* ParticipantInfo::_internal_mutable_participant_name_en() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.participant_name_en_.Mutable( GetArena());
}
inline std::string* ParticipantInfo::release_participant_name_en() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.ParticipantInfo.participant_name_en)
  return _impl_.participant_name_en_.Release();
}
inline void ParticipantInfo::set_allocated_participant_name_en(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.participant_name_en_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_name_en_.IsDefault()) {
          _impl_.participant_name_en_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.ParticipantInfo.participant_name_en)
}

// string participant_name_hk = 4 [json_name = "participantNameHk"];
inline void ParticipantInfo::clear_participant_name_hk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.participant_name_hk_.ClearToEmpty();
}
inline const std::string& ParticipantInfo::participant_name_hk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.ParticipantInfo.participant_name_hk)
  return _internal_participant_name_hk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ParticipantInfo::set_participant_name_hk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.participant_name_hk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.ParticipantInfo.participant_name_hk)
}
inline std::string* ParticipantInfo::mutable_participant_name_hk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant_name_hk();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.ParticipantInfo.participant_name_hk)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_participant_name_hk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.participant_name_hk_.Get();
}
inline void ParticipantInfo::_internal_set_participant_name_hk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.participant_name_hk_.Set(value, GetArena());
}
inline std::string* ParticipantInfo::_internal_mutable_participant_name_hk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.participant_name_hk_.Mutable( GetArena());
}
inline std::string* ParticipantInfo::release_participant_name_hk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.ParticipantInfo.participant_name_hk)
  return _impl_.participant_name_hk_.Release();
}
inline void ParticipantInfo::set_allocated_participant_name_hk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.participant_name_hk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.participant_name_hk_.IsDefault()) {
          _impl_.participant_name_hk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.ParticipantInfo.participant_name_hk)
}

// -------------------------------------------------------------------

// SecurityTradeRequest

// string symbol = 1 [json_name = "symbol"];
inline void SecurityTradeRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityTradeRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityTradeRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityTradeRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityTradeRequest.symbol)
}
inline std::string* SecurityTradeRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityTradeRequest.symbol)
  return _s;
}
inline const std::string& SecurityTradeRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityTradeRequest::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityTradeRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityTradeRequest::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityTradeRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityTradeRequest::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityTradeRequest.symbol)
}

// int32 count = 2 [json_name = "count"];
inline void SecurityTradeRequest::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = 0;
}
inline ::int32_t SecurityTradeRequest::count() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityTradeRequest.count)
  return _internal_count();
}
inline void SecurityTradeRequest::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityTradeRequest.count)
}
inline ::int32_t SecurityTradeRequest::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void SecurityTradeRequest::_internal_set_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// SecurityTradeResponse

// string symbol = 1 [json_name = "symbol"];
inline void SecurityTradeResponse::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityTradeResponse::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityTradeResponse.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityTradeResponse::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityTradeResponse.symbol)
}
inline std::string* SecurityTradeResponse::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityTradeResponse.symbol)
  return _s;
}
inline const std::string& SecurityTradeResponse::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityTradeResponse::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityTradeResponse::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityTradeResponse::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityTradeResponse.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityTradeResponse::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityTradeResponse.symbol)
}

// repeated .longportapp.quote.v1.Trade trades = 2 [json_name = "trades"];
inline int SecurityTradeResponse::_internal_trades_size() const {
  return _internal_trades().size();
}
inline int SecurityTradeResponse::trades_size() const {
  return _internal_trades_size();
}
inline void SecurityTradeResponse::clear_trades() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trades_.Clear();
}
inline ::longportapp::quote::v1::Trade* SecurityTradeResponse::mutable_trades(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityTradeResponse.trades)
  return _internal_mutable_trades()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>* SecurityTradeResponse::mutable_trades()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityTradeResponse.trades)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_trades();
}
inline const ::longportapp::quote::v1::Trade& SecurityTradeResponse::trades(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityTradeResponse.trades)
  return _internal_trades().Get(index);
}
inline ::longportapp::quote::v1::Trade* SecurityTradeResponse::add_trades() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Trade* _add = _internal_mutable_trades()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityTradeResponse.trades)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>& SecurityTradeResponse::trades() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityTradeResponse.trades)
  return _internal_trades();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>&
SecurityTradeResponse::_internal_trades() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trades_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>*
SecurityTradeResponse::_internal_mutable_trades() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.trades_;
}

// -------------------------------------------------------------------

// Trade

// string price = 1 [json_name = "price"];
inline void Trade::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.ClearToEmpty();
}
inline const std::string& Trade::price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Trade.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Trade::set_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Trade.price)
}
inline std::string* Trade::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Trade.price)
  return _s;
}
inline const std::string& Trade::_internal_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_.Get();
}
inline void Trade::_internal_set_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(value, GetArena());
}
inline std::string* Trade::_internal_mutable_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.price_.Mutable( GetArena());
}
inline std::string* Trade::release_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Trade.price)
  return _impl_.price_.Release();
}
inline void Trade::set_allocated_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Trade.price)
}

// int64 volume = 2 [json_name = "volume"];
inline void Trade::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t Trade::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Trade.volume)
  return _internal_volume();
}
inline void Trade::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Trade.volume)
}
inline ::int64_t Trade::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void Trade::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// int64 timestamp = 3 [json_name = "timestamp"];
inline void Trade::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t Trade::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Trade.timestamp)
  return _internal_timestamp();
}
inline void Trade::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Trade.timestamp)
}
inline ::int64_t Trade::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void Trade::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// string trade_type = 4 [json_name = "tradeType"];
inline void Trade::clear_trade_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_type_.ClearToEmpty();
}
inline const std::string& Trade::trade_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Trade.trade_type)
  return _internal_trade_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Trade::set_trade_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Trade.trade_type)
}
inline std::string* Trade::mutable_trade_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trade_type();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Trade.trade_type)
  return _s;
}
inline const std::string& Trade::_internal_trade_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trade_type_.Get();
}
inline void Trade::_internal_set_trade_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_type_.Set(value, GetArena());
}
inline std::string* Trade::_internal_mutable_trade_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.trade_type_.Mutable( GetArena());
}
inline std::string* Trade::release_trade_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Trade.trade_type)
  return _impl_.trade_type_.Release();
}
inline void Trade::set_allocated_trade_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trade_type_.IsDefault()) {
          _impl_.trade_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Trade.trade_type)
}

// int32 direction = 5 [json_name = "direction"];
inline void Trade::clear_direction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.direction_ = 0;
}
inline ::int32_t Trade::direction() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Trade.direction)
  return _internal_direction();
}
inline void Trade::set_direction(::int32_t value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Trade.direction)
}
inline ::int32_t Trade::_internal_direction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.direction_;
}
inline void Trade::_internal_set_direction(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.direction_ = value;
}

// .longportapp.quote.v1.TradeSession trade_session = 6 [json_name = "tradeSession"];
inline void Trade::clear_trade_session() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_session_ = 0;
}
inline ::longportapp::quote::v1::TradeSession Trade::trade_session() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Trade.trade_session)
  return _internal_trade_session();
}
inline void Trade::set_trade_session(::longportapp::quote::v1::TradeSession value) {
  _internal_set_trade_session(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Trade.trade_session)
}
inline ::longportapp::quote::v1::TradeSession Trade::_internal_trade_session() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::TradeSession>(_impl_.trade_session_);
}
inline void Trade::_internal_set_trade_session(::longportapp::quote::v1::TradeSession value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_session_ = value;
}

// -------------------------------------------------------------------

// SecurityIntradayRequest

// string symbol = 1 [json_name = "symbol"];
inline void SecurityIntradayRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityIntradayRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityIntradayRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityIntradayRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityIntradayRequest.symbol)
}
inline std::string* SecurityIntradayRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityIntradayRequest.symbol)
  return _s;
}
inline const std::string& SecurityIntradayRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityIntradayRequest::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityIntradayRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityIntradayRequest::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityIntradayRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityIntradayRequest::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityIntradayRequest.symbol)
}

// -------------------------------------------------------------------

// SecurityIntradayResponse

// string symbol = 1 [json_name = "symbol"];
inline void SecurityIntradayResponse::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityIntradayResponse::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityIntradayResponse.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityIntradayResponse::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityIntradayResponse.symbol)
}
inline std::string* SecurityIntradayResponse::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityIntradayResponse.symbol)
  return _s;
}
inline const std::string& SecurityIntradayResponse::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityIntradayResponse::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityIntradayResponse::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityIntradayResponse::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityIntradayResponse.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityIntradayResponse::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityIntradayResponse.symbol)
}

// repeated .longportapp.quote.v1.Line lines = 2 [json_name = "lines"];
inline int SecurityIntradayResponse::_internal_lines_size() const {
  return _internal_lines().size();
}
inline int SecurityIntradayResponse::lines_size() const {
  return _internal_lines_size();
}
inline void SecurityIntradayResponse::clear_lines() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lines_.Clear();
}
inline ::longportapp::quote::v1::Line* SecurityIntradayResponse::mutable_lines(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityIntradayResponse.lines)
  return _internal_mutable_lines()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Line>* SecurityIntradayResponse::mutable_lines()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityIntradayResponse.lines)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_lines();
}
inline const ::longportapp::quote::v1::Line& SecurityIntradayResponse::lines(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityIntradayResponse.lines)
  return _internal_lines().Get(index);
}
inline ::longportapp::quote::v1::Line* SecurityIntradayResponse::add_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Line* _add = _internal_mutable_lines()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityIntradayResponse.lines)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Line>& SecurityIntradayResponse::lines() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityIntradayResponse.lines)
  return _internal_lines();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Line>&
SecurityIntradayResponse::_internal_lines() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lines_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Line>*
SecurityIntradayResponse::_internal_mutable_lines() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.lines_;
}

// -------------------------------------------------------------------

// Line

// string price = 1 [json_name = "price"];
inline void Line::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.ClearToEmpty();
}
inline const std::string& Line::price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Line.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Line::set_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Line.price)
}
inline std::string* Line::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Line.price)
  return _s;
}
inline const std::string& Line::_internal_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_.Get();
}
inline void Line::_internal_set_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(value, GetArena());
}
inline std::string* Line::_internal_mutable_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.price_.Mutable( GetArena());
}
inline std::string* Line::release_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Line.price)
  return _impl_.price_.Release();
}
inline void Line::set_allocated_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Line.price)
}

// int64 timestamp = 2 [json_name = "timestamp"];
inline void Line::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t Line::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Line.timestamp)
  return _internal_timestamp();
}
inline void Line::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Line.timestamp)
}
inline ::int64_t Line::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void Line::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// int64 volume = 3 [json_name = "volume"];
inline void Line::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t Line::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Line.volume)
  return _internal_volume();
}
inline void Line::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Line.volume)
}
inline ::int64_t Line::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void Line::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// string turnover = 4 [json_name = "turnover"];
inline void Line::clear_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.ClearToEmpty();
}
inline const std::string& Line::turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Line.turnover)
  return _internal_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Line::set_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Line.turnover)
}
inline std::string* Line::mutable_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Line.turnover)
  return _s;
}
inline const std::string& Line::_internal_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_.Get();
}
inline void Line::_internal_set_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(value, GetArena());
}
inline std::string* Line::_internal_mutable_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_.Mutable( GetArena());
}
inline std::string* Line::release_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Line.turnover)
  return _impl_.turnover_.Release();
}
inline void Line::set_allocated_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_.IsDefault()) {
          _impl_.turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Line.turnover)
}

// string avg_price = 5 [json_name = "avgPrice"];
inline void Line::clear_avg_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avg_price_.ClearToEmpty();
}
inline const std::string& Line::avg_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Line.avg_price)
  return _internal_avg_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Line::set_avg_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avg_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Line.avg_price)
}
inline std::string* Line::mutable_avg_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_avg_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Line.avg_price)
  return _s;
}
inline const std::string& Line::_internal_avg_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avg_price_.Get();
}
inline void Line::_internal_set_avg_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avg_price_.Set(value, GetArena());
}
inline std::string* Line::_internal_mutable_avg_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avg_price_.Mutable( GetArena());
}
inline std::string* Line::release_avg_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Line.avg_price)
  return _impl_.avg_price_.Release();
}
inline void Line::set_allocated_avg_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avg_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avg_price_.IsDefault()) {
          _impl_.avg_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Line.avg_price)
}

// -------------------------------------------------------------------

// SecurityCandlestickRequest

// string symbol = 1 [json_name = "symbol"];
inline void SecurityCandlestickRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityCandlestickRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCandlestickRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCandlestickRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCandlestickRequest.symbol)
}
inline std::string* SecurityCandlestickRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCandlestickRequest.symbol)
  return _s;
}
inline const std::string& SecurityCandlestickRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityCandlestickRequest::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityCandlestickRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityCandlestickRequest::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCandlestickRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityCandlestickRequest::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCandlestickRequest.symbol)
}

// .longportapp.quote.v1.Period period = 2 [json_name = "period"];
inline void SecurityCandlestickRequest::clear_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.period_ = 0;
}
inline ::longportapp::quote::v1::Period SecurityCandlestickRequest::period() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCandlestickRequest.period)
  return _internal_period();
}
inline void SecurityCandlestickRequest::set_period(::longportapp::quote::v1::Period value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCandlestickRequest.period)
}
inline ::longportapp::quote::v1::Period SecurityCandlestickRequest::_internal_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::Period>(_impl_.period_);
}
inline void SecurityCandlestickRequest::_internal_set_period(::longportapp::quote::v1::Period value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.period_ = value;
}

// int32 count = 3 [json_name = "count"];
inline void SecurityCandlestickRequest::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = 0;
}
inline ::int32_t SecurityCandlestickRequest::count() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCandlestickRequest.count)
  return _internal_count();
}
inline void SecurityCandlestickRequest::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCandlestickRequest.count)
}
inline ::int32_t SecurityCandlestickRequest::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void SecurityCandlestickRequest::_internal_set_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

// .longportapp.quote.v1.AdjustType adjust_type = 4 [json_name = "adjustType"];
inline void SecurityCandlestickRequest::clear_adjust_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adjust_type_ = 0;
}
inline ::longportapp::quote::v1::AdjustType SecurityCandlestickRequest::adjust_type() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCandlestickRequest.adjust_type)
  return _internal_adjust_type();
}
inline void SecurityCandlestickRequest::set_adjust_type(::longportapp::quote::v1::AdjustType value) {
  _internal_set_adjust_type(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCandlestickRequest.adjust_type)
}
inline ::longportapp::quote::v1::AdjustType SecurityCandlestickRequest::_internal_adjust_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::AdjustType>(_impl_.adjust_type_);
}
inline void SecurityCandlestickRequest::_internal_set_adjust_type(::longportapp::quote::v1::AdjustType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adjust_type_ = value;
}

// -------------------------------------------------------------------

// SecurityCandlestickResponse

// string symbol = 1 [json_name = "symbol"];
inline void SecurityCandlestickResponse::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityCandlestickResponse::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCandlestickResponse.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCandlestickResponse::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCandlestickResponse.symbol)
}
inline std::string* SecurityCandlestickResponse::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCandlestickResponse.symbol)
  return _s;
}
inline const std::string& SecurityCandlestickResponse::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityCandlestickResponse::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityCandlestickResponse::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityCandlestickResponse::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCandlestickResponse.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityCandlestickResponse::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCandlestickResponse.symbol)
}

// repeated .longportapp.quote.v1.Candlestick candlesticks = 2 [json_name = "candlesticks"];
inline int SecurityCandlestickResponse::_internal_candlesticks_size() const {
  return _internal_candlesticks().size();
}
inline int SecurityCandlestickResponse::candlesticks_size() const {
  return _internal_candlesticks_size();
}
inline void SecurityCandlestickResponse::clear_candlesticks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.candlesticks_.Clear();
}
inline ::longportapp::quote::v1::Candlestick* SecurityCandlestickResponse::mutable_candlesticks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCandlestickResponse.candlesticks)
  return _internal_mutable_candlesticks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Candlestick>* SecurityCandlestickResponse::mutable_candlesticks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityCandlestickResponse.candlesticks)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_candlesticks();
}
inline const ::longportapp::quote::v1::Candlestick& SecurityCandlestickResponse::candlesticks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCandlestickResponse.candlesticks)
  return _internal_candlesticks().Get(index);
}
inline ::longportapp::quote::v1::Candlestick* SecurityCandlestickResponse::add_candlesticks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Candlestick* _add = _internal_mutable_candlesticks()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityCandlestickResponse.candlesticks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Candlestick>& SecurityCandlestickResponse::candlesticks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityCandlestickResponse.candlesticks)
  return _internal_candlesticks();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Candlestick>&
SecurityCandlestickResponse::_internal_candlesticks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.candlesticks_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Candlestick>*
SecurityCandlestickResponse::_internal_mutable_candlesticks() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.candlesticks_;
}

// -------------------------------------------------------------------

// Candlestick

// string close = 1 [json_name = "close"];
inline void Candlestick::clear_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.close_.ClearToEmpty();
}
inline const std::string& Candlestick::close() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Candlestick.close)
  return _internal_close();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Candlestick::set_close(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.close_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Candlestick.close)
}
inline std::string* Candlestick::mutable_close() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_close();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Candlestick.close)
  return _s;
}
inline const std::string& Candlestick::_internal_close() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.close_.Get();
}
inline void Candlestick::_internal_set_close(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.close_.Set(value, GetArena());
}
inline std::string* Candlestick::_internal_mutable_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.close_.Mutable( GetArena());
}
inline std::string* Candlestick::release_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Candlestick.close)
  return _impl_.close_.Release();
}
inline void Candlestick::set_allocated_close(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.close_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.close_.IsDefault()) {
          _impl_.close_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Candlestick.close)
}

// string open = 2 [json_name = "open"];
inline void Candlestick::clear_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.ClearToEmpty();
}
inline const std::string& Candlestick::open() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Candlestick.open)
  return _internal_open();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Candlestick::set_open(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Candlestick.open)
}
inline std::string* Candlestick::mutable_open() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Candlestick.open)
  return _s;
}
inline const std::string& Candlestick::_internal_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_.Get();
}
inline void Candlestick::_internal_set_open(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(value, GetArena());
}
inline std::string* Candlestick::_internal_mutable_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_.Mutable( GetArena());
}
inline std::string* Candlestick::release_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Candlestick.open)
  return _impl_.open_.Release();
}
inline void Candlestick::set_allocated_open(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_.IsDefault()) {
          _impl_.open_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Candlestick.open)
}

// string low = 3 [json_name = "low"];
inline void Candlestick::clear_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.ClearToEmpty();
}
inline const std::string& Candlestick::low() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Candlestick.low)
  return _internal_low();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Candlestick::set_low(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Candlestick.low)
}
inline std::string* Candlestick::mutable_low() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_low();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Candlestick.low)
  return _s;
}
inline const std::string& Candlestick::_internal_low() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.low_.Get();
}
inline void Candlestick::_internal_set_low(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(value, GetArena());
}
inline std::string* Candlestick::_internal_mutable_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.low_.Mutable( GetArena());
}
inline std::string* Candlestick::release_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Candlestick.low)
  return _impl_.low_.Release();
}
inline void Candlestick::set_allocated_low(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.low_.IsDefault()) {
          _impl_.low_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Candlestick.low)
}

// string high = 4 [json_name = "high"];
inline void Candlestick::clear_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.ClearToEmpty();
}
inline const std::string& Candlestick::high() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Candlestick.high)
  return _internal_high();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Candlestick::set_high(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Candlestick.high)
}
inline std::string* Candlestick::mutable_high() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_high();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Candlestick.high)
  return _s;
}
inline const std::string& Candlestick::_internal_high() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.high_.Get();
}
inline void Candlestick::_internal_set_high(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(value, GetArena());
}
inline std::string* Candlestick::_internal_mutable_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.high_.Mutable( GetArena());
}
inline std::string* Candlestick::release_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Candlestick.high)
  return _impl_.high_.Release();
}
inline void Candlestick::set_allocated_high(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.high_.IsDefault()) {
          _impl_.high_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Candlestick.high)
}

// int64 volume = 5 [json_name = "volume"];
inline void Candlestick::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t Candlestick::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Candlestick.volume)
  return _internal_volume();
}
inline void Candlestick::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Candlestick.volume)
}
inline ::int64_t Candlestick::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void Candlestick::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// string turnover = 6 [json_name = "turnover"];
inline void Candlestick::clear_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.ClearToEmpty();
}
inline const std::string& Candlestick::turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Candlestick.turnover)
  return _internal_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Candlestick::set_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Candlestick.turnover)
}
inline std::string* Candlestick::mutable_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.Candlestick.turnover)
  return _s;
}
inline const std::string& Candlestick::_internal_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_.Get();
}
inline void Candlestick::_internal_set_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(value, GetArena());
}
inline std::string* Candlestick::_internal_mutable_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_.Mutable( GetArena());
}
inline std::string* Candlestick::release_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.Candlestick.turnover)
  return _impl_.turnover_.Release();
}
inline void Candlestick::set_allocated_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_.IsDefault()) {
          _impl_.turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.Candlestick.turnover)
}

// int64 timestamp = 7 [json_name = "timestamp"];
inline void Candlestick::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t Candlestick::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.Candlestick.timestamp)
  return _internal_timestamp();
}
inline void Candlestick::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.Candlestick.timestamp)
}
inline ::int64_t Candlestick::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void Candlestick::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// OptionChainDateListResponse

// repeated string expiry_date = 1 [json_name = "expiryDate"];
inline int OptionChainDateListResponse::_internal_expiry_date_size() const {
  return _internal_expiry_date().size();
}
inline int OptionChainDateListResponse::expiry_date_size() const {
  return _internal_expiry_date_size();
}
inline void OptionChainDateListResponse::clear_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.Clear();
}
inline std::string* OptionChainDateListResponse::add_expiry_date()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_expiry_date()->Add();
  // @@protoc_insertion_point(field_add_mutable:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
  return _s;
}
inline const std::string& OptionChainDateListResponse::expiry_date(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
  return _internal_expiry_date().Get(index);
}
inline std::string* OptionChainDateListResponse::mutable_expiry_date(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
  return _internal_mutable_expiry_date()->Mutable(index);
}
inline void OptionChainDateListResponse::set_expiry_date(int index, const std::string& value) {
  _internal_mutable_expiry_date()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline void OptionChainDateListResponse::set_expiry_date(int index, std::string&& value) {
  _internal_mutable_expiry_date()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline void OptionChainDateListResponse::set_expiry_date(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_expiry_date()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline void OptionChainDateListResponse::set_expiry_date(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_expiry_date()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline void OptionChainDateListResponse::set_expiry_date(int index, absl::string_view value) {
  _internal_mutable_expiry_date()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline void OptionChainDateListResponse::add_expiry_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_expiry_date()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline void OptionChainDateListResponse::add_expiry_date(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_expiry_date()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline void OptionChainDateListResponse::add_expiry_date(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_expiry_date()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline void OptionChainDateListResponse::add_expiry_date(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_expiry_date()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline void OptionChainDateListResponse::add_expiry_date(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_expiry_date()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
OptionChainDateListResponse::expiry_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
  return _internal_expiry_date();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
OptionChainDateListResponse::mutable_expiry_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.OptionChainDateListResponse.expiry_date)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_expiry_date();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
OptionChainDateListResponse::_internal_expiry_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expiry_date_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
OptionChainDateListResponse::_internal_mutable_expiry_date() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.expiry_date_;
}

// -------------------------------------------------------------------

// OptionChainDateStrikeInfoRequest

// string symbol = 1 [json_name = "symbol"];
inline void OptionChainDateStrikeInfoRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& OptionChainDateStrikeInfoRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionChainDateStrikeInfoRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.symbol)
}
inline std::string* OptionChainDateStrikeInfoRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.symbol)
  return _s;
}
inline const std::string& OptionChainDateStrikeInfoRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void OptionChainDateStrikeInfoRequest::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* OptionChainDateStrikeInfoRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* OptionChainDateStrikeInfoRequest::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void OptionChainDateStrikeInfoRequest::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.symbol)
}

// string expiry_date = 2 [json_name = "expiryDate"];
inline void OptionChainDateStrikeInfoRequest::clear_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.ClearToEmpty();
}
inline const std::string& OptionChainDateStrikeInfoRequest::expiry_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.expiry_date)
  return _internal_expiry_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionChainDateStrikeInfoRequest::set_expiry_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.expiry_date)
}
inline std::string* OptionChainDateStrikeInfoRequest::mutable_expiry_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiry_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.expiry_date)
  return _s;
}
inline const std::string& OptionChainDateStrikeInfoRequest::_internal_expiry_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expiry_date_.Get();
}
inline void OptionChainDateStrikeInfoRequest::_internal_set_expiry_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(value, GetArena());
}
inline std::string* OptionChainDateStrikeInfoRequest::_internal_mutable_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.expiry_date_.Mutable( GetArena());
}
inline std::string* OptionChainDateStrikeInfoRequest::release_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.expiry_date)
  return _impl_.expiry_date_.Release();
}
inline void OptionChainDateStrikeInfoRequest::set_allocated_expiry_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expiry_date_.IsDefault()) {
          _impl_.expiry_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.OptionChainDateStrikeInfoRequest.expiry_date)
}

// -------------------------------------------------------------------

// OptionChainDateStrikeInfoResponse

// repeated .longportapp.quote.v1.StrikePriceInfo strike_price_info = 1 [json_name = "strikePriceInfo"];
inline int OptionChainDateStrikeInfoResponse::_internal_strike_price_info_size() const {
  return _internal_strike_price_info().size();
}
inline int OptionChainDateStrikeInfoResponse::strike_price_info_size() const {
  return _internal_strike_price_info_size();
}
inline void OptionChainDateStrikeInfoResponse::clear_strike_price_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strike_price_info_.Clear();
}
inline ::longportapp::quote::v1::StrikePriceInfo* OptionChainDateStrikeInfoResponse::mutable_strike_price_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.OptionChainDateStrikeInfoResponse.strike_price_info)
  return _internal_mutable_strike_price_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StrikePriceInfo>* OptionChainDateStrikeInfoResponse::mutable_strike_price_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.OptionChainDateStrikeInfoResponse.strike_price_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_strike_price_info();
}
inline const ::longportapp::quote::v1::StrikePriceInfo& OptionChainDateStrikeInfoResponse::strike_price_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.OptionChainDateStrikeInfoResponse.strike_price_info)
  return _internal_strike_price_info().Get(index);
}
inline ::longportapp::quote::v1::StrikePriceInfo* OptionChainDateStrikeInfoResponse::add_strike_price_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::StrikePriceInfo* _add = _internal_mutable_strike_price_info()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.OptionChainDateStrikeInfoResponse.strike_price_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StrikePriceInfo>& OptionChainDateStrikeInfoResponse::strike_price_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.OptionChainDateStrikeInfoResponse.strike_price_info)
  return _internal_strike_price_info();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StrikePriceInfo>&
OptionChainDateStrikeInfoResponse::_internal_strike_price_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strike_price_info_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::StrikePriceInfo>*
OptionChainDateStrikeInfoResponse::_internal_mutable_strike_price_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.strike_price_info_;
}

// -------------------------------------------------------------------

// StrikePriceInfo

// string price = 1 [json_name = "price"];
inline void StrikePriceInfo::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.ClearToEmpty();
}
inline const std::string& StrikePriceInfo::price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StrikePriceInfo.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StrikePriceInfo::set_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StrikePriceInfo.price)
}
inline std::string* StrikePriceInfo::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StrikePriceInfo.price)
  return _s;
}
inline const std::string& StrikePriceInfo::_internal_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_.Get();
}
inline void StrikePriceInfo::_internal_set_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(value, GetArena());
}
inline std::string* StrikePriceInfo::_internal_mutable_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.price_.Mutable( GetArena());
}
inline std::string* StrikePriceInfo::release_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StrikePriceInfo.price)
  return _impl_.price_.Release();
}
inline void StrikePriceInfo::set_allocated_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StrikePriceInfo.price)
}

// string call_symbol = 2 [json_name = "callSymbol"];
inline void StrikePriceInfo::clear_call_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.call_symbol_.ClearToEmpty();
}
inline const std::string& StrikePriceInfo::call_symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StrikePriceInfo.call_symbol)
  return _internal_call_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StrikePriceInfo::set_call_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.call_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StrikePriceInfo.call_symbol)
}
inline std::string* StrikePriceInfo::mutable_call_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_call_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StrikePriceInfo.call_symbol)
  return _s;
}
inline const std::string& StrikePriceInfo::_internal_call_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.call_symbol_.Get();
}
inline void StrikePriceInfo::_internal_set_call_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.call_symbol_.Set(value, GetArena());
}
inline std::string* StrikePriceInfo::_internal_mutable_call_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.call_symbol_.Mutable( GetArena());
}
inline std::string* StrikePriceInfo::release_call_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StrikePriceInfo.call_symbol)
  return _impl_.call_symbol_.Release();
}
inline void StrikePriceInfo::set_allocated_call_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.call_symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.call_symbol_.IsDefault()) {
          _impl_.call_symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StrikePriceInfo.call_symbol)
}

// string put_symbol = 3 [json_name = "putSymbol"];
inline void StrikePriceInfo::clear_put_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.put_symbol_.ClearToEmpty();
}
inline const std::string& StrikePriceInfo::put_symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StrikePriceInfo.put_symbol)
  return _internal_put_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StrikePriceInfo::set_put_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.put_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StrikePriceInfo.put_symbol)
}
inline std::string* StrikePriceInfo::mutable_put_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_put_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.StrikePriceInfo.put_symbol)
  return _s;
}
inline const std::string& StrikePriceInfo::_internal_put_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.put_symbol_.Get();
}
inline void StrikePriceInfo::_internal_set_put_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.put_symbol_.Set(value, GetArena());
}
inline std::string* StrikePriceInfo::_internal_mutable_put_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.put_symbol_.Mutable( GetArena());
}
inline std::string* StrikePriceInfo::release_put_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.StrikePriceInfo.put_symbol)
  return _impl_.put_symbol_.Release();
}
inline void StrikePriceInfo::set_allocated_put_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.put_symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.put_symbol_.IsDefault()) {
          _impl_.put_symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.StrikePriceInfo.put_symbol)
}

// bool standard = 4 [json_name = "standard"];
inline void StrikePriceInfo::clear_standard() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.standard_ = false;
}
inline bool StrikePriceInfo::standard() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.StrikePriceInfo.standard)
  return _internal_standard();
}
inline void StrikePriceInfo::set_standard(bool value) {
  _internal_set_standard(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.StrikePriceInfo.standard)
}
inline bool StrikePriceInfo::_internal_standard() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.standard_;
}
inline void StrikePriceInfo::_internal_set_standard(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.standard_ = value;
}

// -------------------------------------------------------------------

// IssuerInfoResponse

// repeated .longportapp.quote.v1.IssuerInfo issuer_info = 1 [json_name = "issuerInfo"];
inline int IssuerInfoResponse::_internal_issuer_info_size() const {
  return _internal_issuer_info().size();
}
inline int IssuerInfoResponse::issuer_info_size() const {
  return _internal_issuer_info_size();
}
inline void IssuerInfoResponse::clear_issuer_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issuer_info_.Clear();
}
inline ::longportapp::quote::v1::IssuerInfo* IssuerInfoResponse::mutable_issuer_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.IssuerInfoResponse.issuer_info)
  return _internal_mutable_issuer_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::IssuerInfo>* IssuerInfoResponse::mutable_issuer_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.IssuerInfoResponse.issuer_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_issuer_info();
}
inline const ::longportapp::quote::v1::IssuerInfo& IssuerInfoResponse::issuer_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.IssuerInfoResponse.issuer_info)
  return _internal_issuer_info().Get(index);
}
inline ::longportapp::quote::v1::IssuerInfo* IssuerInfoResponse::add_issuer_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::IssuerInfo* _add = _internal_mutable_issuer_info()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.IssuerInfoResponse.issuer_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::IssuerInfo>& IssuerInfoResponse::issuer_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.IssuerInfoResponse.issuer_info)
  return _internal_issuer_info();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::IssuerInfo>&
IssuerInfoResponse::_internal_issuer_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issuer_info_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::IssuerInfo>*
IssuerInfoResponse::_internal_mutable_issuer_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.issuer_info_;
}

// -------------------------------------------------------------------

// IssuerInfo

// int32 id = 1 [json_name = "id"];
inline void IssuerInfo::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t IssuerInfo::id() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.IssuerInfo.id)
  return _internal_id();
}
inline void IssuerInfo::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.IssuerInfo.id)
}
inline ::int32_t IssuerInfo::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void IssuerInfo::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name_cn = 2 [json_name = "nameCn"];
inline void IssuerInfo::clear_name_cn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_cn_.ClearToEmpty();
}
inline const std::string& IssuerInfo::name_cn() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.IssuerInfo.name_cn)
  return _internal_name_cn();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IssuerInfo::set_name_cn(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_cn_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.IssuerInfo.name_cn)
}
inline std::string* IssuerInfo::mutable_name_cn() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_cn();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.IssuerInfo.name_cn)
  return _s;
}
inline const std::string& IssuerInfo::_internal_name_cn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_cn_.Get();
}
inline void IssuerInfo::_internal_set_name_cn(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_cn_.Set(value, GetArena());
}
inline std::string* IssuerInfo::_internal_mutable_name_cn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_cn_.Mutable( GetArena());
}
inline std::string* IssuerInfo::release_name_cn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.IssuerInfo.name_cn)
  return _impl_.name_cn_.Release();
}
inline void IssuerInfo::set_allocated_name_cn(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_cn_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_cn_.IsDefault()) {
          _impl_.name_cn_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.IssuerInfo.name_cn)
}

// string name_en = 3 [json_name = "nameEn"];
inline void IssuerInfo::clear_name_en() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_en_.ClearToEmpty();
}
inline const std::string& IssuerInfo::name_en() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.IssuerInfo.name_en)
  return _internal_name_en();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IssuerInfo::set_name_en(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_en_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.IssuerInfo.name_en)
}
inline std::string* IssuerInfo::mutable_name_en() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_en();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.IssuerInfo.name_en)
  return _s;
}
inline const std::string& IssuerInfo::_internal_name_en() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_en_.Get();
}
inline void IssuerInfo::_internal_set_name_en(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_en_.Set(value, GetArena());
}
inline std::string* IssuerInfo::_internal_mutable_name_en() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_en_.Mutable( GetArena());
}
inline std::string* IssuerInfo::release_name_en() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.IssuerInfo.name_en)
  return _impl_.name_en_.Release();
}
inline void IssuerInfo::set_allocated_name_en(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_en_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_en_.IsDefault()) {
          _impl_.name_en_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.IssuerInfo.name_en)
}

// string name_hk = 4 [json_name = "nameHk"];
inline void IssuerInfo::clear_name_hk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_hk_.ClearToEmpty();
}
inline const std::string& IssuerInfo::name_hk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.IssuerInfo.name_hk)
  return _internal_name_hk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IssuerInfo::set_name_hk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_hk_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.IssuerInfo.name_hk)
}
inline std::string* IssuerInfo::mutable_name_hk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_hk();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.IssuerInfo.name_hk)
  return _s;
}
inline const std::string& IssuerInfo::_internal_name_hk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_hk_.Get();
}
inline void IssuerInfo::_internal_set_name_hk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_hk_.Set(value, GetArena());
}
inline std::string* IssuerInfo::_internal_mutable_name_hk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_hk_.Mutable( GetArena());
}
inline std::string* IssuerInfo::release_name_hk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.IssuerInfo.name_hk)
  return _impl_.name_hk_.Release();
}
inline void IssuerInfo::set_allocated_name_hk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_hk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_hk_.IsDefault()) {
          _impl_.name_hk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.IssuerInfo.name_hk)
}

// -------------------------------------------------------------------

// WarrantFilterListRequest

// string symbol = 1 [json_name = "symbol"];
inline void WarrantFilterListRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& WarrantFilterListRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantFilterListRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WarrantFilterListRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantFilterListRequest.symbol)
}
inline std::string* WarrantFilterListRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantFilterListRequest.symbol)
  return _s;
}
inline const std::string& WarrantFilterListRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void WarrantFilterListRequest::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* WarrantFilterListRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* WarrantFilterListRequest::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantFilterListRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void WarrantFilterListRequest::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantFilterListRequest.symbol)
}

// .longportapp.quote.v1.FilterConfig filter_config = 2 [json_name = "filterConfig"];
inline bool WarrantFilterListRequest::has_filter_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_config_ != nullptr);
  return value;
}
inline void WarrantFilterListRequest::clear_filter_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.filter_config_ != nullptr) _impl_.filter_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::longportapp::quote::v1::FilterConfig& WarrantFilterListRequest::_internal_filter_config() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::FilterConfig* p = _impl_.filter_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::FilterConfig&>(::longportapp::quote::v1::_FilterConfig_default_instance_);
}
inline const ::longportapp::quote::v1::FilterConfig& WarrantFilterListRequest::filter_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantFilterListRequest.filter_config)
  return _internal_filter_config();
}
inline void WarrantFilterListRequest::unsafe_arena_set_allocated_filter_config(::longportapp::quote::v1::FilterConfig* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.filter_config_);
  }
  _impl_.filter_config_ = reinterpret_cast<::longportapp::quote::v1::FilterConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.WarrantFilterListRequest.filter_config)
}
inline ::longportapp::quote::v1::FilterConfig* WarrantFilterListRequest::release_filter_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::FilterConfig* released = _impl_.filter_config_;
  _impl_.filter_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::FilterConfig* WarrantFilterListRequest::unsafe_arena_release_filter_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.WarrantFilterListRequest.filter_config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::FilterConfig* temp = _impl_.filter_config_;
  _impl_.filter_config_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::FilterConfig* WarrantFilterListRequest::_internal_mutable_filter_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.filter_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::FilterConfig>(GetArena());
    _impl_.filter_config_ = reinterpret_cast<::longportapp::quote::v1::FilterConfig*>(p);
  }
  return _impl_.filter_config_;
}
inline ::longportapp::quote::v1::FilterConfig* WarrantFilterListRequest::mutable_filter_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::FilterConfig* _msg = _internal_mutable_filter_config();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantFilterListRequest.filter_config)
  return _msg;
}
inline void WarrantFilterListRequest::set_allocated_filter_config(::longportapp::quote::v1::FilterConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::FilterConfig*>(_impl_.filter_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::FilterConfig*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.filter_config_ = reinterpret_cast<::longportapp::quote::v1::FilterConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.WarrantFilterListRequest.filter_config)
}

// int32 language = 3 [json_name = "language"];
inline void WarrantFilterListRequest::clear_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_ = 0;
}
inline ::int32_t WarrantFilterListRequest::language() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantFilterListRequest.language)
  return _internal_language();
}
inline void WarrantFilterListRequest::set_language(::int32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantFilterListRequest.language)
}
inline ::int32_t WarrantFilterListRequest::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_;
}
inline void WarrantFilterListRequest::_internal_set_language(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_ = value;
}

// -------------------------------------------------------------------

// FilterConfig

// int32 sort_by = 1 [json_name = "sortBy"];
inline void FilterConfig::clear_sort_by() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sort_by_ = 0;
}
inline ::int32_t FilterConfig::sort_by() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterConfig.sort_by)
  return _internal_sort_by();
}
inline void FilterConfig::set_sort_by(::int32_t value) {
  _internal_set_sort_by(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterConfig.sort_by)
}
inline ::int32_t FilterConfig::_internal_sort_by() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sort_by_;
}
inline void FilterConfig::_internal_set_sort_by(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sort_by_ = value;
}

// int32 sort_order = 2 [json_name = "sortOrder"];
inline void FilterConfig::clear_sort_order() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sort_order_ = 0;
}
inline ::int32_t FilterConfig::sort_order() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterConfig.sort_order)
  return _internal_sort_order();
}
inline void FilterConfig::set_sort_order(::int32_t value) {
  _internal_set_sort_order(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterConfig.sort_order)
}
inline ::int32_t FilterConfig::_internal_sort_order() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sort_order_;
}
inline void FilterConfig::_internal_set_sort_order(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sort_order_ = value;
}

// int32 sort_offset = 3 [json_name = "sortOffset"];
inline void FilterConfig::clear_sort_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sort_offset_ = 0;
}
inline ::int32_t FilterConfig::sort_offset() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterConfig.sort_offset)
  return _internal_sort_offset();
}
inline void FilterConfig::set_sort_offset(::int32_t value) {
  _internal_set_sort_offset(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterConfig.sort_offset)
}
inline ::int32_t FilterConfig::_internal_sort_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sort_offset_;
}
inline void FilterConfig::_internal_set_sort_offset(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sort_offset_ = value;
}

// int32 sort_count = 4 [json_name = "sortCount"];
inline void FilterConfig::clear_sort_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sort_count_ = 0;
}
inline ::int32_t FilterConfig::sort_count() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterConfig.sort_count)
  return _internal_sort_count();
}
inline void FilterConfig::set_sort_count(::int32_t value) {
  _internal_set_sort_count(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterConfig.sort_count)
}
inline ::int32_t FilterConfig::_internal_sort_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sort_count_;
}
inline void FilterConfig::_internal_set_sort_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sort_count_ = value;
}

// repeated int32 type = 5 [json_name = "type"];
inline int FilterConfig::_internal_type_size() const {
  return _internal_type().size();
}
inline int FilterConfig::type_size() const {
  return _internal_type_size();
}
inline void FilterConfig::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.Clear();
}
inline ::int32_t FilterConfig::type(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterConfig.type)
  return _internal_type().Get(index);
}
inline void FilterConfig::set_type(int index, ::int32_t value) {
  _internal_mutable_type()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterConfig.type)
}
inline void FilterConfig::add_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.FilterConfig.type)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.FilterConfig.type)
  return _internal_type();
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::mutable_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.FilterConfig.type)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_type();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::_internal_type()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::_internal_mutable_type() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.type_;
}

// repeated int32 issuer = 6 [json_name = "issuer"];
inline int FilterConfig::_internal_issuer_size() const {
  return _internal_issuer().size();
}
inline int FilterConfig::issuer_size() const {
  return _internal_issuer_size();
}
inline void FilterConfig::clear_issuer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.issuer_.Clear();
}
inline ::int32_t FilterConfig::issuer(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterConfig.issuer)
  return _internal_issuer().Get(index);
}
inline void FilterConfig::set_issuer(int index, ::int32_t value) {
  _internal_mutable_issuer()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterConfig.issuer)
}
inline void FilterConfig::add_issuer(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_issuer()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.FilterConfig.issuer)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::issuer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.FilterConfig.issuer)
  return _internal_issuer();
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::mutable_issuer()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.FilterConfig.issuer)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_issuer();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::_internal_issuer()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.issuer_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::_internal_mutable_issuer() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.issuer_;
}

// repeated int32 expiry_date = 7 [json_name = "expiryDate"];
inline int FilterConfig::_internal_expiry_date_size() const {
  return _internal_expiry_date().size();
}
inline int FilterConfig::expiry_date_size() const {
  return _internal_expiry_date_size();
}
inline void FilterConfig::clear_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.Clear();
}
inline ::int32_t FilterConfig::expiry_date(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterConfig.expiry_date)
  return _internal_expiry_date().Get(index);
}
inline void FilterConfig::set_expiry_date(int index, ::int32_t value) {
  _internal_mutable_expiry_date()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterConfig.expiry_date)
}
inline void FilterConfig::add_expiry_date(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_expiry_date()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.FilterConfig.expiry_date)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::expiry_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.FilterConfig.expiry_date)
  return _internal_expiry_date();
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::mutable_expiry_date()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.FilterConfig.expiry_date)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_expiry_date();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::_internal_expiry_date()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expiry_date_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::_internal_mutable_expiry_date() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.expiry_date_;
}

// repeated int32 price_type = 8 [json_name = "priceType"];
inline int FilterConfig::_internal_price_type_size() const {
  return _internal_price_type().size();
}
inline int FilterConfig::price_type_size() const {
  return _internal_price_type_size();
}
inline void FilterConfig::clear_price_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_type_.Clear();
}
inline ::int32_t FilterConfig::price_type(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterConfig.price_type)
  return _internal_price_type().Get(index);
}
inline void FilterConfig::set_price_type(int index, ::int32_t value) {
  _internal_mutable_price_type()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterConfig.price_type)
}
inline void FilterConfig::add_price_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_price_type()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.FilterConfig.price_type)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::price_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.FilterConfig.price_type)
  return _internal_price_type();
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::mutable_price_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.FilterConfig.price_type)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_price_type();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::_internal_price_type()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_type_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::_internal_mutable_price_type() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.price_type_;
}

// repeated int32 status = 9 [json_name = "status"];
inline int FilterConfig::_internal_status_size() const {
  return _internal_status().size();
}
inline int FilterConfig::status_size() const {
  return _internal_status_size();
}
inline void FilterConfig::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.Clear();
}
inline ::int32_t FilterConfig::status(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterConfig.status)
  return _internal_status().Get(index);
}
inline void FilterConfig::set_status(int index, ::int32_t value) {
  _internal_mutable_status()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterConfig.status)
}
inline void FilterConfig::add_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_status()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.FilterConfig.status)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.FilterConfig.status)
  return _internal_status();
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::mutable_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.FilterConfig.status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_status();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FilterConfig::_internal_status()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* FilterConfig::_internal_mutable_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.status_;
}

// -------------------------------------------------------------------

// WarrantFilterListResponse

// repeated .longportapp.quote.v1.FilterWarrant warrant_list = 1 [json_name = "warrantList"];
inline int WarrantFilterListResponse::_internal_warrant_list_size() const {
  return _internal_warrant_list().size();
}
inline int WarrantFilterListResponse::warrant_list_size() const {
  return _internal_warrant_list_size();
}
inline void WarrantFilterListResponse::clear_warrant_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.warrant_list_.Clear();
}
inline ::longportapp::quote::v1::FilterWarrant* WarrantFilterListResponse::mutable_warrant_list(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.WarrantFilterListResponse.warrant_list)
  return _internal_mutable_warrant_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::FilterWarrant>* WarrantFilterListResponse::mutable_warrant_list()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.WarrantFilterListResponse.warrant_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_warrant_list();
}
inline const ::longportapp::quote::v1::FilterWarrant& WarrantFilterListResponse::warrant_list(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantFilterListResponse.warrant_list)
  return _internal_warrant_list().Get(index);
}
inline ::longportapp::quote::v1::FilterWarrant* WarrantFilterListResponse::add_warrant_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::FilterWarrant* _add = _internal_mutable_warrant_list()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.WarrantFilterListResponse.warrant_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::FilterWarrant>& WarrantFilterListResponse::warrant_list() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.WarrantFilterListResponse.warrant_list)
  return _internal_warrant_list();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::FilterWarrant>&
WarrantFilterListResponse::_internal_warrant_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.warrant_list_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::FilterWarrant>*
WarrantFilterListResponse::_internal_mutable_warrant_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.warrant_list_;
}

// int32 total_count = 2 [json_name = "totalCount"];
inline void WarrantFilterListResponse::clear_total_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_count_ = 0;
}
inline ::int32_t WarrantFilterListResponse::total_count() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.WarrantFilterListResponse.total_count)
  return _internal_total_count();
}
inline void WarrantFilterListResponse::set_total_count(::int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.WarrantFilterListResponse.total_count)
}
inline ::int32_t WarrantFilterListResponse::_internal_total_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_count_;
}
inline void WarrantFilterListResponse::_internal_set_total_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_count_ = value;
}

// -------------------------------------------------------------------

// FilterWarrant

// string symbol = 1 [json_name = "symbol"];
inline void FilterWarrant::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& FilterWarrant::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.symbol)
}
inline std::string* FilterWarrant::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.symbol)
  return _s;
}
inline const std::string& FilterWarrant::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void FilterWarrant::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.symbol)
  return _impl_.symbol_.Release();
}
inline void FilterWarrant::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.symbol)
}

// string name = 2 [json_name = "name"];
inline void FilterWarrant::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FilterWarrant::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.name)
}
inline std::string* FilterWarrant::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.name)
  return _s;
}
inline const std::string& FilterWarrant::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void FilterWarrant::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.name)
  return _impl_.name_.Release();
}
inline void FilterWarrant::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.name)
}

// string last_done = 3 [json_name = "lastDone"];
inline void FilterWarrant::clear_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.ClearToEmpty();
}
inline const std::string& FilterWarrant::last_done() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.last_done)
  return _internal_last_done();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_last_done(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.last_done)
}
inline std::string* FilterWarrant::mutable_last_done() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_done();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.last_done)
  return _s;
}
inline const std::string& FilterWarrant::_internal_last_done() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_done_.Get();
}
inline void FilterWarrant::_internal_set_last_done(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_done_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.last_done)
  return _impl_.last_done_.Release();
}
inline void FilterWarrant::set_allocated_last_done(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_done_.IsDefault()) {
          _impl_.last_done_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.last_done)
}

// string change_rate = 4 [json_name = "changeRate"];
inline void FilterWarrant::clear_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.change_rate_.ClearToEmpty();
}
inline const std::string& FilterWarrant::change_rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.change_rate)
  return _internal_change_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_change_rate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.change_rate)
}
inline std::string* FilterWarrant::mutable_change_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_change_rate();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.change_rate)
  return _s;
}
inline const std::string& FilterWarrant::_internal_change_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.change_rate_.Get();
}
inline void FilterWarrant::_internal_set_change_rate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_rate_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.change_rate_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.change_rate)
  return _impl_.change_rate_.Release();
}
inline void FilterWarrant::set_allocated_change_rate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.change_rate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.change_rate_.IsDefault()) {
          _impl_.change_rate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.change_rate)
}

// string change_val = 5 [json_name = "changeVal"];
inline void FilterWarrant::clear_change_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.change_val_.ClearToEmpty();
}
inline const std::string& FilterWarrant::change_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.change_val)
  return _internal_change_val();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_change_val(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_val_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.change_val)
}
inline std::string* FilterWarrant::mutable_change_val() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_change_val();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.change_val)
  return _s;
}
inline const std::string& FilterWarrant::_internal_change_val() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.change_val_.Get();
}
inline void FilterWarrant::_internal_set_change_val(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_val_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_change_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.change_val_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_change_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.change_val)
  return _impl_.change_val_.Release();
}
inline void FilterWarrant::set_allocated_change_val(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.change_val_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.change_val_.IsDefault()) {
          _impl_.change_val_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.change_val)
}

// int64 volume = 6 [json_name = "volume"];
inline void FilterWarrant::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t FilterWarrant::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.volume)
  return _internal_volume();
}
inline void FilterWarrant::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.volume)
}
inline ::int64_t FilterWarrant::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void FilterWarrant::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// string turnover = 7 [json_name = "turnover"];
inline void FilterWarrant::clear_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.ClearToEmpty();
}
inline const std::string& FilterWarrant::turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.turnover)
  return _internal_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.turnover)
}
inline std::string* FilterWarrant::mutable_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.turnover)
  return _s;
}
inline const std::string& FilterWarrant::_internal_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_.Get();
}
inline void FilterWarrant::_internal_set_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.turnover)
  return _impl_.turnover_.Release();
}
inline void FilterWarrant::set_allocated_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_.IsDefault()) {
          _impl_.turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.turnover)
}

// string expiry_date = 8 [json_name = "expiryDate"];
inline void FilterWarrant::clear_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.ClearToEmpty();
}
inline const std::string& FilterWarrant::expiry_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.expiry_date)
  return _internal_expiry_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_expiry_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.expiry_date)
}
inline std::string* FilterWarrant::mutable_expiry_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiry_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.expiry_date)
  return _s;
}
inline const std::string& FilterWarrant::_internal_expiry_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expiry_date_.Get();
}
inline void FilterWarrant::_internal_set_expiry_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.expiry_date_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.expiry_date)
  return _impl_.expiry_date_.Release();
}
inline void FilterWarrant::set_allocated_expiry_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expiry_date_.IsDefault()) {
          _impl_.expiry_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.expiry_date)
}

// string strike_price = 9 [json_name = "strikePrice"];
inline void FilterWarrant::clear_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strike_price_.ClearToEmpty();
}
inline const std::string& FilterWarrant::strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.strike_price)
  return _internal_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.strike_price)
}
inline std::string* FilterWarrant::mutable_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.strike_price)
  return _s;
}
inline const std::string& FilterWarrant::_internal_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strike_price_.Get();
}
inline void FilterWarrant::_internal_set_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strike_price_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.strike_price_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.strike_price)
  return _impl_.strike_price_.Release();
}
inline void FilterWarrant::set_allocated_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strike_price_.IsDefault()) {
          _impl_.strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.strike_price)
}

// string upper_strike_price = 10 [json_name = "upperStrikePrice"];
inline void FilterWarrant::clear_upper_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.upper_strike_price_.ClearToEmpty();
}
inline const std::string& FilterWarrant::upper_strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.upper_strike_price)
  return _internal_upper_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_upper_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.upper_strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.upper_strike_price)
}
inline std::string* FilterWarrant::mutable_upper_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_upper_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.upper_strike_price)
  return _s;
}
inline const std::string& FilterWarrant::_internal_upper_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.upper_strike_price_.Get();
}
inline void FilterWarrant::_internal_set_upper_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.upper_strike_price_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_upper_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.upper_strike_price_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_upper_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.upper_strike_price)
  return _impl_.upper_strike_price_.Release();
}
inline void FilterWarrant::set_allocated_upper_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.upper_strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.upper_strike_price_.IsDefault()) {
          _impl_.upper_strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.upper_strike_price)
}

// string lower_strike_price = 11 [json_name = "lowerStrikePrice"];
inline void FilterWarrant::clear_lower_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lower_strike_price_.ClearToEmpty();
}
inline const std::string& FilterWarrant::lower_strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.lower_strike_price)
  return _internal_lower_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_lower_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lower_strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.lower_strike_price)
}
inline std::string* FilterWarrant::mutable_lower_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lower_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.lower_strike_price)
  return _s;
}
inline const std::string& FilterWarrant::_internal_lower_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lower_strike_price_.Get();
}
inline void FilterWarrant::_internal_set_lower_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lower_strike_price_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_lower_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lower_strike_price_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_lower_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.lower_strike_price)
  return _impl_.lower_strike_price_.Release();
}
inline void FilterWarrant::set_allocated_lower_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lower_strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lower_strike_price_.IsDefault()) {
          _impl_.lower_strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.lower_strike_price)
}

// string outstanding_qty = 12 [json_name = "outstandingQty"];
inline void FilterWarrant::clear_outstanding_qty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_qty_.ClearToEmpty();
}
inline const std::string& FilterWarrant::outstanding_qty() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.outstanding_qty)
  return _internal_outstanding_qty();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_outstanding_qty(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_qty_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.outstanding_qty)
}
inline std::string* FilterWarrant::mutable_outstanding_qty() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_outstanding_qty();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.outstanding_qty)
  return _s;
}
inline const std::string& FilterWarrant::_internal_outstanding_qty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outstanding_qty_.Get();
}
inline void FilterWarrant::_internal_set_outstanding_qty(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_qty_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_outstanding_qty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.outstanding_qty_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_outstanding_qty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.outstanding_qty)
  return _impl_.outstanding_qty_.Release();
}
inline void FilterWarrant::set_allocated_outstanding_qty(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_qty_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.outstanding_qty_.IsDefault()) {
          _impl_.outstanding_qty_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.outstanding_qty)
}

// string outstanding_ratio = 13 [json_name = "outstandingRatio"];
inline void FilterWarrant::clear_outstanding_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_ratio_.ClearToEmpty();
}
inline const std::string& FilterWarrant::outstanding_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.outstanding_ratio)
  return _internal_outstanding_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_outstanding_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.outstanding_ratio)
}
inline std::string* FilterWarrant::mutable_outstanding_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_outstanding_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.outstanding_ratio)
  return _s;
}
inline const std::string& FilterWarrant::_internal_outstanding_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outstanding_ratio_.Get();
}
inline void FilterWarrant::_internal_set_outstanding_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_ratio_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_outstanding_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.outstanding_ratio_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_outstanding_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.outstanding_ratio)
  return _impl_.outstanding_ratio_.Release();
}
inline void FilterWarrant::set_allocated_outstanding_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.outstanding_ratio_.IsDefault()) {
          _impl_.outstanding_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.outstanding_ratio)
}

// string premium = 14 [json_name = "premium"];
inline void FilterWarrant::clear_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.premium_.ClearToEmpty();
}
inline const std::string& FilterWarrant::premium() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.premium)
  return _internal_premium();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_premium(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.premium_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.premium)
}
inline std::string* FilterWarrant::mutable_premium() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_premium();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.premium)
  return _s;
}
inline const std::string& FilterWarrant::_internal_premium() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.premium_.Get();
}
inline void FilterWarrant::_internal_set_premium(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.premium_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.premium_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.premium)
  return _impl_.premium_.Release();
}
inline void FilterWarrant::set_allocated_premium(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.premium_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.premium_.IsDefault()) {
          _impl_.premium_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.premium)
}

// string itm_otm = 15 [json_name = "itmOtm"];
inline void FilterWarrant::clear_itm_otm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.itm_otm_.ClearToEmpty();
}
inline const std::string& FilterWarrant::itm_otm() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.itm_otm)
  return _internal_itm_otm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_itm_otm(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.itm_otm_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.itm_otm)
}
inline std::string* FilterWarrant::mutable_itm_otm() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_itm_otm();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.itm_otm)
  return _s;
}
inline const std::string& FilterWarrant::_internal_itm_otm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.itm_otm_.Get();
}
inline void FilterWarrant::_internal_set_itm_otm(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.itm_otm_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_itm_otm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.itm_otm_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_itm_otm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.itm_otm)
  return _impl_.itm_otm_.Release();
}
inline void FilterWarrant::set_allocated_itm_otm(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.itm_otm_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.itm_otm_.IsDefault()) {
          _impl_.itm_otm_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.itm_otm)
}

// string implied_volatility = 16 [json_name = "impliedVolatility"];
inline void FilterWarrant::clear_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.implied_volatility_.ClearToEmpty();
}
inline const std::string& FilterWarrant::implied_volatility() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.implied_volatility)
  return _internal_implied_volatility();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_implied_volatility(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.implied_volatility_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.implied_volatility)
}
inline std::string* FilterWarrant::mutable_implied_volatility() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_implied_volatility();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.implied_volatility)
  return _s;
}
inline const std::string& FilterWarrant::_internal_implied_volatility() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.implied_volatility_.Get();
}
inline void FilterWarrant::_internal_set_implied_volatility(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.implied_volatility_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.implied_volatility_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.implied_volatility)
  return _impl_.implied_volatility_.Release();
}
inline void FilterWarrant::set_allocated_implied_volatility(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.implied_volatility_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.implied_volatility_.IsDefault()) {
          _impl_.implied_volatility_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.implied_volatility)
}

// string delta = 17 [json_name = "delta"];
inline void FilterWarrant::clear_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delta_.ClearToEmpty();
}
inline const std::string& FilterWarrant::delta() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.delta)
  return _internal_delta();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_delta(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delta_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.delta)
}
inline std::string* FilterWarrant::mutable_delta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_delta();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.delta)
  return _s;
}
inline const std::string& FilterWarrant::_internal_delta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delta_.Get();
}
inline void FilterWarrant::_internal_set_delta(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delta_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.delta_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.delta)
  return _impl_.delta_.Release();
}
inline void FilterWarrant::set_allocated_delta(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delta_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.delta_.IsDefault()) {
          _impl_.delta_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.delta)
}

// string call_price = 18 [json_name = "callPrice"];
inline void FilterWarrant::clear_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.call_price_.ClearToEmpty();
}
inline const std::string& FilterWarrant::call_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.call_price)
  return _internal_call_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_call_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.call_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.call_price)
}
inline std::string* FilterWarrant::mutable_call_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_call_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.call_price)
  return _s;
}
inline const std::string& FilterWarrant::_internal_call_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.call_price_.Get();
}
inline void FilterWarrant::_internal_set_call_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.call_price_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.call_price_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.call_price)
  return _impl_.call_price_.Release();
}
inline void FilterWarrant::set_allocated_call_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.call_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.call_price_.IsDefault()) {
          _impl_.call_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.call_price)
}

// string to_call_price = 19 [json_name = "toCallPrice"];
inline void FilterWarrant::clear_to_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_call_price_.ClearToEmpty();
}
inline const std::string& FilterWarrant::to_call_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.to_call_price)
  return _internal_to_call_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_to_call_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.to_call_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.to_call_price)
}
inline std::string* FilterWarrant::mutable_to_call_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_call_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.to_call_price)
  return _s;
}
inline const std::string& FilterWarrant::_internal_to_call_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.to_call_price_.Get();
}
inline void FilterWarrant::_internal_set_to_call_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.to_call_price_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_to_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.to_call_price_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_to_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.to_call_price)
  return _impl_.to_call_price_.Release();
}
inline void FilterWarrant::set_allocated_to_call_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_call_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.to_call_price_.IsDefault()) {
          _impl_.to_call_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.to_call_price)
}

// string effective_leverage = 20 [json_name = "effectiveLeverage"];
inline void FilterWarrant::clear_effective_leverage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.effective_leverage_.ClearToEmpty();
}
inline const std::string& FilterWarrant::effective_leverage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.effective_leverage)
  return _internal_effective_leverage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_effective_leverage(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.effective_leverage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.effective_leverage)
}
inline std::string* FilterWarrant::mutable_effective_leverage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_effective_leverage();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.effective_leverage)
  return _s;
}
inline const std::string& FilterWarrant::_internal_effective_leverage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.effective_leverage_.Get();
}
inline void FilterWarrant::_internal_set_effective_leverage(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.effective_leverage_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_effective_leverage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.effective_leverage_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_effective_leverage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.effective_leverage)
  return _impl_.effective_leverage_.Release();
}
inline void FilterWarrant::set_allocated_effective_leverage(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.effective_leverage_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.effective_leverage_.IsDefault()) {
          _impl_.effective_leverage_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.effective_leverage)
}

// string leverage_ratio = 21 [json_name = "leverageRatio"];
inline void FilterWarrant::clear_leverage_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leverage_ratio_.ClearToEmpty();
}
inline const std::string& FilterWarrant::leverage_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.leverage_ratio)
  return _internal_leverage_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_leverage_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.leverage_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.leverage_ratio)
}
inline std::string* FilterWarrant::mutable_leverage_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leverage_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.leverage_ratio)
  return _s;
}
inline const std::string& FilterWarrant::_internal_leverage_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leverage_ratio_.Get();
}
inline void FilterWarrant::_internal_set_leverage_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.leverage_ratio_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_leverage_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.leverage_ratio_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_leverage_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.leverage_ratio)
  return _impl_.leverage_ratio_.Release();
}
inline void FilterWarrant::set_allocated_leverage_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leverage_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.leverage_ratio_.IsDefault()) {
          _impl_.leverage_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.leverage_ratio)
}

// string conversion_ratio = 22 [json_name = "conversionRatio"];
inline void FilterWarrant::clear_conversion_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.conversion_ratio_.ClearToEmpty();
}
inline const std::string& FilterWarrant::conversion_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.conversion_ratio)
  return _internal_conversion_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_conversion_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.conversion_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.conversion_ratio)
}
inline std::string* FilterWarrant::mutable_conversion_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversion_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.conversion_ratio)
  return _s;
}
inline const std::string& FilterWarrant::_internal_conversion_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.conversion_ratio_.Get();
}
inline void FilterWarrant::_internal_set_conversion_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.conversion_ratio_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_conversion_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.conversion_ratio_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_conversion_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.conversion_ratio)
  return _impl_.conversion_ratio_.Release();
}
inline void FilterWarrant::set_allocated_conversion_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.conversion_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.conversion_ratio_.IsDefault()) {
          _impl_.conversion_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.conversion_ratio)
}

// string balance_point = 23 [json_name = "balancePoint"];
inline void FilterWarrant::clear_balance_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.balance_point_.ClearToEmpty();
}
inline const std::string& FilterWarrant::balance_point() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.balance_point)
  return _internal_balance_point();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FilterWarrant::set_balance_point(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.balance_point_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.balance_point)
}
inline std::string* FilterWarrant::mutable_balance_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_balance_point();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.FilterWarrant.balance_point)
  return _s;
}
inline const std::string& FilterWarrant::_internal_balance_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.balance_point_.Get();
}
inline void FilterWarrant::_internal_set_balance_point(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.balance_point_.Set(value, GetArena());
}
inline std::string* FilterWarrant::_internal_mutable_balance_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.balance_point_.Mutable( GetArena());
}
inline std::string* FilterWarrant::release_balance_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.FilterWarrant.balance_point)
  return _impl_.balance_point_.Release();
}
inline void FilterWarrant::set_allocated_balance_point(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.balance_point_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.balance_point_.IsDefault()) {
          _impl_.balance_point_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.FilterWarrant.balance_point)
}

// int32 status = 24 [json_name = "status"];
inline void FilterWarrant::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::int32_t FilterWarrant::status() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.status)
  return _internal_status();
}
inline void FilterWarrant::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.status)
}
inline ::int32_t FilterWarrant::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void FilterWarrant::_internal_set_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// int32 type = 25 [json_name = "type"];
inline void FilterWarrant::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::int32_t FilterWarrant::type() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.FilterWarrant.type)
  return _internal_type();
}
inline void FilterWarrant::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.FilterWarrant.type)
}
inline ::int32_t FilterWarrant::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void FilterWarrant::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// MarketTradePeriodResponse

// repeated .longportapp.quote.v1.MarketTradePeriod market_trade_session = 1 [json_name = "marketTradeSession"];
inline int MarketTradePeriodResponse::_internal_market_trade_session_size() const {
  return _internal_market_trade_session().size();
}
inline int MarketTradePeriodResponse::market_trade_session_size() const {
  return _internal_market_trade_session_size();
}
inline void MarketTradePeriodResponse::clear_market_trade_session() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.market_trade_session_.Clear();
}
inline ::longportapp::quote::v1::MarketTradePeriod* MarketTradePeriodResponse::mutable_market_trade_session(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.MarketTradePeriodResponse.market_trade_session)
  return _internal_mutable_market_trade_session()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::MarketTradePeriod>* MarketTradePeriodResponse::mutable_market_trade_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.MarketTradePeriodResponse.market_trade_session)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_market_trade_session();
}
inline const ::longportapp::quote::v1::MarketTradePeriod& MarketTradePeriodResponse::market_trade_session(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.MarketTradePeriodResponse.market_trade_session)
  return _internal_market_trade_session().Get(index);
}
inline ::longportapp::quote::v1::MarketTradePeriod* MarketTradePeriodResponse::add_market_trade_session() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::MarketTradePeriod* _add = _internal_mutable_market_trade_session()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.MarketTradePeriodResponse.market_trade_session)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::MarketTradePeriod>& MarketTradePeriodResponse::market_trade_session() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.MarketTradePeriodResponse.market_trade_session)
  return _internal_market_trade_session();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::MarketTradePeriod>&
MarketTradePeriodResponse::_internal_market_trade_session() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.market_trade_session_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::MarketTradePeriod>*
MarketTradePeriodResponse::_internal_mutable_market_trade_session() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.market_trade_session_;
}

// -------------------------------------------------------------------

// MarketTradePeriod

// string market = 1 [json_name = "market"];
inline void MarketTradePeriod::clear_market() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.market_.ClearToEmpty();
}
inline const std::string& MarketTradePeriod::market() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.MarketTradePeriod.market)
  return _internal_market();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketTradePeriod::set_market(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.market_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MarketTradePeriod.market)
}
inline std::string* MarketTradePeriod::mutable_market() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_market();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.MarketTradePeriod.market)
  return _s;
}
inline const std::string& MarketTradePeriod::_internal_market() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.market_.Get();
}
inline void MarketTradePeriod::_internal_set_market(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.market_.Set(value, GetArena());
}
inline std::string* MarketTradePeriod::_internal_mutable_market() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.market_.Mutable( GetArena());
}
inline std::string* MarketTradePeriod::release_market() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.MarketTradePeriod.market)
  return _impl_.market_.Release();
}
inline void MarketTradePeriod::set_allocated_market(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.market_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_.IsDefault()) {
          _impl_.market_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.MarketTradePeriod.market)
}

// repeated .longportapp.quote.v1.TradePeriod trade_session = 2 [json_name = "tradeSession"];
inline int MarketTradePeriod::_internal_trade_session_size() const {
  return _internal_trade_session().size();
}
inline int MarketTradePeriod::trade_session_size() const {
  return _internal_trade_session_size();
}
inline void MarketTradePeriod::clear_trade_session() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_session_.Clear();
}
inline ::longportapp::quote::v1::TradePeriod* MarketTradePeriod::mutable_trade_session(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.MarketTradePeriod.trade_session)
  return _internal_mutable_trade_session()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::TradePeriod>* MarketTradePeriod::mutable_trade_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.MarketTradePeriod.trade_session)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_trade_session();
}
inline const ::longportapp::quote::v1::TradePeriod& MarketTradePeriod::trade_session(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.MarketTradePeriod.trade_session)
  return _internal_trade_session().Get(index);
}
inline ::longportapp::quote::v1::TradePeriod* MarketTradePeriod::add_trade_session() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::TradePeriod* _add = _internal_mutable_trade_session()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.MarketTradePeriod.trade_session)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::TradePeriod>& MarketTradePeriod::trade_session() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.MarketTradePeriod.trade_session)
  return _internal_trade_session();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::TradePeriod>&
MarketTradePeriod::_internal_trade_session() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trade_session_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::TradePeriod>*
MarketTradePeriod::_internal_mutable_trade_session() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.trade_session_;
}

// -------------------------------------------------------------------

// TradePeriod

// int32 beg_time = 1 [json_name = "begTime"];
inline void TradePeriod::clear_beg_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.beg_time_ = 0;
}
inline ::int32_t TradePeriod::beg_time() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.TradePeriod.beg_time)
  return _internal_beg_time();
}
inline void TradePeriod::set_beg_time(::int32_t value) {
  _internal_set_beg_time(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.TradePeriod.beg_time)
}
inline ::int32_t TradePeriod::_internal_beg_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.beg_time_;
}
inline void TradePeriod::_internal_set_beg_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.beg_time_ = value;
}

// int32 end_time = 2 [json_name = "endTime"];
inline void TradePeriod::clear_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_time_ = 0;
}
inline ::int32_t TradePeriod::end_time() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.TradePeriod.end_time)
  return _internal_end_time();
}
inline void TradePeriod::set_end_time(::int32_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.TradePeriod.end_time)
}
inline ::int32_t TradePeriod::_internal_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_time_;
}
inline void TradePeriod::_internal_set_end_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_time_ = value;
}

// .longportapp.quote.v1.TradeSession trade_session = 3 [json_name = "tradeSession"];
inline void TradePeriod::clear_trade_session() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_session_ = 0;
}
inline ::longportapp::quote::v1::TradeSession TradePeriod::trade_session() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.TradePeriod.trade_session)
  return _internal_trade_session();
}
inline void TradePeriod::set_trade_session(::longportapp::quote::v1::TradeSession value) {
  _internal_set_trade_session(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.TradePeriod.trade_session)
}
inline ::longportapp::quote::v1::TradeSession TradePeriod::_internal_trade_session() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::TradeSession>(_impl_.trade_session_);
}
inline void TradePeriod::_internal_set_trade_session(::longportapp::quote::v1::TradeSession value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_session_ = value;
}

// -------------------------------------------------------------------

// SubscriptionRequest

// -------------------------------------------------------------------

// SubscriptionResponse

// repeated .longportapp.quote.v1.SubTypeList sub_list = 1 [json_name = "subList"];
inline int SubscriptionResponse::_internal_sub_list_size() const {
  return _internal_sub_list().size();
}
inline int SubscriptionResponse::sub_list_size() const {
  return _internal_sub_list_size();
}
inline void SubscriptionResponse::clear_sub_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_list_.Clear();
}
inline ::longportapp::quote::v1::SubTypeList* SubscriptionResponse::mutable_sub_list(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SubscriptionResponse.sub_list)
  return _internal_mutable_sub_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SubTypeList>* SubscriptionResponse::mutable_sub_list()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SubscriptionResponse.sub_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sub_list();
}
inline const ::longportapp::quote::v1::SubTypeList& SubscriptionResponse::sub_list(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SubscriptionResponse.sub_list)
  return _internal_sub_list().Get(index);
}
inline ::longportapp::quote::v1::SubTypeList* SubscriptionResponse::add_sub_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::SubTypeList* _add = _internal_mutable_sub_list()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SubscriptionResponse.sub_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SubTypeList>& SubscriptionResponse::sub_list() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SubscriptionResponse.sub_list)
  return _internal_sub_list();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SubTypeList>&
SubscriptionResponse::_internal_sub_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_list_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SubTypeList>*
SubscriptionResponse::_internal_mutable_sub_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sub_list_;
}

// -------------------------------------------------------------------

// SubTypeList

// string symbol = 1 [json_name = "symbol"];
inline void SubTypeList::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SubTypeList::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SubTypeList.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubTypeList::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SubTypeList.symbol)
}
inline std::string* SubTypeList::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SubTypeList.symbol)
  return _s;
}
inline const std::string& SubTypeList::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SubTypeList::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SubTypeList::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SubTypeList::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SubTypeList.symbol)
  return _impl_.symbol_.Release();
}
inline void SubTypeList::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SubTypeList.symbol)
}

// repeated .longportapp.quote.v1.SubType sub_type = 2 [json_name = "subType"];
inline int SubTypeList::_internal_sub_type_size() const {
  return _internal_sub_type().size();
}
inline int SubTypeList::sub_type_size() const {
  return _internal_sub_type_size();
}
inline void SubTypeList::clear_sub_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_type_.Clear();
}
inline ::longportapp::quote::v1::SubType SubTypeList::sub_type(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SubTypeList.sub_type)
  return static_cast<::longportapp::quote::v1::SubType>(_internal_sub_type().Get(index));
}
inline void SubTypeList::set_sub_type(int index, ::longportapp::quote::v1::SubType value) {
  _internal_mutable_sub_type()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SubTypeList.sub_type)
}
inline void SubTypeList::add_sub_type(::longportapp::quote::v1::SubType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_sub_type()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SubTypeList.sub_type)
}
inline const ::google::protobuf::RepeatedField<int>& SubTypeList::sub_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SubTypeList.sub_type)
  return _internal_sub_type();
}
inline ::google::protobuf::RepeatedField<int>* SubTypeList::mutable_sub_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SubTypeList.sub_type)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sub_type();
}
inline const ::google::protobuf::RepeatedField<int>& SubTypeList::_internal_sub_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_type_;
}
inline ::google::protobuf::RepeatedField<int>* SubTypeList::_internal_mutable_sub_type() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sub_type_;
}

// -------------------------------------------------------------------

// SubscribeRequest

// repeated string symbol = 1 [json_name = "symbol"];
inline int SubscribeRequest::_internal_symbol_size() const {
  return _internal_symbol().size();
}
inline int SubscribeRequest::symbol_size() const {
  return _internal_symbol_size();
}
inline void SubscribeRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.Clear();
}
inline std::string* SubscribeRequest::add_symbol()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_symbol()->Add();
  // @@protoc_insertion_point(field_add_mutable:longportapp.quote.v1.SubscribeRequest.symbol)
  return _s;
}
inline const std::string& SubscribeRequest::symbol(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SubscribeRequest.symbol)
  return _internal_symbol().Get(index);
}
inline std::string* SubscribeRequest::mutable_symbol(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SubscribeRequest.symbol)
  return _internal_mutable_symbol()->Mutable(index);
}
inline void SubscribeRequest::set_symbol(int index, const std::string& value) {
  _internal_mutable_symbol()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline void SubscribeRequest::set_symbol(int index, std::string&& value) {
  _internal_mutable_symbol()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline void SubscribeRequest::set_symbol(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbol()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline void SubscribeRequest::set_symbol(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_symbol()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline void SubscribeRequest::set_symbol(int index, absl::string_view value) {
  _internal_mutable_symbol()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline void SubscribeRequest::add_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline void SubscribeRequest::add_symbol(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline void SubscribeRequest::add_symbol(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline void SubscribeRequest::add_symbol(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline void SubscribeRequest::add_symbol(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:longportapp.quote.v1.SubscribeRequest.symbol)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SubscribeRequest::symbol() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SubscribeRequest.symbol)
  return _internal_symbol();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SubscribeRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SubscribeRequest.symbol)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_symbol();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SubscribeRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SubscribeRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.symbol_;
}

// repeated .longportapp.quote.v1.SubType sub_type = 2 [json_name = "subType"];
inline int SubscribeRequest::_internal_sub_type_size() const {
  return _internal_sub_type().size();
}
inline int SubscribeRequest::sub_type_size() const {
  return _internal_sub_type_size();
}
inline void SubscribeRequest::clear_sub_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_type_.Clear();
}
inline ::longportapp::quote::v1::SubType SubscribeRequest::sub_type(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SubscribeRequest.sub_type)
  return static_cast<::longportapp::quote::v1::SubType>(_internal_sub_type().Get(index));
}
inline void SubscribeRequest::set_sub_type(int index, ::longportapp::quote::v1::SubType value) {
  _internal_mutable_sub_type()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SubscribeRequest.sub_type)
}
inline void SubscribeRequest::add_sub_type(::longportapp::quote::v1::SubType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_sub_type()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SubscribeRequest.sub_type)
}
inline const ::google::protobuf::RepeatedField<int>& SubscribeRequest::sub_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SubscribeRequest.sub_type)
  return _internal_sub_type();
}
inline ::google::protobuf::RepeatedField<int>* SubscribeRequest::mutable_sub_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SubscribeRequest.sub_type)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sub_type();
}
inline const ::google::protobuf::RepeatedField<int>& SubscribeRequest::_internal_sub_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_type_;
}
inline ::google::protobuf::RepeatedField<int>* SubscribeRequest::_internal_mutable_sub_type() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sub_type_;
}

// bool is_first_push = 3 [json_name = "isFirstPush"];
inline void SubscribeRequest::clear_is_first_push() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_first_push_ = false;
}
inline bool SubscribeRequest::is_first_push() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SubscribeRequest.is_first_push)
  return _internal_is_first_push();
}
inline void SubscribeRequest::set_is_first_push(bool value) {
  _internal_set_is_first_push(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SubscribeRequest.is_first_push)
}
inline bool SubscribeRequest::_internal_is_first_push() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_first_push_;
}
inline void SubscribeRequest::_internal_set_is_first_push(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_first_push_ = value;
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// repeated string symbol = 1 [json_name = "symbol"];
inline int UnsubscribeRequest::_internal_symbol_size() const {
  return _internal_symbol().size();
}
inline int UnsubscribeRequest::symbol_size() const {
  return _internal_symbol_size();
}
inline void UnsubscribeRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.Clear();
}
inline std::string* UnsubscribeRequest::add_symbol()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_symbol()->Add();
  // @@protoc_insertion_point(field_add_mutable:longportapp.quote.v1.UnsubscribeRequest.symbol)
  return _s;
}
inline const std::string& UnsubscribeRequest::symbol(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UnsubscribeRequest.symbol)
  return _internal_symbol().Get(index);
}
inline std::string* UnsubscribeRequest::mutable_symbol(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UnsubscribeRequest.symbol)
  return _internal_mutable_symbol()->Mutable(index);
}
inline void UnsubscribeRequest::set_symbol(int index, const std::string& value) {
  _internal_mutable_symbol()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline void UnsubscribeRequest::set_symbol(int index, std::string&& value) {
  _internal_mutable_symbol()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline void UnsubscribeRequest::set_symbol(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbol()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline void UnsubscribeRequest::set_symbol(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_symbol()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline void UnsubscribeRequest::set_symbol(int index, absl::string_view value) {
  _internal_mutable_symbol()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline void UnsubscribeRequest::add_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline void UnsubscribeRequest::add_symbol(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline void UnsubscribeRequest::add_symbol(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline void UnsubscribeRequest::add_symbol(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline void UnsubscribeRequest::add_symbol(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbol()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:longportapp.quote.v1.UnsubscribeRequest.symbol)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UnsubscribeRequest::symbol() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.UnsubscribeRequest.symbol)
  return _internal_symbol();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UnsubscribeRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.UnsubscribeRequest.symbol)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_symbol();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UnsubscribeRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UnsubscribeRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.symbol_;
}

// repeated .longportapp.quote.v1.SubType sub_type = 2 [json_name = "subType"];
inline int UnsubscribeRequest::_internal_sub_type_size() const {
  return _internal_sub_type().size();
}
inline int UnsubscribeRequest::sub_type_size() const {
  return _internal_sub_type_size();
}
inline void UnsubscribeRequest::clear_sub_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_type_.Clear();
}
inline ::longportapp::quote::v1::SubType UnsubscribeRequest::sub_type(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UnsubscribeRequest.sub_type)
  return static_cast<::longportapp::quote::v1::SubType>(_internal_sub_type().Get(index));
}
inline void UnsubscribeRequest::set_sub_type(int index, ::longportapp::quote::v1::SubType value) {
  _internal_mutable_sub_type()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UnsubscribeRequest.sub_type)
}
inline void UnsubscribeRequest::add_sub_type(::longportapp::quote::v1::SubType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_sub_type()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.UnsubscribeRequest.sub_type)
}
inline const ::google::protobuf::RepeatedField<int>& UnsubscribeRequest::sub_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.UnsubscribeRequest.sub_type)
  return _internal_sub_type();
}
inline ::google::protobuf::RepeatedField<int>* UnsubscribeRequest::mutable_sub_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.UnsubscribeRequest.sub_type)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sub_type();
}
inline const ::google::protobuf::RepeatedField<int>& UnsubscribeRequest::_internal_sub_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_type_;
}
inline ::google::protobuf::RepeatedField<int>* UnsubscribeRequest::_internal_mutable_sub_type() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sub_type_;
}

// bool unsub_all = 3 [json_name = "unsubAll"];
inline void UnsubscribeRequest::clear_unsub_all() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unsub_all_ = false;
}
inline bool UnsubscribeRequest::unsub_all() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UnsubscribeRequest.unsub_all)
  return _internal_unsub_all();
}
inline void UnsubscribeRequest::set_unsub_all(bool value) {
  _internal_set_unsub_all(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UnsubscribeRequest.unsub_all)
}
inline bool UnsubscribeRequest::_internal_unsub_all() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unsub_all_;
}
inline void UnsubscribeRequest::_internal_set_unsub_all(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.unsub_all_ = value;
}

// -------------------------------------------------------------------

// UnsubscribeResponse

// -------------------------------------------------------------------

// PushQuote

// string symbol = 1 [json_name = "symbol"];
inline void PushQuote::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& PushQuote::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushQuote::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.symbol)
}
inline std::string* PushQuote::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushQuote.symbol)
  return _s;
}
inline const std::string& PushQuote::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void PushQuote::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* PushQuote::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* PushQuote::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushQuote.symbol)
  return _impl_.symbol_.Release();
}
inline void PushQuote::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushQuote.symbol)
}

// int64 sequence = 2 [json_name = "sequence"];
inline void PushQuote::clear_sequence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequence_ = ::int64_t{0};
}
inline ::int64_t PushQuote::sequence() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.sequence)
  return _internal_sequence();
}
inline void PushQuote::set_sequence(::int64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.sequence)
}
inline ::int64_t PushQuote::_internal_sequence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequence_;
}
inline void PushQuote::_internal_set_sequence(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sequence_ = value;
}

// string last_done = 3 [json_name = "lastDone"];
inline void PushQuote::clear_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.ClearToEmpty();
}
inline const std::string& PushQuote::last_done() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.last_done)
  return _internal_last_done();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushQuote::set_last_done(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.last_done)
}
inline std::string* PushQuote::mutable_last_done() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_done();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushQuote.last_done)
  return _s;
}
inline const std::string& PushQuote::_internal_last_done() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_done_.Get();
}
inline void PushQuote::_internal_set_last_done(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(value, GetArena());
}
inline std::string* PushQuote::_internal_mutable_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_done_.Mutable( GetArena());
}
inline std::string* PushQuote::release_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushQuote.last_done)
  return _impl_.last_done_.Release();
}
inline void PushQuote::set_allocated_last_done(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_done_.IsDefault()) {
          _impl_.last_done_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushQuote.last_done)
}

// string open = 4 [json_name = "open"];
inline void PushQuote::clear_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.ClearToEmpty();
}
inline const std::string& PushQuote::open() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.open)
  return _internal_open();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushQuote::set_open(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.open)
}
inline std::string* PushQuote::mutable_open() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_open();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushQuote.open)
  return _s;
}
inline const std::string& PushQuote::_internal_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_.Get();
}
inline void PushQuote::_internal_set_open(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_.Set(value, GetArena());
}
inline std::string* PushQuote::_internal_mutable_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_.Mutable( GetArena());
}
inline std::string* PushQuote::release_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushQuote.open)
  return _impl_.open_.Release();
}
inline void PushQuote::set_allocated_open(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_.IsDefault()) {
          _impl_.open_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushQuote.open)
}

// string high = 5 [json_name = "high"];
inline void PushQuote::clear_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.ClearToEmpty();
}
inline const std::string& PushQuote::high() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.high)
  return _internal_high();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushQuote::set_high(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.high)
}
inline std::string* PushQuote::mutable_high() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_high();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushQuote.high)
  return _s;
}
inline const std::string& PushQuote::_internal_high() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.high_.Get();
}
inline void PushQuote::_internal_set_high(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_.Set(value, GetArena());
}
inline std::string* PushQuote::_internal_mutable_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.high_.Mutable( GetArena());
}
inline std::string* PushQuote::release_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushQuote.high)
  return _impl_.high_.Release();
}
inline void PushQuote::set_allocated_high(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.high_.IsDefault()) {
          _impl_.high_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushQuote.high)
}

// string low = 6 [json_name = "low"];
inline void PushQuote::clear_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.ClearToEmpty();
}
inline const std::string& PushQuote::low() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.low)
  return _internal_low();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushQuote::set_low(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.low)
}
inline std::string* PushQuote::mutable_low() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_low();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushQuote.low)
  return _s;
}
inline const std::string& PushQuote::_internal_low() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.low_.Get();
}
inline void PushQuote::_internal_set_low(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_.Set(value, GetArena());
}
inline std::string* PushQuote::_internal_mutable_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.low_.Mutable( GetArena());
}
inline std::string* PushQuote::release_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushQuote.low)
  return _impl_.low_.Release();
}
inline void PushQuote::set_allocated_low(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.low_.IsDefault()) {
          _impl_.low_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushQuote.low)
}

// int64 timestamp = 7 [json_name = "timestamp"];
inline void PushQuote::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t PushQuote::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.timestamp)
  return _internal_timestamp();
}
inline void PushQuote::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.timestamp)
}
inline ::int64_t PushQuote::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void PushQuote::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// int64 volume = 8 [json_name = "volume"];
inline void PushQuote::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t PushQuote::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.volume)
  return _internal_volume();
}
inline void PushQuote::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.volume)
}
inline ::int64_t PushQuote::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void PushQuote::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// string turnover = 9 [json_name = "turnover"];
inline void PushQuote::clear_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.ClearToEmpty();
}
inline const std::string& PushQuote::turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.turnover)
  return _internal_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushQuote::set_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.turnover)
}
inline std::string* PushQuote::mutable_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushQuote.turnover)
  return _s;
}
inline const std::string& PushQuote::_internal_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_.Get();
}
inline void PushQuote::_internal_set_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(value, GetArena());
}
inline std::string* PushQuote::_internal_mutable_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_.Mutable( GetArena());
}
inline std::string* PushQuote::release_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushQuote.turnover)
  return _impl_.turnover_.Release();
}
inline void PushQuote::set_allocated_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_.IsDefault()) {
          _impl_.turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushQuote.turnover)
}

// .longportapp.quote.v1.TradeStatus trade_status = 10 [json_name = "tradeStatus"];
inline void PushQuote::clear_trade_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_status_ = 0;
}
inline ::longportapp::quote::v1::TradeStatus PushQuote::trade_status() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.trade_status)
  return _internal_trade_status();
}
inline void PushQuote::set_trade_status(::longportapp::quote::v1::TradeStatus value) {
  _internal_set_trade_status(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.trade_status)
}
inline ::longportapp::quote::v1::TradeStatus PushQuote::_internal_trade_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::TradeStatus>(_impl_.trade_status_);
}
inline void PushQuote::_internal_set_trade_status(::longportapp::quote::v1::TradeStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_status_ = value;
}

// .longportapp.quote.v1.TradeSession trade_session = 11 [json_name = "tradeSession"];
inline void PushQuote::clear_trade_session() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_session_ = 0;
}
inline ::longportapp::quote::v1::TradeSession PushQuote::trade_session() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.trade_session)
  return _internal_trade_session();
}
inline void PushQuote::set_trade_session(::longportapp::quote::v1::TradeSession value) {
  _internal_set_trade_session(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.trade_session)
}
inline ::longportapp::quote::v1::TradeSession PushQuote::_internal_trade_session() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::TradeSession>(_impl_.trade_session_);
}
inline void PushQuote::_internal_set_trade_session(::longportapp::quote::v1::TradeSession value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trade_session_ = value;
}

// int64 current_volume = 12 [json_name = "currentVolume"];
inline void PushQuote::clear_current_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.current_volume_ = ::int64_t{0};
}
inline ::int64_t PushQuote::current_volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.current_volume)
  return _internal_current_volume();
}
inline void PushQuote::set_current_volume(::int64_t value) {
  _internal_set_current_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.current_volume)
}
inline ::int64_t PushQuote::_internal_current_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.current_volume_;
}
inline void PushQuote::_internal_set_current_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.current_volume_ = value;
}

// string current_turnover = 13 [json_name = "currentTurnover"];
inline void PushQuote::clear_current_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.current_turnover_.ClearToEmpty();
}
inline const std::string& PushQuote::current_turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.current_turnover)
  return _internal_current_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushQuote::set_current_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.current_turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.current_turnover)
}
inline std::string* PushQuote::mutable_current_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushQuote.current_turnover)
  return _s;
}
inline const std::string& PushQuote::_internal_current_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.current_turnover_.Get();
}
inline void PushQuote::_internal_set_current_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.current_turnover_.Set(value, GetArena());
}
inline std::string* PushQuote::_internal_mutable_current_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.current_turnover_.Mutable( GetArena());
}
inline std::string* PushQuote::release_current_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushQuote.current_turnover)
  return _impl_.current_turnover_.Release();
}
inline void PushQuote::set_allocated_current_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.current_turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_turnover_.IsDefault()) {
          _impl_.current_turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushQuote.current_turnover)
}

// .longportapp.quote.v1.PushQuoteTag tag = 14 [json_name = "tag"];
inline void PushQuote::clear_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_ = 0;
}
inline ::longportapp::quote::v1::PushQuoteTag PushQuote::tag() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushQuote.tag)
  return _internal_tag();
}
inline void PushQuote::set_tag(::longportapp::quote::v1::PushQuoteTag value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushQuote.tag)
}
inline ::longportapp::quote::v1::PushQuoteTag PushQuote::_internal_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::PushQuoteTag>(_impl_.tag_);
}
inline void PushQuote::_internal_set_tag(::longportapp::quote::v1::PushQuoteTag value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tag_ = value;
}

// -------------------------------------------------------------------

// PushDepth

// string symbol = 1 [json_name = "symbol"];
inline void PushDepth::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& PushDepth::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushDepth.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushDepth::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushDepth.symbol)
}
inline std::string* PushDepth::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushDepth.symbol)
  return _s;
}
inline const std::string& PushDepth::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void PushDepth::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* PushDepth::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* PushDepth::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushDepth.symbol)
  return _impl_.symbol_.Release();
}
inline void PushDepth::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushDepth.symbol)
}

// int64 sequence = 2 [json_name = "sequence"];
inline void PushDepth::clear_sequence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequence_ = ::int64_t{0};
}
inline ::int64_t PushDepth::sequence() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushDepth.sequence)
  return _internal_sequence();
}
inline void PushDepth::set_sequence(::int64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushDepth.sequence)
}
inline ::int64_t PushDepth::_internal_sequence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequence_;
}
inline void PushDepth::_internal_set_sequence(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sequence_ = value;
}

// repeated .longportapp.quote.v1.Depth ask = 3 [json_name = "ask"];
inline int PushDepth::_internal_ask_size() const {
  return _internal_ask().size();
}
inline int PushDepth::ask_size() const {
  return _internal_ask_size();
}
inline void PushDepth::clear_ask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ask_.Clear();
}
inline ::longportapp::quote::v1::Depth* PushDepth::mutable_ask(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushDepth.ask)
  return _internal_mutable_ask()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>* PushDepth::mutable_ask()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.PushDepth.ask)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ask();
}
inline const ::longportapp::quote::v1::Depth& PushDepth::ask(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushDepth.ask)
  return _internal_ask().Get(index);
}
inline ::longportapp::quote::v1::Depth* PushDepth::add_ask() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Depth* _add = _internal_mutable_ask()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.PushDepth.ask)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>& PushDepth::ask() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.PushDepth.ask)
  return _internal_ask();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>&
PushDepth::_internal_ask() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ask_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>*
PushDepth::_internal_mutable_ask() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ask_;
}

// repeated .longportapp.quote.v1.Depth bid = 4 [json_name = "bid"];
inline int PushDepth::_internal_bid_size() const {
  return _internal_bid().size();
}
inline int PushDepth::bid_size() const {
  return _internal_bid_size();
}
inline void PushDepth::clear_bid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bid_.Clear();
}
inline ::longportapp::quote::v1::Depth* PushDepth::mutable_bid(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushDepth.bid)
  return _internal_mutable_bid()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>* PushDepth::mutable_bid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.PushDepth.bid)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bid();
}
inline const ::longportapp::quote::v1::Depth& PushDepth::bid(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushDepth.bid)
  return _internal_bid().Get(index);
}
inline ::longportapp::quote::v1::Depth* PushDepth::add_bid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Depth* _add = _internal_mutable_bid()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.PushDepth.bid)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>& PushDepth::bid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.PushDepth.bid)
  return _internal_bid();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>&
PushDepth::_internal_bid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bid_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Depth>*
PushDepth::_internal_mutable_bid() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bid_;
}

// -------------------------------------------------------------------

// PushBrokers

// string symbol = 1 [json_name = "symbol"];
inline void PushBrokers::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& PushBrokers::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushBrokers.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushBrokers::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushBrokers.symbol)
}
inline std::string* PushBrokers::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushBrokers.symbol)
  return _s;
}
inline const std::string& PushBrokers::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void PushBrokers::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* PushBrokers::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* PushBrokers::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushBrokers.symbol)
  return _impl_.symbol_.Release();
}
inline void PushBrokers::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushBrokers.symbol)
}

// int64 sequence = 2 [json_name = "sequence"];
inline void PushBrokers::clear_sequence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequence_ = ::int64_t{0};
}
inline ::int64_t PushBrokers::sequence() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushBrokers.sequence)
  return _internal_sequence();
}
inline void PushBrokers::set_sequence(::int64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushBrokers.sequence)
}
inline ::int64_t PushBrokers::_internal_sequence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequence_;
}
inline void PushBrokers::_internal_set_sequence(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sequence_ = value;
}

// repeated .longportapp.quote.v1.Brokers ask_brokers = 3 [json_name = "askBrokers"];
inline int PushBrokers::_internal_ask_brokers_size() const {
  return _internal_ask_brokers().size();
}
inline int PushBrokers::ask_brokers_size() const {
  return _internal_ask_brokers_size();
}
inline void PushBrokers::clear_ask_brokers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ask_brokers_.Clear();
}
inline ::longportapp::quote::v1::Brokers* PushBrokers::mutable_ask_brokers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushBrokers.ask_brokers)
  return _internal_mutable_ask_brokers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>* PushBrokers::mutable_ask_brokers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.PushBrokers.ask_brokers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ask_brokers();
}
inline const ::longportapp::quote::v1::Brokers& PushBrokers::ask_brokers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushBrokers.ask_brokers)
  return _internal_ask_brokers().Get(index);
}
inline ::longportapp::quote::v1::Brokers* PushBrokers::add_ask_brokers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Brokers* _add = _internal_mutable_ask_brokers()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.PushBrokers.ask_brokers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>& PushBrokers::ask_brokers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.PushBrokers.ask_brokers)
  return _internal_ask_brokers();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>&
PushBrokers::_internal_ask_brokers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ask_brokers_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>*
PushBrokers::_internal_mutable_ask_brokers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ask_brokers_;
}

// repeated .longportapp.quote.v1.Brokers bid_brokers = 4 [json_name = "bidBrokers"];
inline int PushBrokers::_internal_bid_brokers_size() const {
  return _internal_bid_brokers().size();
}
inline int PushBrokers::bid_brokers_size() const {
  return _internal_bid_brokers_size();
}
inline void PushBrokers::clear_bid_brokers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bid_brokers_.Clear();
}
inline ::longportapp::quote::v1::Brokers* PushBrokers::mutable_bid_brokers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushBrokers.bid_brokers)
  return _internal_mutable_bid_brokers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>* PushBrokers::mutable_bid_brokers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.PushBrokers.bid_brokers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bid_brokers();
}
inline const ::longportapp::quote::v1::Brokers& PushBrokers::bid_brokers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushBrokers.bid_brokers)
  return _internal_bid_brokers().Get(index);
}
inline ::longportapp::quote::v1::Brokers* PushBrokers::add_bid_brokers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Brokers* _add = _internal_mutable_bid_brokers()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.PushBrokers.bid_brokers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>& PushBrokers::bid_brokers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.PushBrokers.bid_brokers)
  return _internal_bid_brokers();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>&
PushBrokers::_internal_bid_brokers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bid_brokers_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Brokers>*
PushBrokers::_internal_mutable_bid_brokers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bid_brokers_;
}

// -------------------------------------------------------------------

// PushTrade

// string symbol = 1 [json_name = "symbol"];
inline void PushTrade::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& PushTrade::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushTrade.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushTrade::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushTrade.symbol)
}
inline std::string* PushTrade::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushTrade.symbol)
  return _s;
}
inline const std::string& PushTrade::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void PushTrade::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* PushTrade::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* PushTrade::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.PushTrade.symbol)
  return _impl_.symbol_.Release();
}
inline void PushTrade::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.PushTrade.symbol)
}

// int64 sequence = 2 [json_name = "sequence"];
inline void PushTrade::clear_sequence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequence_ = ::int64_t{0};
}
inline ::int64_t PushTrade::sequence() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushTrade.sequence)
  return _internal_sequence();
}
inline void PushTrade::set_sequence(::int64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.PushTrade.sequence)
}
inline ::int64_t PushTrade::_internal_sequence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequence_;
}
inline void PushTrade::_internal_set_sequence(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sequence_ = value;
}

// repeated .longportapp.quote.v1.Trade trade = 3 [json_name = "trade"];
inline int PushTrade::_internal_trade_size() const {
  return _internal_trade().size();
}
inline int PushTrade::trade_size() const {
  return _internal_trade_size();
}
inline void PushTrade::clear_trade() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_.Clear();
}
inline ::longportapp::quote::v1::Trade* PushTrade::mutable_trade(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.PushTrade.trade)
  return _internal_mutable_trade()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>* PushTrade::mutable_trade()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.PushTrade.trade)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_trade();
}
inline const ::longportapp::quote::v1::Trade& PushTrade::trade(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.PushTrade.trade)
  return _internal_trade().Get(index);
}
inline ::longportapp::quote::v1::Trade* PushTrade::add_trade() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::Trade* _add = _internal_mutable_trade()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.PushTrade.trade)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>& PushTrade::trade() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.PushTrade.trade)
  return _internal_trade();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>&
PushTrade::_internal_trade() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trade_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::Trade>*
PushTrade::_internal_mutable_trade() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.trade_;
}

// -------------------------------------------------------------------

// MarketTradeDayRequest

// string market = 1 [json_name = "market"];
inline void MarketTradeDayRequest::clear_market() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.market_.ClearToEmpty();
}
inline const std::string& MarketTradeDayRequest::market() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.MarketTradeDayRequest.market)
  return _internal_market();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketTradeDayRequest::set_market(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.market_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MarketTradeDayRequest.market)
}
inline std::string* MarketTradeDayRequest::mutable_market() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_market();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.MarketTradeDayRequest.market)
  return _s;
}
inline const std::string& MarketTradeDayRequest::_internal_market() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.market_.Get();
}
inline void MarketTradeDayRequest::_internal_set_market(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.market_.Set(value, GetArena());
}
inline std::string* MarketTradeDayRequest::_internal_mutable_market() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.market_.Mutable( GetArena());
}
inline std::string* MarketTradeDayRequest::release_market() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.MarketTradeDayRequest.market)
  return _impl_.market_.Release();
}
inline void MarketTradeDayRequest::set_allocated_market(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.market_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_.IsDefault()) {
          _impl_.market_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.MarketTradeDayRequest.market)
}

// string beg_day = 2 [json_name = "begDay"];
inline void MarketTradeDayRequest::clear_beg_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.beg_day_.ClearToEmpty();
}
inline const std::string& MarketTradeDayRequest::beg_day() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.MarketTradeDayRequest.beg_day)
  return _internal_beg_day();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketTradeDayRequest::set_beg_day(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.beg_day_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MarketTradeDayRequest.beg_day)
}
inline std::string* MarketTradeDayRequest::mutable_beg_day() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_beg_day();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.MarketTradeDayRequest.beg_day)
  return _s;
}
inline const std::string& MarketTradeDayRequest::_internal_beg_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.beg_day_.Get();
}
inline void MarketTradeDayRequest::_internal_set_beg_day(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.beg_day_.Set(value, GetArena());
}
inline std::string* MarketTradeDayRequest::_internal_mutable_beg_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.beg_day_.Mutable( GetArena());
}
inline std::string* MarketTradeDayRequest::release_beg_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.MarketTradeDayRequest.beg_day)
  return _impl_.beg_day_.Release();
}
inline void MarketTradeDayRequest::set_allocated_beg_day(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.beg_day_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.beg_day_.IsDefault()) {
          _impl_.beg_day_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.MarketTradeDayRequest.beg_day)
}

// string end_day = 3 [json_name = "endDay"];
inline void MarketTradeDayRequest::clear_end_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_day_.ClearToEmpty();
}
inline const std::string& MarketTradeDayRequest::end_day() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.MarketTradeDayRequest.end_day)
  return _internal_end_day();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketTradeDayRequest::set_end_day(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_day_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MarketTradeDayRequest.end_day)
}
inline std::string* MarketTradeDayRequest::mutable_end_day() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_end_day();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.MarketTradeDayRequest.end_day)
  return _s;
}
inline const std::string& MarketTradeDayRequest::_internal_end_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_day_.Get();
}
inline void MarketTradeDayRequest::_internal_set_end_day(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_day_.Set(value, GetArena());
}
inline std::string* MarketTradeDayRequest::_internal_mutable_end_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.end_day_.Mutable( GetArena());
}
inline std::string* MarketTradeDayRequest::release_end_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.MarketTradeDayRequest.end_day)
  return _impl_.end_day_.Release();
}
inline void MarketTradeDayRequest::set_allocated_end_day(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_day_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.end_day_.IsDefault()) {
          _impl_.end_day_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.MarketTradeDayRequest.end_day)
}

// -------------------------------------------------------------------

// MarketTradeDayResponse

// repeated string trade_day = 1 [json_name = "tradeDay"];
inline int MarketTradeDayResponse::_internal_trade_day_size() const {
  return _internal_trade_day().size();
}
inline int MarketTradeDayResponse::trade_day_size() const {
  return _internal_trade_day_size();
}
inline void MarketTradeDayResponse::clear_trade_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trade_day_.Clear();
}
inline std::string* MarketTradeDayResponse::add_trade_day()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_trade_day()->Add();
  // @@protoc_insertion_point(field_add_mutable:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
  return _s;
}
inline const std::string& MarketTradeDayResponse::trade_day(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
  return _internal_trade_day().Get(index);
}
inline std::string* MarketTradeDayResponse::mutable_trade_day(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
  return _internal_mutable_trade_day()->Mutable(index);
}
inline void MarketTradeDayResponse::set_trade_day(int index, const std::string& value) {
  _internal_mutable_trade_day()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline void MarketTradeDayResponse::set_trade_day(int index, std::string&& value) {
  _internal_mutable_trade_day()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline void MarketTradeDayResponse::set_trade_day(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_trade_day()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline void MarketTradeDayResponse::set_trade_day(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_trade_day()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline void MarketTradeDayResponse::set_trade_day(int index, absl::string_view value) {
  _internal_mutable_trade_day()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline void MarketTradeDayResponse::add_trade_day(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_trade_day()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline void MarketTradeDayResponse::add_trade_day(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_trade_day()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline void MarketTradeDayResponse::add_trade_day(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_trade_day()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline void MarketTradeDayResponse::add_trade_day(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_trade_day()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline void MarketTradeDayResponse::add_trade_day(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_trade_day()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MarketTradeDayResponse::trade_day() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
  return _internal_trade_day();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MarketTradeDayResponse::mutable_trade_day() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.MarketTradeDayResponse.trade_day)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_trade_day();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MarketTradeDayResponse::_internal_trade_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trade_day_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MarketTradeDayResponse::_internal_mutable_trade_day() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.trade_day_;
}

// repeated string half_trade_day = 2 [json_name = "halfTradeDay"];
inline int MarketTradeDayResponse::_internal_half_trade_day_size() const {
  return _internal_half_trade_day().size();
}
inline int MarketTradeDayResponse::half_trade_day_size() const {
  return _internal_half_trade_day_size();
}
inline void MarketTradeDayResponse::clear_half_trade_day() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.half_trade_day_.Clear();
}
inline std::string* MarketTradeDayResponse::add_half_trade_day()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_half_trade_day()->Add();
  // @@protoc_insertion_point(field_add_mutable:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
  return _s;
}
inline const std::string& MarketTradeDayResponse::half_trade_day(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
  return _internal_half_trade_day().Get(index);
}
inline std::string* MarketTradeDayResponse::mutable_half_trade_day(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
  return _internal_mutable_half_trade_day()->Mutable(index);
}
inline void MarketTradeDayResponse::set_half_trade_day(int index, const std::string& value) {
  _internal_mutable_half_trade_day()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline void MarketTradeDayResponse::set_half_trade_day(int index, std::string&& value) {
  _internal_mutable_half_trade_day()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline void MarketTradeDayResponse::set_half_trade_day(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_half_trade_day()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline void MarketTradeDayResponse::set_half_trade_day(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_half_trade_day()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline void MarketTradeDayResponse::set_half_trade_day(int index, absl::string_view value) {
  _internal_mutable_half_trade_day()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline void MarketTradeDayResponse::add_half_trade_day(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_half_trade_day()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline void MarketTradeDayResponse::add_half_trade_day(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_half_trade_day()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline void MarketTradeDayResponse::add_half_trade_day(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_half_trade_day()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline void MarketTradeDayResponse::add_half_trade_day(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_half_trade_day()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline void MarketTradeDayResponse::add_half_trade_day(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_half_trade_day()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MarketTradeDayResponse::half_trade_day() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
  return _internal_half_trade_day();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MarketTradeDayResponse::mutable_half_trade_day() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.MarketTradeDayResponse.half_trade_day)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_half_trade_day();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MarketTradeDayResponse::_internal_half_trade_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.half_trade_day_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MarketTradeDayResponse::_internal_mutable_half_trade_day() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.half_trade_day_;
}

// -------------------------------------------------------------------

// CapitalFlowIntradayRequest

// string symbol = 1 [json_name = "symbol"];
inline void CapitalFlowIntradayRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& CapitalFlowIntradayRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalFlowIntradayRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapitalFlowIntradayRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.CapitalFlowIntradayRequest.symbol)
}
inline std::string* CapitalFlowIntradayRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalFlowIntradayRequest.symbol)
  return _s;
}
inline const std::string& CapitalFlowIntradayRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void CapitalFlowIntradayRequest::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* CapitalFlowIntradayRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* CapitalFlowIntradayRequest::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.CapitalFlowIntradayRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void CapitalFlowIntradayRequest::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.CapitalFlowIntradayRequest.symbol)
}

// -------------------------------------------------------------------

// CapitalFlowIntradayResponse_CapitalFlowLine

// string inflow = 1 [json_name = "inflow"];
inline void CapitalFlowIntradayResponse_CapitalFlowLine::clear_inflow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inflow_.ClearToEmpty();
}
inline const std::string& CapitalFlowIntradayResponse_CapitalFlowLine::inflow() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine.inflow)
  return _internal_inflow();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapitalFlowIntradayResponse_CapitalFlowLine::set_inflow(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inflow_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine.inflow)
}
inline std::string* CapitalFlowIntradayResponse_CapitalFlowLine::mutable_inflow() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_inflow();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine.inflow)
  return _s;
}
inline const std::string& CapitalFlowIntradayResponse_CapitalFlowLine::_internal_inflow() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inflow_.Get();
}
inline void CapitalFlowIntradayResponse_CapitalFlowLine::_internal_set_inflow(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inflow_.Set(value, GetArena());
}
inline std::string* CapitalFlowIntradayResponse_CapitalFlowLine::_internal_mutable_inflow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.inflow_.Mutable( GetArena());
}
inline std::string* CapitalFlowIntradayResponse_CapitalFlowLine::release_inflow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine.inflow)
  return _impl_.inflow_.Release();
}
inline void CapitalFlowIntradayResponse_CapitalFlowLine::set_allocated_inflow(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inflow_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.inflow_.IsDefault()) {
          _impl_.inflow_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine.inflow)
}

// int64 timestamp = 2 [json_name = "timestamp"];
inline void CapitalFlowIntradayResponse_CapitalFlowLine::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t CapitalFlowIntradayResponse_CapitalFlowLine::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine.timestamp)
  return _internal_timestamp();
}
inline void CapitalFlowIntradayResponse_CapitalFlowLine::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine.timestamp)
}
inline ::int64_t CapitalFlowIntradayResponse_CapitalFlowLine::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void CapitalFlowIntradayResponse_CapitalFlowLine::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// CapitalFlowIntradayResponse

// string symbol = 1 [json_name = "symbol"];
inline void CapitalFlowIntradayResponse::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& CapitalFlowIntradayResponse::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalFlowIntradayResponse.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapitalFlowIntradayResponse::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.CapitalFlowIntradayResponse.symbol)
}
inline std::string* CapitalFlowIntradayResponse::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalFlowIntradayResponse.symbol)
  return _s;
}
inline const std::string& CapitalFlowIntradayResponse::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void CapitalFlowIntradayResponse::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* CapitalFlowIntradayResponse::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* CapitalFlowIntradayResponse::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.CapitalFlowIntradayResponse.symbol)
  return _impl_.symbol_.Release();
}
inline void CapitalFlowIntradayResponse::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.CapitalFlowIntradayResponse.symbol)
}

// repeated .longportapp.quote.v1.CapitalFlowIntradayResponse.CapitalFlowLine capital_flow_lines = 2 [json_name = "capitalFlowLines"];
inline int CapitalFlowIntradayResponse::_internal_capital_flow_lines_size() const {
  return _internal_capital_flow_lines().size();
}
inline int CapitalFlowIntradayResponse::capital_flow_lines_size() const {
  return _internal_capital_flow_lines_size();
}
inline void CapitalFlowIntradayResponse::clear_capital_flow_lines() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capital_flow_lines_.Clear();
}
inline ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine* CapitalFlowIntradayResponse::mutable_capital_flow_lines(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalFlowIntradayResponse.capital_flow_lines)
  return _internal_mutable_capital_flow_lines()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine>* CapitalFlowIntradayResponse::mutable_capital_flow_lines()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.CapitalFlowIntradayResponse.capital_flow_lines)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_capital_flow_lines();
}
inline const ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine& CapitalFlowIntradayResponse::capital_flow_lines(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalFlowIntradayResponse.capital_flow_lines)
  return _internal_capital_flow_lines().Get(index);
}
inline ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine* CapitalFlowIntradayResponse::add_capital_flow_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine* _add = _internal_mutable_capital_flow_lines()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.CapitalFlowIntradayResponse.capital_flow_lines)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine>& CapitalFlowIntradayResponse::capital_flow_lines() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.CapitalFlowIntradayResponse.capital_flow_lines)
  return _internal_capital_flow_lines();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine>&
CapitalFlowIntradayResponse::_internal_capital_flow_lines() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capital_flow_lines_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::CapitalFlowIntradayResponse_CapitalFlowLine>*
CapitalFlowIntradayResponse::_internal_mutable_capital_flow_lines() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.capital_flow_lines_;
}

// -------------------------------------------------------------------

// CapitalDistributionResponse_CapitalDistribution

// string large = 1 [json_name = "large"];
inline void CapitalDistributionResponse_CapitalDistribution::clear_large() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.large_.ClearToEmpty();
}
inline const std::string& CapitalDistributionResponse_CapitalDistribution::large() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.large)
  return _internal_large();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapitalDistributionResponse_CapitalDistribution::set_large(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.large_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.large)
}
inline std::string* CapitalDistributionResponse_CapitalDistribution::mutable_large() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_large();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.large)
  return _s;
}
inline const std::string& CapitalDistributionResponse_CapitalDistribution::_internal_large() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.large_.Get();
}
inline void CapitalDistributionResponse_CapitalDistribution::_internal_set_large(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.large_.Set(value, GetArena());
}
inline std::string* CapitalDistributionResponse_CapitalDistribution::_internal_mutable_large() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.large_.Mutable( GetArena());
}
inline std::string* CapitalDistributionResponse_CapitalDistribution::release_large() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.large)
  return _impl_.large_.Release();
}
inline void CapitalDistributionResponse_CapitalDistribution::set_allocated_large(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.large_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.large_.IsDefault()) {
          _impl_.large_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.large)
}

// string medium = 2 [json_name = "medium"];
inline void CapitalDistributionResponse_CapitalDistribution::clear_medium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.medium_.ClearToEmpty();
}
inline const std::string& CapitalDistributionResponse_CapitalDistribution::medium() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.medium)
  return _internal_medium();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapitalDistributionResponse_CapitalDistribution::set_medium(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.medium_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.medium)
}
inline std::string* CapitalDistributionResponse_CapitalDistribution::mutable_medium() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_medium();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.medium)
  return _s;
}
inline const std::string& CapitalDistributionResponse_CapitalDistribution::_internal_medium() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.medium_.Get();
}
inline void CapitalDistributionResponse_CapitalDistribution::_internal_set_medium(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.medium_.Set(value, GetArena());
}
inline std::string* CapitalDistributionResponse_CapitalDistribution::_internal_mutable_medium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.medium_.Mutable( GetArena());
}
inline std::string* CapitalDistributionResponse_CapitalDistribution::release_medium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.medium)
  return _impl_.medium_.Release();
}
inline void CapitalDistributionResponse_CapitalDistribution::set_allocated_medium(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.medium_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.medium_.IsDefault()) {
          _impl_.medium_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.medium)
}

// string small = 3 [json_name = "small"];
inline void CapitalDistributionResponse_CapitalDistribution::clear_small() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.small_.ClearToEmpty();
}
inline const std::string& CapitalDistributionResponse_CapitalDistribution::small() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.small)
  return _internal_small();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapitalDistributionResponse_CapitalDistribution::set_small(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.small_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.small)
}
inline std::string* CapitalDistributionResponse_CapitalDistribution::mutable_small() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_small();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.small)
  return _s;
}
inline const std::string& CapitalDistributionResponse_CapitalDistribution::_internal_small() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.small_.Get();
}
inline void CapitalDistributionResponse_CapitalDistribution::_internal_set_small(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.small_.Set(value, GetArena());
}
inline std::string* CapitalDistributionResponse_CapitalDistribution::_internal_mutable_small() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.small_.Mutable( GetArena());
}
inline std::string* CapitalDistributionResponse_CapitalDistribution::release_small() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.small)
  return _impl_.small_.Release();
}
inline void CapitalDistributionResponse_CapitalDistribution::set_allocated_small(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.small_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.small_.IsDefault()) {
          _impl_.small_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution.small)
}

// -------------------------------------------------------------------

// CapitalDistributionResponse

// string symbol = 1 [json_name = "symbol"];
inline void CapitalDistributionResponse::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& CapitalDistributionResponse::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalDistributionResponse.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CapitalDistributionResponse::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.CapitalDistributionResponse.symbol)
}
inline std::string* CapitalDistributionResponse::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalDistributionResponse.symbol)
  return _s;
}
inline const std::string& CapitalDistributionResponse::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void CapitalDistributionResponse::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* CapitalDistributionResponse::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* CapitalDistributionResponse::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.CapitalDistributionResponse.symbol)
  return _impl_.symbol_.Release();
}
inline void CapitalDistributionResponse::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.CapitalDistributionResponse.symbol)
}

// int64 timestamp = 2 [json_name = "timestamp"];
inline void CapitalDistributionResponse::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t CapitalDistributionResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalDistributionResponse.timestamp)
  return _internal_timestamp();
}
inline void CapitalDistributionResponse::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.CapitalDistributionResponse.timestamp)
}
inline ::int64_t CapitalDistributionResponse::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void CapitalDistributionResponse::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// .longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution capital_in = 3 [json_name = "capitalIn"];
inline bool CapitalDistributionResponse::has_capital_in() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.capital_in_ != nullptr);
  return value;
}
inline void CapitalDistributionResponse::clear_capital_in() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.capital_in_ != nullptr) _impl_.capital_in_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution& CapitalDistributionResponse::_internal_capital_in() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* p = _impl_.capital_in_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution&>(::longportapp::quote::v1::_CapitalDistributionResponse_CapitalDistribution_default_instance_);
}
inline const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution& CapitalDistributionResponse::capital_in() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalDistributionResponse.capital_in)
  return _internal_capital_in();
}
inline void CapitalDistributionResponse::unsafe_arena_set_allocated_capital_in(::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.capital_in_);
  }
  _impl_.capital_in_ = reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.CapitalDistributionResponse.capital_in)
}
inline ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* CapitalDistributionResponse::release_capital_in() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* released = _impl_.capital_in_;
  _impl_.capital_in_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* CapitalDistributionResponse::unsafe_arena_release_capital_in() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.CapitalDistributionResponse.capital_in)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* temp = _impl_.capital_in_;
  _impl_.capital_in_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* CapitalDistributionResponse::_internal_mutable_capital_in() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.capital_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution>(GetArena());
    _impl_.capital_in_ = reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(p);
  }
  return _impl_.capital_in_;
}
inline ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* CapitalDistributionResponse::mutable_capital_in() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* _msg = _internal_mutable_capital_in();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalDistributionResponse.capital_in)
  return _msg;
}
inline void CapitalDistributionResponse::set_allocated_capital_in(::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(_impl_.capital_in_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.capital_in_ = reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.CapitalDistributionResponse.capital_in)
}

// .longportapp.quote.v1.CapitalDistributionResponse.CapitalDistribution capital_out = 4 [json_name = "capitalOut"];
inline bool CapitalDistributionResponse::has_capital_out() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.capital_out_ != nullptr);
  return value;
}
inline void CapitalDistributionResponse::clear_capital_out() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.capital_out_ != nullptr) _impl_.capital_out_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution& CapitalDistributionResponse::_internal_capital_out() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* p = _impl_.capital_out_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution&>(::longportapp::quote::v1::_CapitalDistributionResponse_CapitalDistribution_default_instance_);
}
inline const ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution& CapitalDistributionResponse::capital_out() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.CapitalDistributionResponse.capital_out)
  return _internal_capital_out();
}
inline void CapitalDistributionResponse::unsafe_arena_set_allocated_capital_out(::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.capital_out_);
  }
  _impl_.capital_out_ = reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.CapitalDistributionResponse.capital_out)
}
inline ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* CapitalDistributionResponse::release_capital_out() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* released = _impl_.capital_out_;
  _impl_.capital_out_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* CapitalDistributionResponse::unsafe_arena_release_capital_out() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.CapitalDistributionResponse.capital_out)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* temp = _impl_.capital_out_;
  _impl_.capital_out_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* CapitalDistributionResponse::_internal_mutable_capital_out() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.capital_out_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution>(GetArena());
    _impl_.capital_out_ = reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(p);
  }
  return _impl_.capital_out_;
}
inline ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* CapitalDistributionResponse::mutable_capital_out() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* _msg = _internal_mutable_capital_out();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.CapitalDistributionResponse.capital_out)
  return _msg;
}
inline void CapitalDistributionResponse::set_allocated_capital_out(::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(_impl_.capital_out_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.capital_out_ = reinterpret_cast<::longportapp::quote::v1::CapitalDistributionResponse_CapitalDistribution*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.CapitalDistributionResponse.capital_out)
}

// -------------------------------------------------------------------

// SecurityCalcQuoteRequest

// repeated string symbols = 1 [json_name = "symbols"];
inline int SecurityCalcQuoteRequest::_internal_symbols_size() const {
  return _internal_symbols().size();
}
inline int SecurityCalcQuoteRequest::symbols_size() const {
  return _internal_symbols_size();
}
inline void SecurityCalcQuoteRequest::clear_symbols() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbols_.Clear();
}
inline std::string* SecurityCalcQuoteRequest::add_symbols()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_symbols()->Add();
  // @@protoc_insertion_point(field_add_mutable:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
  return _s;
}
inline const std::string& SecurityCalcQuoteRequest::symbols(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
  return _internal_symbols().Get(index);
}
inline std::string* SecurityCalcQuoteRequest::mutable_symbols(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
  return _internal_mutable_symbols()->Mutable(index);
}
inline void SecurityCalcQuoteRequest::set_symbols(int index, const std::string& value) {
  _internal_mutable_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline void SecurityCalcQuoteRequest::set_symbols(int index, std::string&& value) {
  _internal_mutable_symbols()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline void SecurityCalcQuoteRequest::set_symbols(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_symbols()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline void SecurityCalcQuoteRequest::set_symbols(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_symbols()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline void SecurityCalcQuoteRequest::set_symbols(int index, absl::string_view value) {
  _internal_mutable_symbols()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline void SecurityCalcQuoteRequest::add_symbols(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline void SecurityCalcQuoteRequest::add_symbols(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbols()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline void SecurityCalcQuoteRequest::add_symbols(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbols()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline void SecurityCalcQuoteRequest::add_symbols(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbols()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline void SecurityCalcQuoteRequest::add_symbols(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_symbols()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SecurityCalcQuoteRequest::symbols() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
  return _internal_symbols();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SecurityCalcQuoteRequest::mutable_symbols() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityCalcQuoteRequest.symbols)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_symbols();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SecurityCalcQuoteRequest::_internal_symbols() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbols_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SecurityCalcQuoteRequest::_internal_mutable_symbols() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.symbols_;
}

// repeated .longportapp.quote.v1.CalcIndex calc_index = 2 [json_name = "calcIndex"];
inline int SecurityCalcQuoteRequest::_internal_calc_index_size() const {
  return _internal_calc_index().size();
}
inline int SecurityCalcQuoteRequest::calc_index_size() const {
  return _internal_calc_index_size();
}
inline void SecurityCalcQuoteRequest::clear_calc_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.calc_index_.Clear();
}
inline ::longportapp::quote::v1::CalcIndex SecurityCalcQuoteRequest::calc_index(int index) const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcQuoteRequest.calc_index)
  return static_cast<::longportapp::quote::v1::CalcIndex>(_internal_calc_index().Get(index));
}
inline void SecurityCalcQuoteRequest::set_calc_index(int index, ::longportapp::quote::v1::CalcIndex value) {
  _internal_mutable_calc_index()->Set(index, value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcQuoteRequest.calc_index)
}
inline void SecurityCalcQuoteRequest::add_calc_index(::longportapp::quote::v1::CalcIndex value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_calc_index()->Add(value);
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityCalcQuoteRequest.calc_index)
}
inline const ::google::protobuf::RepeatedField<int>& SecurityCalcQuoteRequest::calc_index() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityCalcQuoteRequest.calc_index)
  return _internal_calc_index();
}
inline ::google::protobuf::RepeatedField<int>* SecurityCalcQuoteRequest::mutable_calc_index()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityCalcQuoteRequest.calc_index)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_calc_index();
}
inline const ::google::protobuf::RepeatedField<int>& SecurityCalcQuoteRequest::_internal_calc_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.calc_index_;
}
inline ::google::protobuf::RepeatedField<int>* SecurityCalcQuoteRequest::_internal_mutable_calc_index() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.calc_index_;
}

// -------------------------------------------------------------------

// SecurityCalcIndex

// string symbol = 1 [json_name = "symbol"];
inline void SecurityCalcIndex::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.symbol)
}
inline std::string* SecurityCalcIndex::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.symbol)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityCalcIndex::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityCalcIndex::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.symbol)
}

// string last_done = 2 [json_name = "lastDone"];
inline void SecurityCalcIndex::clear_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::last_done() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.last_done)
  return _internal_last_done();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_last_done(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.last_done)
}
inline std::string* SecurityCalcIndex::mutable_last_done() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_done();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.last_done)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_last_done() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_done_.Get();
}
inline void SecurityCalcIndex::_internal_set_last_done(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_done_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_done_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_last_done() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.last_done)
  return _impl_.last_done_.Release();
}
inline void SecurityCalcIndex::set_allocated_last_done(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_done_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_done_.IsDefault()) {
          _impl_.last_done_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.last_done)
}

// string change_val = 3 [json_name = "changeVal"];
inline void SecurityCalcIndex::clear_change_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.change_val_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::change_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.change_val)
  return _internal_change_val();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_change_val(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_val_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.change_val)
}
inline std::string* SecurityCalcIndex::mutable_change_val() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_change_val();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.change_val)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_change_val() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.change_val_.Get();
}
inline void SecurityCalcIndex::_internal_set_change_val(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_val_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_change_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.change_val_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_change_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.change_val)
  return _impl_.change_val_.Release();
}
inline void SecurityCalcIndex::set_allocated_change_val(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.change_val_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.change_val_.IsDefault()) {
          _impl_.change_val_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.change_val)
}

// string change_rate = 4 [json_name = "changeRate"];
inline void SecurityCalcIndex::clear_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.change_rate_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::change_rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.change_rate)
  return _internal_change_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_change_rate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.change_rate)
}
inline std::string* SecurityCalcIndex::mutable_change_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_change_rate();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.change_rate)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_change_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.change_rate_.Get();
}
inline void SecurityCalcIndex::_internal_set_change_rate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_rate_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.change_rate_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.change_rate)
  return _impl_.change_rate_.Release();
}
inline void SecurityCalcIndex::set_allocated_change_rate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.change_rate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.change_rate_.IsDefault()) {
          _impl_.change_rate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.change_rate)
}

// int64 volume = 5 [json_name = "volume"];
inline void SecurityCalcIndex::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t SecurityCalcIndex::volume() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.volume)
  return _internal_volume();
}
inline void SecurityCalcIndex::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.volume)
}
inline ::int64_t SecurityCalcIndex::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void SecurityCalcIndex::_internal_set_volume(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// string turnover = 6 [json_name = "turnover"];
inline void SecurityCalcIndex::clear_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::turnover() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.turnover)
  return _internal_turnover();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_turnover(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.turnover)
}
inline std::string* SecurityCalcIndex::mutable_turnover() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.turnover)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_turnover() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_.Get();
}
inline void SecurityCalcIndex::_internal_set_turnover(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_turnover() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.turnover)
  return _impl_.turnover_.Release();
}
inline void SecurityCalcIndex::set_allocated_turnover(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_.IsDefault()) {
          _impl_.turnover_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.turnover)
}

// string ytd_change_rate = 7 [json_name = "ytdChangeRate"];
inline void SecurityCalcIndex::clear_ytd_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ytd_change_rate_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::ytd_change_rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.ytd_change_rate)
  return _internal_ytd_change_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_ytd_change_rate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ytd_change_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.ytd_change_rate)
}
inline std::string* SecurityCalcIndex::mutable_ytd_change_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ytd_change_rate();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.ytd_change_rate)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_ytd_change_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ytd_change_rate_.Get();
}
inline void SecurityCalcIndex::_internal_set_ytd_change_rate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ytd_change_rate_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_ytd_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ytd_change_rate_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_ytd_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.ytd_change_rate)
  return _impl_.ytd_change_rate_.Release();
}
inline void SecurityCalcIndex::set_allocated_ytd_change_rate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ytd_change_rate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ytd_change_rate_.IsDefault()) {
          _impl_.ytd_change_rate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.ytd_change_rate)
}

// string turnover_rate = 8 [json_name = "turnoverRate"];
inline void SecurityCalcIndex::clear_turnover_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_rate_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::turnover_rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.turnover_rate)
  return _internal_turnover_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_turnover_rate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.turnover_rate)
}
inline std::string* SecurityCalcIndex::mutable_turnover_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turnover_rate();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.turnover_rate)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_turnover_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.turnover_rate_.Get();
}
inline void SecurityCalcIndex::_internal_set_turnover_rate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turnover_rate_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_turnover_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.turnover_rate_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_turnover_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.turnover_rate)
  return _impl_.turnover_rate_.Release();
}
inline void SecurityCalcIndex::set_allocated_turnover_rate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.turnover_rate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.turnover_rate_.IsDefault()) {
          _impl_.turnover_rate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.turnover_rate)
}

// string total_market_value = 9 [json_name = "totalMarketValue"];
inline void SecurityCalcIndex::clear_total_market_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_market_value_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::total_market_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.total_market_value)
  return _internal_total_market_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_total_market_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_market_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.total_market_value)
}
inline std::string* SecurityCalcIndex::mutable_total_market_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_total_market_value();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.total_market_value)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_total_market_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_market_value_.Get();
}
inline void SecurityCalcIndex::_internal_set_total_market_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_market_value_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_total_market_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.total_market_value_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_total_market_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.total_market_value)
  return _impl_.total_market_value_.Release();
}
inline void SecurityCalcIndex::set_allocated_total_market_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_market_value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.total_market_value_.IsDefault()) {
          _impl_.total_market_value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.total_market_value)
}

// string capital_flow = 10 [json_name = "capitalFlow"];
inline void SecurityCalcIndex::clear_capital_flow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capital_flow_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::capital_flow() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.capital_flow)
  return _internal_capital_flow();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_capital_flow(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.capital_flow_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.capital_flow)
}
inline std::string* SecurityCalcIndex::mutable_capital_flow() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_capital_flow();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.capital_flow)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_capital_flow() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capital_flow_.Get();
}
inline void SecurityCalcIndex::_internal_set_capital_flow(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.capital_flow_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_capital_flow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.capital_flow_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_capital_flow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.capital_flow)
  return _impl_.capital_flow_.Release();
}
inline void SecurityCalcIndex::set_allocated_capital_flow(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capital_flow_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.capital_flow_.IsDefault()) {
          _impl_.capital_flow_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.capital_flow)
}

// string amplitude = 11 [json_name = "amplitude"];
inline void SecurityCalcIndex::clear_amplitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.amplitude_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::amplitude() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.amplitude)
  return _internal_amplitude();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_amplitude(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.amplitude_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.amplitude)
}
inline std::string* SecurityCalcIndex::mutable_amplitude() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_amplitude();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.amplitude)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_amplitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.amplitude_.Get();
}
inline void SecurityCalcIndex::_internal_set_amplitude(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.amplitude_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_amplitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.amplitude_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_amplitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.amplitude)
  return _impl_.amplitude_.Release();
}
inline void SecurityCalcIndex::set_allocated_amplitude(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.amplitude_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amplitude_.IsDefault()) {
          _impl_.amplitude_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.amplitude)
}

// string volume_ratio = 12 [json_name = "volumeRatio"];
inline void SecurityCalcIndex::clear_volume_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ratio_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::volume_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.volume_ratio)
  return _internal_volume_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_volume_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.volume_ratio)
}
inline std::string* SecurityCalcIndex::mutable_volume_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_volume_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.volume_ratio)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_volume_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_ratio_.Get();
}
inline void SecurityCalcIndex::_internal_set_volume_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ratio_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_volume_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.volume_ratio_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_volume_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.volume_ratio)
  return _impl_.volume_ratio_.Release();
}
inline void SecurityCalcIndex::set_allocated_volume_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.volume_ratio_.IsDefault()) {
          _impl_.volume_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.volume_ratio)
}

// string pe_ttm_ratio = 13 [json_name = "peTtmRatio"];
inline void SecurityCalcIndex::clear_pe_ttm_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pe_ttm_ratio_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::pe_ttm_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.pe_ttm_ratio)
  return _internal_pe_ttm_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_pe_ttm_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pe_ttm_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.pe_ttm_ratio)
}
inline std::string* SecurityCalcIndex::mutable_pe_ttm_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pe_ttm_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.pe_ttm_ratio)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_pe_ttm_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pe_ttm_ratio_.Get();
}
inline void SecurityCalcIndex::_internal_set_pe_ttm_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pe_ttm_ratio_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_pe_ttm_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pe_ttm_ratio_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_pe_ttm_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.pe_ttm_ratio)
  return _impl_.pe_ttm_ratio_.Release();
}
inline void SecurityCalcIndex::set_allocated_pe_ttm_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pe_ttm_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pe_ttm_ratio_.IsDefault()) {
          _impl_.pe_ttm_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.pe_ttm_ratio)
}

// string pb_ratio = 14 [json_name = "pbRatio"];
inline void SecurityCalcIndex::clear_pb_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pb_ratio_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::pb_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.pb_ratio)
  return _internal_pb_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_pb_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pb_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.pb_ratio)
}
inline std::string* SecurityCalcIndex::mutable_pb_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pb_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.pb_ratio)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_pb_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pb_ratio_.Get();
}
inline void SecurityCalcIndex::_internal_set_pb_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pb_ratio_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_pb_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pb_ratio_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_pb_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.pb_ratio)
  return _impl_.pb_ratio_.Release();
}
inline void SecurityCalcIndex::set_allocated_pb_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pb_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pb_ratio_.IsDefault()) {
          _impl_.pb_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.pb_ratio)
}

// string dividend_ratio_ttm = 15 [json_name = "dividendRatioTtm"];
inline void SecurityCalcIndex::clear_dividend_ratio_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividend_ratio_ttm_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::dividend_ratio_ttm() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.dividend_ratio_ttm)
  return _internal_dividend_ratio_ttm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_dividend_ratio_ttm(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividend_ratio_ttm_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.dividend_ratio_ttm)
}
inline std::string* SecurityCalcIndex::mutable_dividend_ratio_ttm() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dividend_ratio_ttm();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.dividend_ratio_ttm)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_dividend_ratio_ttm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dividend_ratio_ttm_.Get();
}
inline void SecurityCalcIndex::_internal_set_dividend_ratio_ttm(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dividend_ratio_ttm_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_dividend_ratio_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.dividend_ratio_ttm_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_dividend_ratio_ttm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.dividend_ratio_ttm)
  return _impl_.dividend_ratio_ttm_.Release();
}
inline void SecurityCalcIndex::set_allocated_dividend_ratio_ttm(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dividend_ratio_ttm_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dividend_ratio_ttm_.IsDefault()) {
          _impl_.dividend_ratio_ttm_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.dividend_ratio_ttm)
}

// string five_day_change_rate = 16 [json_name = "fiveDayChangeRate"];
inline void SecurityCalcIndex::clear_five_day_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.five_day_change_rate_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::five_day_change_rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.five_day_change_rate)
  return _internal_five_day_change_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_five_day_change_rate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.five_day_change_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.five_day_change_rate)
}
inline std::string* SecurityCalcIndex::mutable_five_day_change_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_five_day_change_rate();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.five_day_change_rate)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_five_day_change_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.five_day_change_rate_.Get();
}
inline void SecurityCalcIndex::_internal_set_five_day_change_rate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.five_day_change_rate_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_five_day_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.five_day_change_rate_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_five_day_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.five_day_change_rate)
  return _impl_.five_day_change_rate_.Release();
}
inline void SecurityCalcIndex::set_allocated_five_day_change_rate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.five_day_change_rate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.five_day_change_rate_.IsDefault()) {
          _impl_.five_day_change_rate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.five_day_change_rate)
}

// string ten_day_change_rate = 17 [json_name = "tenDayChangeRate"];
inline void SecurityCalcIndex::clear_ten_day_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ten_day_change_rate_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::ten_day_change_rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.ten_day_change_rate)
  return _internal_ten_day_change_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_ten_day_change_rate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ten_day_change_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.ten_day_change_rate)
}
inline std::string* SecurityCalcIndex::mutable_ten_day_change_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ten_day_change_rate();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.ten_day_change_rate)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_ten_day_change_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ten_day_change_rate_.Get();
}
inline void SecurityCalcIndex::_internal_set_ten_day_change_rate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ten_day_change_rate_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_ten_day_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ten_day_change_rate_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_ten_day_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.ten_day_change_rate)
  return _impl_.ten_day_change_rate_.Release();
}
inline void SecurityCalcIndex::set_allocated_ten_day_change_rate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ten_day_change_rate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ten_day_change_rate_.IsDefault()) {
          _impl_.ten_day_change_rate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.ten_day_change_rate)
}

// string half_year_change_rate = 18 [json_name = "halfYearChangeRate"];
inline void SecurityCalcIndex::clear_half_year_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.half_year_change_rate_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::half_year_change_rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.half_year_change_rate)
  return _internal_half_year_change_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_half_year_change_rate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.half_year_change_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.half_year_change_rate)
}
inline std::string* SecurityCalcIndex::mutable_half_year_change_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_half_year_change_rate();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.half_year_change_rate)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_half_year_change_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.half_year_change_rate_.Get();
}
inline void SecurityCalcIndex::_internal_set_half_year_change_rate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.half_year_change_rate_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_half_year_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.half_year_change_rate_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_half_year_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.half_year_change_rate)
  return _impl_.half_year_change_rate_.Release();
}
inline void SecurityCalcIndex::set_allocated_half_year_change_rate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.half_year_change_rate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.half_year_change_rate_.IsDefault()) {
          _impl_.half_year_change_rate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.half_year_change_rate)
}

// string five_minutes_change_rate = 19 [json_name = "fiveMinutesChangeRate"];
inline void SecurityCalcIndex::clear_five_minutes_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.five_minutes_change_rate_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::five_minutes_change_rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.five_minutes_change_rate)
  return _internal_five_minutes_change_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_five_minutes_change_rate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.five_minutes_change_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.five_minutes_change_rate)
}
inline std::string* SecurityCalcIndex::mutable_five_minutes_change_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_five_minutes_change_rate();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.five_minutes_change_rate)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_five_minutes_change_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.five_minutes_change_rate_.Get();
}
inline void SecurityCalcIndex::_internal_set_five_minutes_change_rate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.five_minutes_change_rate_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_five_minutes_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.five_minutes_change_rate_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_five_minutes_change_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.five_minutes_change_rate)
  return _impl_.five_minutes_change_rate_.Release();
}
inline void SecurityCalcIndex::set_allocated_five_minutes_change_rate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.five_minutes_change_rate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.five_minutes_change_rate_.IsDefault()) {
          _impl_.five_minutes_change_rate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.five_minutes_change_rate)
}

// string expiry_date = 20 [json_name = "expiryDate"];
inline void SecurityCalcIndex::clear_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::expiry_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.expiry_date)
  return _internal_expiry_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_expiry_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.expiry_date)
}
inline std::string* SecurityCalcIndex::mutable_expiry_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expiry_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.expiry_date)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_expiry_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expiry_date_.Get();
}
inline void SecurityCalcIndex::_internal_set_expiry_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expiry_date_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.expiry_date_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_expiry_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.expiry_date)
  return _impl_.expiry_date_.Release();
}
inline void SecurityCalcIndex::set_allocated_expiry_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expiry_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expiry_date_.IsDefault()) {
          _impl_.expiry_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.expiry_date)
}

// string strike_price = 21 [json_name = "strikePrice"];
inline void SecurityCalcIndex::clear_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strike_price_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.strike_price)
  return _internal_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.strike_price)
}
inline std::string* SecurityCalcIndex::mutable_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.strike_price)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strike_price_.Get();
}
inline void SecurityCalcIndex::_internal_set_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strike_price_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.strike_price_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.strike_price)
  return _impl_.strike_price_.Release();
}
inline void SecurityCalcIndex::set_allocated_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strike_price_.IsDefault()) {
          _impl_.strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.strike_price)
}

// string upper_strike_price = 22 [json_name = "upperStrikePrice"];
inline void SecurityCalcIndex::clear_upper_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.upper_strike_price_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::upper_strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.upper_strike_price)
  return _internal_upper_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_upper_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.upper_strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.upper_strike_price)
}
inline std::string* SecurityCalcIndex::mutable_upper_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_upper_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.upper_strike_price)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_upper_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.upper_strike_price_.Get();
}
inline void SecurityCalcIndex::_internal_set_upper_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.upper_strike_price_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_upper_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.upper_strike_price_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_upper_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.upper_strike_price)
  return _impl_.upper_strike_price_.Release();
}
inline void SecurityCalcIndex::set_allocated_upper_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.upper_strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.upper_strike_price_.IsDefault()) {
          _impl_.upper_strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.upper_strike_price)
}

// string lower_strike_price = 23 [json_name = "lowerStrikePrice"];
inline void SecurityCalcIndex::clear_lower_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lower_strike_price_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::lower_strike_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.lower_strike_price)
  return _internal_lower_strike_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_lower_strike_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lower_strike_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.lower_strike_price)
}
inline std::string* SecurityCalcIndex::mutable_lower_strike_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lower_strike_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.lower_strike_price)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_lower_strike_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lower_strike_price_.Get();
}
inline void SecurityCalcIndex::_internal_set_lower_strike_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lower_strike_price_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_lower_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lower_strike_price_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_lower_strike_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.lower_strike_price)
  return _impl_.lower_strike_price_.Release();
}
inline void SecurityCalcIndex::set_allocated_lower_strike_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lower_strike_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lower_strike_price_.IsDefault()) {
          _impl_.lower_strike_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.lower_strike_price)
}

// int64 outstanding_qty = 24 [json_name = "outstandingQty"];
inline void SecurityCalcIndex::clear_outstanding_qty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_qty_ = ::int64_t{0};
}
inline ::int64_t SecurityCalcIndex::outstanding_qty() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.outstanding_qty)
  return _internal_outstanding_qty();
}
inline void SecurityCalcIndex::set_outstanding_qty(::int64_t value) {
  _internal_set_outstanding_qty(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.outstanding_qty)
}
inline ::int64_t SecurityCalcIndex::_internal_outstanding_qty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outstanding_qty_;
}
inline void SecurityCalcIndex::_internal_set_outstanding_qty(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_qty_ = value;
}

// string outstanding_ratio = 25 [json_name = "outstandingRatio"];
inline void SecurityCalcIndex::clear_outstanding_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_ratio_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::outstanding_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.outstanding_ratio)
  return _internal_outstanding_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_outstanding_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.outstanding_ratio)
}
inline std::string* SecurityCalcIndex::mutable_outstanding_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_outstanding_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.outstanding_ratio)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_outstanding_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.outstanding_ratio_.Get();
}
inline void SecurityCalcIndex::_internal_set_outstanding_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.outstanding_ratio_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_outstanding_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.outstanding_ratio_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_outstanding_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.outstanding_ratio)
  return _impl_.outstanding_ratio_.Release();
}
inline void SecurityCalcIndex::set_allocated_outstanding_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.outstanding_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.outstanding_ratio_.IsDefault()) {
          _impl_.outstanding_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.outstanding_ratio)
}

// string premium = 26 [json_name = "premium"];
inline void SecurityCalcIndex::clear_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.premium_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::premium() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.premium)
  return _internal_premium();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_premium(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.premium_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.premium)
}
inline std::string* SecurityCalcIndex::mutable_premium() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_premium();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.premium)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_premium() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.premium_.Get();
}
inline void SecurityCalcIndex::_internal_set_premium(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.premium_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.premium_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_premium() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.premium)
  return _impl_.premium_.Release();
}
inline void SecurityCalcIndex::set_allocated_premium(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.premium_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.premium_.IsDefault()) {
          _impl_.premium_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.premium)
}

// string itm_otm = 27 [json_name = "itmOtm"];
inline void SecurityCalcIndex::clear_itm_otm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.itm_otm_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::itm_otm() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.itm_otm)
  return _internal_itm_otm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_itm_otm(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.itm_otm_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.itm_otm)
}
inline std::string* SecurityCalcIndex::mutable_itm_otm() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_itm_otm();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.itm_otm)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_itm_otm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.itm_otm_.Get();
}
inline void SecurityCalcIndex::_internal_set_itm_otm(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.itm_otm_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_itm_otm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.itm_otm_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_itm_otm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.itm_otm)
  return _impl_.itm_otm_.Release();
}
inline void SecurityCalcIndex::set_allocated_itm_otm(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.itm_otm_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.itm_otm_.IsDefault()) {
          _impl_.itm_otm_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.itm_otm)
}

// string implied_volatility = 28 [json_name = "impliedVolatility"];
inline void SecurityCalcIndex::clear_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.implied_volatility_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::implied_volatility() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.implied_volatility)
  return _internal_implied_volatility();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_implied_volatility(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.implied_volatility_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.implied_volatility)
}
inline std::string* SecurityCalcIndex::mutable_implied_volatility() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_implied_volatility();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.implied_volatility)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_implied_volatility() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.implied_volatility_.Get();
}
inline void SecurityCalcIndex::_internal_set_implied_volatility(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.implied_volatility_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.implied_volatility_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_implied_volatility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.implied_volatility)
  return _impl_.implied_volatility_.Release();
}
inline void SecurityCalcIndex::set_allocated_implied_volatility(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.implied_volatility_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.implied_volatility_.IsDefault()) {
          _impl_.implied_volatility_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.implied_volatility)
}

// string warrant_delta = 29 [json_name = "warrantDelta"];
inline void SecurityCalcIndex::clear_warrant_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.warrant_delta_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::warrant_delta() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.warrant_delta)
  return _internal_warrant_delta();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_warrant_delta(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.warrant_delta_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.warrant_delta)
}
inline std::string* SecurityCalcIndex::mutable_warrant_delta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_warrant_delta();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.warrant_delta)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_warrant_delta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.warrant_delta_.Get();
}
inline void SecurityCalcIndex::_internal_set_warrant_delta(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.warrant_delta_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_warrant_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.warrant_delta_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_warrant_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.warrant_delta)
  return _impl_.warrant_delta_.Release();
}
inline void SecurityCalcIndex::set_allocated_warrant_delta(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.warrant_delta_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.warrant_delta_.IsDefault()) {
          _impl_.warrant_delta_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.warrant_delta)
}

// string call_price = 30 [json_name = "callPrice"];
inline void SecurityCalcIndex::clear_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.call_price_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::call_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.call_price)
  return _internal_call_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_call_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.call_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.call_price)
}
inline std::string* SecurityCalcIndex::mutable_call_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_call_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.call_price)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_call_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.call_price_.Get();
}
inline void SecurityCalcIndex::_internal_set_call_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.call_price_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.call_price_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.call_price)
  return _impl_.call_price_.Release();
}
inline void SecurityCalcIndex::set_allocated_call_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.call_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.call_price_.IsDefault()) {
          _impl_.call_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.call_price)
}

// string to_call_price = 31 [json_name = "toCallPrice"];
inline void SecurityCalcIndex::clear_to_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_call_price_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::to_call_price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.to_call_price)
  return _internal_to_call_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_to_call_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.to_call_price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.to_call_price)
}
inline std::string* SecurityCalcIndex::mutable_to_call_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_to_call_price();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.to_call_price)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_to_call_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.to_call_price_.Get();
}
inline void SecurityCalcIndex::_internal_set_to_call_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.to_call_price_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_to_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.to_call_price_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_to_call_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.to_call_price)
  return _impl_.to_call_price_.Release();
}
inline void SecurityCalcIndex::set_allocated_to_call_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_call_price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.to_call_price_.IsDefault()) {
          _impl_.to_call_price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.to_call_price)
}

// string effective_leverage = 32 [json_name = "effectiveLeverage"];
inline void SecurityCalcIndex::clear_effective_leverage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.effective_leverage_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::effective_leverage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.effective_leverage)
  return _internal_effective_leverage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_effective_leverage(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.effective_leverage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.effective_leverage)
}
inline std::string* SecurityCalcIndex::mutable_effective_leverage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_effective_leverage();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.effective_leverage)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_effective_leverage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.effective_leverage_.Get();
}
inline void SecurityCalcIndex::_internal_set_effective_leverage(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.effective_leverage_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_effective_leverage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.effective_leverage_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_effective_leverage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.effective_leverage)
  return _impl_.effective_leverage_.Release();
}
inline void SecurityCalcIndex::set_allocated_effective_leverage(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.effective_leverage_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.effective_leverage_.IsDefault()) {
          _impl_.effective_leverage_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.effective_leverage)
}

// string leverage_ratio = 33 [json_name = "leverageRatio"];
inline void SecurityCalcIndex::clear_leverage_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leverage_ratio_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::leverage_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.leverage_ratio)
  return _internal_leverage_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_leverage_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.leverage_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.leverage_ratio)
}
inline std::string* SecurityCalcIndex::mutable_leverage_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leverage_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.leverage_ratio)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_leverage_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leverage_ratio_.Get();
}
inline void SecurityCalcIndex::_internal_set_leverage_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.leverage_ratio_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_leverage_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.leverage_ratio_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_leverage_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.leverage_ratio)
  return _impl_.leverage_ratio_.Release();
}
inline void SecurityCalcIndex::set_allocated_leverage_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leverage_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.leverage_ratio_.IsDefault()) {
          _impl_.leverage_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.leverage_ratio)
}

// string conversion_ratio = 34 [json_name = "conversionRatio"];
inline void SecurityCalcIndex::clear_conversion_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.conversion_ratio_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::conversion_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.conversion_ratio)
  return _internal_conversion_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_conversion_ratio(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.conversion_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.conversion_ratio)
}
inline std::string* SecurityCalcIndex::mutable_conversion_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversion_ratio();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.conversion_ratio)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_conversion_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.conversion_ratio_.Get();
}
inline void SecurityCalcIndex::_internal_set_conversion_ratio(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.conversion_ratio_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_conversion_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.conversion_ratio_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_conversion_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.conversion_ratio)
  return _impl_.conversion_ratio_.Release();
}
inline void SecurityCalcIndex::set_allocated_conversion_ratio(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.conversion_ratio_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.conversion_ratio_.IsDefault()) {
          _impl_.conversion_ratio_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.conversion_ratio)
}

// string balance_point = 35 [json_name = "balancePoint"];
inline void SecurityCalcIndex::clear_balance_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.balance_point_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::balance_point() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.balance_point)
  return _internal_balance_point();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_balance_point(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.balance_point_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.balance_point)
}
inline std::string* SecurityCalcIndex::mutable_balance_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_balance_point();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.balance_point)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_balance_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.balance_point_.Get();
}
inline void SecurityCalcIndex::_internal_set_balance_point(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.balance_point_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_balance_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.balance_point_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_balance_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.balance_point)
  return _impl_.balance_point_.Release();
}
inline void SecurityCalcIndex::set_allocated_balance_point(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.balance_point_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.balance_point_.IsDefault()) {
          _impl_.balance_point_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.balance_point)
}

// int64 open_interest = 36 [json_name = "openInterest"];
inline void SecurityCalcIndex::clear_open_interest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_interest_ = ::int64_t{0};
}
inline ::int64_t SecurityCalcIndex::open_interest() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.open_interest)
  return _internal_open_interest();
}
inline void SecurityCalcIndex::set_open_interest(::int64_t value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.open_interest)
}
inline ::int64_t SecurityCalcIndex::_internal_open_interest() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_interest_;
}
inline void SecurityCalcIndex::_internal_set_open_interest(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_interest_ = value;
}

// string delta = 37 [json_name = "delta"];
inline void SecurityCalcIndex::clear_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delta_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::delta() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.delta)
  return _internal_delta();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_delta(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delta_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.delta)
}
inline std::string* SecurityCalcIndex::mutable_delta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_delta();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.delta)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_delta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delta_.Get();
}
inline void SecurityCalcIndex::_internal_set_delta(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delta_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.delta_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.delta)
  return _impl_.delta_.Release();
}
inline void SecurityCalcIndex::set_allocated_delta(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delta_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.delta_.IsDefault()) {
          _impl_.delta_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.delta)
}

// string gamma = 38 [json_name = "gamma"];
inline void SecurityCalcIndex::clear_gamma() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gamma_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::gamma() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.gamma)
  return _internal_gamma();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_gamma(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gamma_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.gamma)
}
inline std::string* SecurityCalcIndex::mutable_gamma() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gamma();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.gamma)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_gamma() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gamma_.Get();
}
inline void SecurityCalcIndex::_internal_set_gamma(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gamma_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_gamma() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.gamma_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_gamma() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.gamma)
  return _impl_.gamma_.Release();
}
inline void SecurityCalcIndex::set_allocated_gamma(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gamma_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gamma_.IsDefault()) {
          _impl_.gamma_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.gamma)
}

// string theta = 39 [json_name = "theta"];
inline void SecurityCalcIndex::clear_theta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.theta_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::theta() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.theta)
  return _internal_theta();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_theta(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.theta_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.theta)
}
inline std::string* SecurityCalcIndex::mutable_theta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_theta();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.theta)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_theta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.theta_.Get();
}
inline void SecurityCalcIndex::_internal_set_theta(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.theta_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_theta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.theta_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_theta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.theta)
  return _impl_.theta_.Release();
}
inline void SecurityCalcIndex::set_allocated_theta(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.theta_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.theta_.IsDefault()) {
          _impl_.theta_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.theta)
}

// string vega = 40 [json_name = "vega"];
inline void SecurityCalcIndex::clear_vega() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vega_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::vega() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.vega)
  return _internal_vega();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_vega(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vega_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.vega)
}
inline std::string* SecurityCalcIndex::mutable_vega() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vega();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.vega)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_vega() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vega_.Get();
}
inline void SecurityCalcIndex::_internal_set_vega(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vega_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_vega() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.vega_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_vega() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.vega)
  return _impl_.vega_.Release();
}
inline void SecurityCalcIndex::set_allocated_vega(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vega_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vega_.IsDefault()) {
          _impl_.vega_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.vega)
}

// string rho = 41 [json_name = "rho"];
inline void SecurityCalcIndex::clear_rho() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rho_.ClearToEmpty();
}
inline const std::string& SecurityCalcIndex::rho() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcIndex.rho)
  return _internal_rho();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityCalcIndex::set_rho(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rho_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityCalcIndex.rho)
}
inline std::string* SecurityCalcIndex::mutable_rho() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rho();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcIndex.rho)
  return _s;
}
inline const std::string& SecurityCalcIndex::_internal_rho() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rho_.Get();
}
inline void SecurityCalcIndex::_internal_set_rho(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rho_.Set(value, GetArena());
}
inline std::string* SecurityCalcIndex::_internal_mutable_rho() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rho_.Mutable( GetArena());
}
inline std::string* SecurityCalcIndex::release_rho() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityCalcIndex.rho)
  return _impl_.rho_.Release();
}
inline void SecurityCalcIndex::set_allocated_rho(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rho_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rho_.IsDefault()) {
          _impl_.rho_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityCalcIndex.rho)
}

// -------------------------------------------------------------------

// SecurityCalcQuoteResponse

// repeated .longportapp.quote.v1.SecurityCalcIndex security_calc_index = 1 [json_name = "securityCalcIndex"];
inline int SecurityCalcQuoteResponse::_internal_security_calc_index_size() const {
  return _internal_security_calc_index().size();
}
inline int SecurityCalcQuoteResponse::security_calc_index_size() const {
  return _internal_security_calc_index_size();
}
inline void SecurityCalcQuoteResponse::clear_security_calc_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.security_calc_index_.Clear();
}
inline ::longportapp::quote::v1::SecurityCalcIndex* SecurityCalcQuoteResponse::mutable_security_calc_index(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityCalcQuoteResponse.security_calc_index)
  return _internal_mutable_security_calc_index()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityCalcIndex>* SecurityCalcQuoteResponse::mutable_security_calc_index()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.SecurityCalcQuoteResponse.security_calc_index)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_security_calc_index();
}
inline const ::longportapp::quote::v1::SecurityCalcIndex& SecurityCalcQuoteResponse::security_calc_index(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityCalcQuoteResponse.security_calc_index)
  return _internal_security_calc_index().Get(index);
}
inline ::longportapp::quote::v1::SecurityCalcIndex* SecurityCalcQuoteResponse::add_security_calc_index() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::SecurityCalcIndex* _add = _internal_mutable_security_calc_index()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.SecurityCalcQuoteResponse.security_calc_index)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityCalcIndex>& SecurityCalcQuoteResponse::security_calc_index() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.SecurityCalcQuoteResponse.security_calc_index)
  return _internal_security_calc_index();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityCalcIndex>&
SecurityCalcQuoteResponse::_internal_security_calc_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.security_calc_index_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::SecurityCalcIndex>*
SecurityCalcQuoteResponse::_internal_mutable_security_calc_index() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.security_calc_index_;
}

// -------------------------------------------------------------------

// SecurityHistoryCandlestickRequest_OffsetQuery

// .longportapp.quote.v1.Direction direction = 1 [json_name = "direction"];
inline void SecurityHistoryCandlestickRequest_OffsetQuery::clear_direction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.direction_ = 0;
}
inline ::longportapp::quote::v1::Direction SecurityHistoryCandlestickRequest_OffsetQuery::direction() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.direction)
  return _internal_direction();
}
inline void SecurityHistoryCandlestickRequest_OffsetQuery::set_direction(::longportapp::quote::v1::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.direction)
}
inline ::longportapp::quote::v1::Direction SecurityHistoryCandlestickRequest_OffsetQuery::_internal_direction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::Direction>(_impl_.direction_);
}
inline void SecurityHistoryCandlestickRequest_OffsetQuery::_internal_set_direction(::longportapp::quote::v1::Direction value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.direction_ = value;
}

// string date = 2 [json_name = "date"];
inline void SecurityHistoryCandlestickRequest_OffsetQuery::clear_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.date_.ClearToEmpty();
}
inline const std::string& SecurityHistoryCandlestickRequest_OffsetQuery::date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.date)
  return _internal_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityHistoryCandlestickRequest_OffsetQuery::set_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.date)
}
inline std::string* SecurityHistoryCandlestickRequest_OffsetQuery::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.date)
  return _s;
}
inline const std::string& SecurityHistoryCandlestickRequest_OffsetQuery::_internal_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.date_.Get();
}
inline void SecurityHistoryCandlestickRequest_OffsetQuery::_internal_set_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.date_.Set(value, GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest_OffsetQuery::_internal_mutable_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.date_.Mutable( GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest_OffsetQuery::release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.date)
  return _impl_.date_.Release();
}
inline void SecurityHistoryCandlestickRequest_OffsetQuery::set_allocated_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.date_.IsDefault()) {
          _impl_.date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.date)
}

// string minute = 3 [json_name = "minute"];
inline void SecurityHistoryCandlestickRequest_OffsetQuery::clear_minute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.minute_.ClearToEmpty();
}
inline const std::string& SecurityHistoryCandlestickRequest_OffsetQuery::minute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.minute)
  return _internal_minute();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityHistoryCandlestickRequest_OffsetQuery::set_minute(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minute_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.minute)
}
inline std::string* SecurityHistoryCandlestickRequest_OffsetQuery::mutable_minute() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_minute();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.minute)
  return _s;
}
inline const std::string& SecurityHistoryCandlestickRequest_OffsetQuery::_internal_minute() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minute_.Get();
}
inline void SecurityHistoryCandlestickRequest_OffsetQuery::_internal_set_minute(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minute_.Set(value, GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest_OffsetQuery::_internal_mutable_minute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.minute_.Mutable( GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest_OffsetQuery::release_minute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.minute)
  return _impl_.minute_.Release();
}
inline void SecurityHistoryCandlestickRequest_OffsetQuery::set_allocated_minute(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.minute_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.minute_.IsDefault()) {
          _impl_.minute_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.minute)
}

// int32 count = 4 [json_name = "count"];
inline void SecurityHistoryCandlestickRequest_OffsetQuery::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = 0;
}
inline ::int32_t SecurityHistoryCandlestickRequest_OffsetQuery::count() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.count)
  return _internal_count();
}
inline void SecurityHistoryCandlestickRequest_OffsetQuery::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery.count)
}
inline ::int32_t SecurityHistoryCandlestickRequest_OffsetQuery::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void SecurityHistoryCandlestickRequest_OffsetQuery::_internal_set_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// SecurityHistoryCandlestickRequest_DateQuery

// string start_date = 1 [json_name = "startDate"];
inline void SecurityHistoryCandlestickRequest_DateQuery::clear_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_date_.ClearToEmpty();
}
inline const std::string& SecurityHistoryCandlestickRequest_DateQuery::start_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.start_date)
  return _internal_start_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityHistoryCandlestickRequest_DateQuery::set_start_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.start_date)
}
inline std::string* SecurityHistoryCandlestickRequest_DateQuery::mutable_start_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_start_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.start_date)
  return _s;
}
inline const std::string& SecurityHistoryCandlestickRequest_DateQuery::_internal_start_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_date_.Get();
}
inline void SecurityHistoryCandlestickRequest_DateQuery::_internal_set_start_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_date_.Set(value, GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest_DateQuery::_internal_mutable_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.start_date_.Mutable( GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest_DateQuery::release_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.start_date)
  return _impl_.start_date_.Release();
}
inline void SecurityHistoryCandlestickRequest_DateQuery::set_allocated_start_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.start_date_.IsDefault()) {
          _impl_.start_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.start_date)
}

// string end_date = 2 [json_name = "endDate"];
inline void SecurityHistoryCandlestickRequest_DateQuery::clear_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_date_.ClearToEmpty();
}
inline const std::string& SecurityHistoryCandlestickRequest_DateQuery::end_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.end_date)
  return _internal_end_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityHistoryCandlestickRequest_DateQuery::set_end_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.end_date)
}
inline std::string* SecurityHistoryCandlestickRequest_DateQuery::mutable_end_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_end_date();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.end_date)
  return _s;
}
inline const std::string& SecurityHistoryCandlestickRequest_DateQuery::_internal_end_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_date_.Get();
}
inline void SecurityHistoryCandlestickRequest_DateQuery::_internal_set_end_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_date_.Set(value, GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest_DateQuery::_internal_mutable_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.end_date_.Mutable( GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest_DateQuery::release_end_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.end_date)
  return _impl_.end_date_.Release();
}
inline void SecurityHistoryCandlestickRequest_DateQuery::set_allocated_end_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.end_date_.IsDefault()) {
          _impl_.end_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery.end_date)
}

// -------------------------------------------------------------------

// SecurityHistoryCandlestickRequest

// string symbol = 1 [json_name = "symbol"];
inline void SecurityHistoryCandlestickRequest::clear_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SecurityHistoryCandlestickRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecurityHistoryCandlestickRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.symbol)
}
inline std::string* SecurityHistoryCandlestickRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityHistoryCandlestickRequest.symbol)
  return _s;
}
inline const std::string& SecurityHistoryCandlestickRequest::_internal_symbol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.symbol_.Get();
}
inline void SecurityHistoryCandlestickRequest::_internal_set_symbol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest::_internal_mutable_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SecurityHistoryCandlestickRequest::release_symbol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityHistoryCandlestickRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void SecurityHistoryCandlestickRequest::set_allocated_symbol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.symbol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityHistoryCandlestickRequest.symbol)
}

// .longportapp.quote.v1.Period period = 2 [json_name = "period"];
inline void SecurityHistoryCandlestickRequest::clear_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.period_ = 0;
}
inline ::longportapp::quote::v1::Period SecurityHistoryCandlestickRequest::period() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.period)
  return _internal_period();
}
inline void SecurityHistoryCandlestickRequest::set_period(::longportapp::quote::v1::Period value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.period)
}
inline ::longportapp::quote::v1::Period SecurityHistoryCandlestickRequest::_internal_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::Period>(_impl_.period_);
}
inline void SecurityHistoryCandlestickRequest::_internal_set_period(::longportapp::quote::v1::Period value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.period_ = value;
}

// .longportapp.quote.v1.AdjustType adjust_type = 3 [json_name = "adjustType"];
inline void SecurityHistoryCandlestickRequest::clear_adjust_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adjust_type_ = 0;
}
inline ::longportapp::quote::v1::AdjustType SecurityHistoryCandlestickRequest::adjust_type() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.adjust_type)
  return _internal_adjust_type();
}
inline void SecurityHistoryCandlestickRequest::set_adjust_type(::longportapp::quote::v1::AdjustType value) {
  _internal_set_adjust_type(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.adjust_type)
}
inline ::longportapp::quote::v1::AdjustType SecurityHistoryCandlestickRequest::_internal_adjust_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::AdjustType>(_impl_.adjust_type_);
}
inline void SecurityHistoryCandlestickRequest::_internal_set_adjust_type(::longportapp::quote::v1::AdjustType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adjust_type_ = value;
}

// .longportapp.quote.v1.HistoryCandlestickQueryType query_type = 4 [json_name = "queryType"];
inline void SecurityHistoryCandlestickRequest::clear_query_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_type_ = 0;
}
inline ::longportapp::quote::v1::HistoryCandlestickQueryType SecurityHistoryCandlestickRequest::query_type() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.query_type)
  return _internal_query_type();
}
inline void SecurityHistoryCandlestickRequest::set_query_type(::longportapp::quote::v1::HistoryCandlestickQueryType value) {
  _internal_set_query_type(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.SecurityHistoryCandlestickRequest.query_type)
}
inline ::longportapp::quote::v1::HistoryCandlestickQueryType SecurityHistoryCandlestickRequest::_internal_query_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::HistoryCandlestickQueryType>(_impl_.query_type_);
}
inline void SecurityHistoryCandlestickRequest::_internal_set_query_type(::longportapp::quote::v1::HistoryCandlestickQueryType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_type_ = value;
}

// .longportapp.quote.v1.SecurityHistoryCandlestickRequest.OffsetQuery offset_request = 5 [json_name = "offsetRequest"];
inline bool SecurityHistoryCandlestickRequest::has_offset_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.offset_request_ != nullptr);
  return value;
}
inline void SecurityHistoryCandlestickRequest::clear_offset_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.offset_request_ != nullptr) _impl_.offset_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery& SecurityHistoryCandlestickRequest::_internal_offset_request() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* p = _impl_.offset_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery&>(::longportapp::quote::v1::_SecurityHistoryCandlestickRequest_OffsetQuery_default_instance_);
}
inline const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery& SecurityHistoryCandlestickRequest::offset_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.offset_request)
  return _internal_offset_request();
}
inline void SecurityHistoryCandlestickRequest::unsafe_arena_set_allocated_offset_request(::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.offset_request_);
  }
  _impl_.offset_request_ = reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.SecurityHistoryCandlestickRequest.offset_request)
}
inline ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* SecurityHistoryCandlestickRequest::release_offset_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* released = _impl_.offset_request_;
  _impl_.offset_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* SecurityHistoryCandlestickRequest::unsafe_arena_release_offset_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityHistoryCandlestickRequest.offset_request)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* temp = _impl_.offset_request_;
  _impl_.offset_request_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* SecurityHistoryCandlestickRequest::_internal_mutable_offset_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.offset_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery>(GetArena());
    _impl_.offset_request_ = reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery*>(p);
  }
  return _impl_.offset_request_;
}
inline ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* SecurityHistoryCandlestickRequest::mutable_offset_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* _msg = _internal_mutable_offset_request();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityHistoryCandlestickRequest.offset_request)
  return _msg;
}
inline void SecurityHistoryCandlestickRequest::set_allocated_offset_request(::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery*>(_impl_.offset_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.offset_request_ = reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_OffsetQuery*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityHistoryCandlestickRequest.offset_request)
}

// .longportapp.quote.v1.SecurityHistoryCandlestickRequest.DateQuery date_request = 6 [json_name = "dateRequest"];
inline bool SecurityHistoryCandlestickRequest::has_date_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.date_request_ != nullptr);
  return value;
}
inline void SecurityHistoryCandlestickRequest::clear_date_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.date_request_ != nullptr) _impl_.date_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery& SecurityHistoryCandlestickRequest::_internal_date_request() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* p = _impl_.date_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery&>(::longportapp::quote::v1::_SecurityHistoryCandlestickRequest_DateQuery_default_instance_);
}
inline const ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery& SecurityHistoryCandlestickRequest::date_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.SecurityHistoryCandlestickRequest.date_request)
  return _internal_date_request();
}
inline void SecurityHistoryCandlestickRequest::unsafe_arena_set_allocated_date_request(::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.date_request_);
  }
  _impl_.date_request_ = reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.SecurityHistoryCandlestickRequest.date_request)
}
inline ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* SecurityHistoryCandlestickRequest::release_date_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* released = _impl_.date_request_;
  _impl_.date_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* SecurityHistoryCandlestickRequest::unsafe_arena_release_date_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.SecurityHistoryCandlestickRequest.date_request)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* temp = _impl_.date_request_;
  _impl_.date_request_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* SecurityHistoryCandlestickRequest::_internal_mutable_date_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.date_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery>(GetArena());
    _impl_.date_request_ = reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery*>(p);
  }
  return _impl_.date_request_;
}
inline ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* SecurityHistoryCandlestickRequest::mutable_date_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* _msg = _internal_mutable_date_request();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.SecurityHistoryCandlestickRequest.date_request)
  return _msg;
}
inline void SecurityHistoryCandlestickRequest::set_allocated_date_request(::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery*>(_impl_.date_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.date_request_ = reinterpret_cast<::longportapp::quote::v1::SecurityHistoryCandlestickRequest_DateQuery*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.SecurityHistoryCandlestickRequest.date_request)
}

// -------------------------------------------------------------------

// UserQuoteProfileRequest

// string language = 1 [json_name = "language"];
inline void UserQuoteProfileRequest::clear_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_.ClearToEmpty();
}
inline const std::string& UserQuoteProfileRequest::language() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteProfileRequest.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQuoteProfileRequest::set_language(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteProfileRequest.language)
}
inline std::string* UserQuoteProfileRequest::mutable_language() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UserQuoteProfileRequest.language)
  return _s;
}
inline const std::string& UserQuoteProfileRequest::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_.Get();
}
inline void UserQuoteProfileRequest::_internal_set_language(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(value, GetArena());
}
inline std::string* UserQuoteProfileRequest::_internal_mutable_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_.Mutable( GetArena());
}
inline std::string* UserQuoteProfileRequest::release_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.UserQuoteProfileRequest.language)
  return _impl_.language_.Release();
}
inline void UserQuoteProfileRequest::set_allocated_language(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_.IsDefault()) {
          _impl_.language_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.UserQuoteProfileRequest.language)
}

// -------------------------------------------------------------------

// RateLimit

// .longportapp.quote.v1.Command command = 1 [json_name = "command"];
inline void RateLimit::clear_command() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.command_ = 0;
}
inline ::longportapp::quote::v1::Command RateLimit::command() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.RateLimit.command)
  return _internal_command();
}
inline void RateLimit::set_command(::longportapp::quote::v1::Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.RateLimit.command)
}
inline ::longportapp::quote::v1::Command RateLimit::_internal_command() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::quote::v1::Command>(_impl_.command_);
}
inline void RateLimit::_internal_set_command(::longportapp::quote::v1::Command value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.command_ = value;
}

// int32 limit = 2 [json_name = "limit"];
inline void RateLimit::clear_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.limit_ = 0;
}
inline ::int32_t RateLimit::limit() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.RateLimit.limit)
  return _internal_limit();
}
inline void RateLimit::set_limit(::int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.RateLimit.limit)
}
inline ::int32_t RateLimit::_internal_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.limit_;
}
inline void RateLimit::_internal_set_limit(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.limit_ = value;
}

// int32 burst = 3 [json_name = "burst"];
inline void RateLimit::clear_burst() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.burst_ = 0;
}
inline ::int32_t RateLimit::burst() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.RateLimit.burst)
  return _internal_burst();
}
inline void RateLimit::set_burst(::int32_t value) {
  _internal_set_burst(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.RateLimit.burst)
}
inline ::int32_t RateLimit::_internal_burst() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.burst_;
}
inline void RateLimit::_internal_set_burst(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.burst_ = value;
}

// -------------------------------------------------------------------

// UserQuoteLevelDetail_PackageDetail

// string key = 1 [json_name = "key"];
inline void UserQuoteLevelDetail_PackageDetail::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& UserQuoteLevelDetail_PackageDetail::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQuoteLevelDetail_PackageDetail::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.key)
}
inline std::string* UserQuoteLevelDetail_PackageDetail::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.key)
  return _s;
}
inline const std::string& UserQuoteLevelDetail_PackageDetail::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void UserQuoteLevelDetail_PackageDetail::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArena());
}
inline std::string* UserQuoteLevelDetail_PackageDetail::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* UserQuoteLevelDetail_PackageDetail::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.key)
  return _impl_.key_.Release();
}
inline void UserQuoteLevelDetail_PackageDetail::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.key)
}

// string name = 2 [json_name = "name"];
inline void UserQuoteLevelDetail_PackageDetail::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserQuoteLevelDetail_PackageDetail::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQuoteLevelDetail_PackageDetail::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.name)
}
inline std::string* UserQuoteLevelDetail_PackageDetail::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.name)
  return _s;
}
inline const std::string& UserQuoteLevelDetail_PackageDetail::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void UserQuoteLevelDetail_PackageDetail::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* UserQuoteLevelDetail_PackageDetail::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* UserQuoteLevelDetail_PackageDetail::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.name)
  return _impl_.name_.Release();
}
inline void UserQuoteLevelDetail_PackageDetail::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.name)
}

// string description = 4 [json_name = "description"];
inline void UserQuoteLevelDetail_PackageDetail::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UserQuoteLevelDetail_PackageDetail::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQuoteLevelDetail_PackageDetail::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.description)
}
inline std::string* UserQuoteLevelDetail_PackageDetail::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.description)
  return _s;
}
inline const std::string& UserQuoteLevelDetail_PackageDetail::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void UserQuoteLevelDetail_PackageDetail::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* UserQuoteLevelDetail_PackageDetail::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* UserQuoteLevelDetail_PackageDetail::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.description)
  return _impl_.description_.Release();
}
inline void UserQuoteLevelDetail_PackageDetail::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.description)
}

// int64 start = 5 [json_name = "start"];
inline void UserQuoteLevelDetail_PackageDetail::clear_start() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_ = ::int64_t{0};
}
inline ::int64_t UserQuoteLevelDetail_PackageDetail::start() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.start)
  return _internal_start();
}
inline void UserQuoteLevelDetail_PackageDetail::set_start(::int64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.start)
}
inline ::int64_t UserQuoteLevelDetail_PackageDetail::_internal_start() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_;
}
inline void UserQuoteLevelDetail_PackageDetail::_internal_set_start(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_ = value;
}

// int64 end = 6 [json_name = "end"];
inline void UserQuoteLevelDetail_PackageDetail::clear_end() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_ = ::int64_t{0};
}
inline ::int64_t UserQuoteLevelDetail_PackageDetail::end() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.end)
  return _internal_end();
}
inline void UserQuoteLevelDetail_PackageDetail::set_end(::int64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail.end)
}
inline ::int64_t UserQuoteLevelDetail_PackageDetail::_internal_end() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_;
}
inline void UserQuoteLevelDetail_PackageDetail::_internal_set_end(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_ = value;
}

// -------------------------------------------------------------------

// UserQuoteLevelDetail_MarketPackageDetail

// repeated .longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail packages = 1 [json_name = "packages"];
inline int UserQuoteLevelDetail_MarketPackageDetail::_internal_packages_size() const {
  return _internal_packages().size();
}
inline int UserQuoteLevelDetail_MarketPackageDetail::packages_size() const {
  return _internal_packages_size();
}
inline void UserQuoteLevelDetail_MarketPackageDetail::clear_packages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.packages_.Clear();
}
inline ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail* UserQuoteLevelDetail_MarketPackageDetail::mutable_packages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.packages)
  return _internal_mutable_packages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>* UserQuoteLevelDetail_MarketPackageDetail::mutable_packages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.packages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_packages();
}
inline const ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail& UserQuoteLevelDetail_MarketPackageDetail::packages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.packages)
  return _internal_packages().Get(index);
}
inline ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail* UserQuoteLevelDetail_MarketPackageDetail::add_packages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail* _add = _internal_mutable_packages()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.packages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>& UserQuoteLevelDetail_MarketPackageDetail::packages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.packages)
  return _internal_packages();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>&
UserQuoteLevelDetail_MarketPackageDetail::_internal_packages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.packages_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>*
UserQuoteLevelDetail_MarketPackageDetail::_internal_mutable_packages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.packages_;
}

// string warning_msg = 4 [json_name = "warningMsg"];
inline void UserQuoteLevelDetail_MarketPackageDetail::clear_warning_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.warning_msg_.ClearToEmpty();
}
inline const std::string& UserQuoteLevelDetail_MarketPackageDetail::warning_msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.warning_msg)
  return _internal_warning_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQuoteLevelDetail_MarketPackageDetail::set_warning_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.warning_msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.warning_msg)
}
inline std::string* UserQuoteLevelDetail_MarketPackageDetail::mutable_warning_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_warning_msg();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.warning_msg)
  return _s;
}
inline const std::string& UserQuoteLevelDetail_MarketPackageDetail::_internal_warning_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.warning_msg_.Get();
}
inline void UserQuoteLevelDetail_MarketPackageDetail::_internal_set_warning_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.warning_msg_.Set(value, GetArena());
}
inline std::string* UserQuoteLevelDetail_MarketPackageDetail::_internal_mutable_warning_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.warning_msg_.Mutable( GetArena());
}
inline std::string* UserQuoteLevelDetail_MarketPackageDetail::release_warning_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.warning_msg)
  return _impl_.warning_msg_.Release();
}
inline void UserQuoteLevelDetail_MarketPackageDetail::set_allocated_warning_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.warning_msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.warning_msg_.IsDefault()) {
          _impl_.warning_msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail.warning_msg)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserQuoteLevelDetail

// map<string, .longportapp.quote.v1.UserQuoteLevelDetail.PackageDetail> by_package_key = 1 [json_name = "byPackageKey"];
inline int UserQuoteLevelDetail::_internal_by_package_key_size() const {
  return _internal_by_package_key().size();
}
inline int UserQuoteLevelDetail::by_package_key_size() const {
  return _internal_by_package_key_size();
}
inline void UserQuoteLevelDetail::clear_by_package_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.by_package_key_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>& UserQuoteLevelDetail::_internal_by_package_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.by_package_key_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>& UserQuoteLevelDetail::by_package_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:longportapp.quote.v1.UserQuoteLevelDetail.by_package_key)
  return _internal_by_package_key();
}
inline ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>* UserQuoteLevelDetail::_internal_mutable_by_package_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.by_package_key_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_PackageDetail>* UserQuoteLevelDetail::mutable_by_package_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:longportapp.quote.v1.UserQuoteLevelDetail.by_package_key)
  return _internal_mutable_by_package_key();
}

// map<string, .longportapp.quote.v1.UserQuoteLevelDetail.MarketPackageDetail> by_market_code = 2 [json_name = "byMarketCode"];
inline int UserQuoteLevelDetail::_internal_by_market_code_size() const {
  return _internal_by_market_code().size();
}
inline int UserQuoteLevelDetail::by_market_code_size() const {
  return _internal_by_market_code_size();
}
inline void UserQuoteLevelDetail::clear_by_market_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.by_market_code_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail>& UserQuoteLevelDetail::_internal_by_market_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.by_market_code_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail>& UserQuoteLevelDetail::by_market_code() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:longportapp.quote.v1.UserQuoteLevelDetail.by_market_code)
  return _internal_by_market_code();
}
inline ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail>* UserQuoteLevelDetail::_internal_mutable_by_market_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.by_market_code_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::longportapp::quote::v1::UserQuoteLevelDetail_MarketPackageDetail>* UserQuoteLevelDetail::mutable_by_market_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:longportapp.quote.v1.UserQuoteLevelDetail.by_market_code)
  return _internal_mutable_by_market_code();
}

// -------------------------------------------------------------------

// UserQuoteProfileResponse

// int64 member_id = 1 [json_name = "memberId"];
inline void UserQuoteProfileResponse::clear_member_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.member_id_ = ::int64_t{0};
}
inline ::int64_t UserQuoteProfileResponse::member_id() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteProfileResponse.member_id)
  return _internal_member_id();
}
inline void UserQuoteProfileResponse::set_member_id(::int64_t value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteProfileResponse.member_id)
}
inline ::int64_t UserQuoteProfileResponse::_internal_member_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.member_id_;
}
inline void UserQuoteProfileResponse::_internal_set_member_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.member_id_ = value;
}

// string quote_level = 2 [json_name = "quoteLevel"];
inline void UserQuoteProfileResponse::clear_quote_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quote_level_.ClearToEmpty();
}
inline const std::string& UserQuoteProfileResponse::quote_level() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteProfileResponse.quote_level)
  return _internal_quote_level();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQuoteProfileResponse::set_quote_level(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.quote_level_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteProfileResponse.quote_level)
}
inline std::string* UserQuoteProfileResponse::mutable_quote_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_quote_level();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UserQuoteProfileResponse.quote_level)
  return _s;
}
inline const std::string& UserQuoteProfileResponse::_internal_quote_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.quote_level_.Get();
}
inline void UserQuoteProfileResponse::_internal_set_quote_level(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.quote_level_.Set(value, GetArena());
}
inline std::string* UserQuoteProfileResponse::_internal_mutable_quote_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.quote_level_.Mutable( GetArena());
}
inline std::string* UserQuoteProfileResponse::release_quote_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.UserQuoteProfileResponse.quote_level)
  return _impl_.quote_level_.Release();
}
inline void UserQuoteProfileResponse::set_allocated_quote_level(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quote_level_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_level_.IsDefault()) {
          _impl_.quote_level_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.UserQuoteProfileResponse.quote_level)
}

// int32 subscribe_limit = 3 [json_name = "subscribeLimit"];
inline void UserQuoteProfileResponse::clear_subscribe_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscribe_limit_ = 0;
}
inline ::int32_t UserQuoteProfileResponse::subscribe_limit() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteProfileResponse.subscribe_limit)
  return _internal_subscribe_limit();
}
inline void UserQuoteProfileResponse::set_subscribe_limit(::int32_t value) {
  _internal_set_subscribe_limit(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteProfileResponse.subscribe_limit)
}
inline ::int32_t UserQuoteProfileResponse::_internal_subscribe_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subscribe_limit_;
}
inline void UserQuoteProfileResponse::_internal_set_subscribe_limit(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscribe_limit_ = value;
}

// int32 history_candlestick_limit = 4 [json_name = "historyCandlestickLimit"];
inline void UserQuoteProfileResponse::clear_history_candlestick_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.history_candlestick_limit_ = 0;
}
inline ::int32_t UserQuoteProfileResponse::history_candlestick_limit() const {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteProfileResponse.history_candlestick_limit)
  return _internal_history_candlestick_limit();
}
inline void UserQuoteProfileResponse::set_history_candlestick_limit(::int32_t value) {
  _internal_set_history_candlestick_limit(value);
  // @@protoc_insertion_point(field_set:longportapp.quote.v1.UserQuoteProfileResponse.history_candlestick_limit)
}
inline ::int32_t UserQuoteProfileResponse::_internal_history_candlestick_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.history_candlestick_limit_;
}
inline void UserQuoteProfileResponse::_internal_set_history_candlestick_limit(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.history_candlestick_limit_ = value;
}

// repeated .longportapp.quote.v1.RateLimit rate_limit = 5 [json_name = "rateLimit"];
inline int UserQuoteProfileResponse::_internal_rate_limit_size() const {
  return _internal_rate_limit().size();
}
inline int UserQuoteProfileResponse::rate_limit_size() const {
  return _internal_rate_limit_size();
}
inline void UserQuoteProfileResponse::clear_rate_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rate_limit_.Clear();
}
inline ::longportapp::quote::v1::RateLimit* UserQuoteProfileResponse::mutable_rate_limit(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UserQuoteProfileResponse.rate_limit)
  return _internal_mutable_rate_limit()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::RateLimit>* UserQuoteProfileResponse::mutable_rate_limit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:longportapp.quote.v1.UserQuoteProfileResponse.rate_limit)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_rate_limit();
}
inline const ::longportapp::quote::v1::RateLimit& UserQuoteProfileResponse::rate_limit(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteProfileResponse.rate_limit)
  return _internal_rate_limit().Get(index);
}
inline ::longportapp::quote::v1::RateLimit* UserQuoteProfileResponse::add_rate_limit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::longportapp::quote::v1::RateLimit* _add = _internal_mutable_rate_limit()->Add();
  // @@protoc_insertion_point(field_add:longportapp.quote.v1.UserQuoteProfileResponse.rate_limit)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::RateLimit>& UserQuoteProfileResponse::rate_limit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:longportapp.quote.v1.UserQuoteProfileResponse.rate_limit)
  return _internal_rate_limit();
}
inline const ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::RateLimit>&
UserQuoteProfileResponse::_internal_rate_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rate_limit_;
}
inline ::google::protobuf::RepeatedPtrField<::longportapp::quote::v1::RateLimit>*
UserQuoteProfileResponse::_internal_mutable_rate_limit() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.rate_limit_;
}

// .longportapp.quote.v1.UserQuoteLevelDetail quote_level_detail = 6 [json_name = "quoteLevelDetail"];
inline bool UserQuoteProfileResponse::has_quote_level_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.quote_level_detail_ != nullptr);
  return value;
}
inline void UserQuoteProfileResponse::clear_quote_level_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.quote_level_detail_ != nullptr) _impl_.quote_level_detail_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::longportapp::quote::v1::UserQuoteLevelDetail& UserQuoteProfileResponse::_internal_quote_level_detail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::longportapp::quote::v1::UserQuoteLevelDetail* p = _impl_.quote_level_detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::longportapp::quote::v1::UserQuoteLevelDetail&>(::longportapp::quote::v1::_UserQuoteLevelDetail_default_instance_);
}
inline const ::longportapp::quote::v1::UserQuoteLevelDetail& UserQuoteProfileResponse::quote_level_detail() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:longportapp.quote.v1.UserQuoteProfileResponse.quote_level_detail)
  return _internal_quote_level_detail();
}
inline void UserQuoteProfileResponse::unsafe_arena_set_allocated_quote_level_detail(::longportapp::quote::v1::UserQuoteLevelDetail* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quote_level_detail_);
  }
  _impl_.quote_level_detail_ = reinterpret_cast<::longportapp::quote::v1::UserQuoteLevelDetail*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:longportapp.quote.v1.UserQuoteProfileResponse.quote_level_detail)
}
inline ::longportapp::quote::v1::UserQuoteLevelDetail* UserQuoteProfileResponse::release_quote_level_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::UserQuoteLevelDetail* released = _impl_.quote_level_detail_;
  _impl_.quote_level_detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::longportapp::quote::v1::UserQuoteLevelDetail* UserQuoteProfileResponse::unsafe_arena_release_quote_level_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.quote.v1.UserQuoteProfileResponse.quote_level_detail)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::longportapp::quote::v1::UserQuoteLevelDetail* temp = _impl_.quote_level_detail_;
  _impl_.quote_level_detail_ = nullptr;
  return temp;
}
inline ::longportapp::quote::v1::UserQuoteLevelDetail* UserQuoteProfileResponse::_internal_mutable_quote_level_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.quote_level_detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::longportapp::quote::v1::UserQuoteLevelDetail>(GetArena());
    _impl_.quote_level_detail_ = reinterpret_cast<::longportapp::quote::v1::UserQuoteLevelDetail*>(p);
  }
  return _impl_.quote_level_detail_;
}
inline ::longportapp::quote::v1::UserQuoteLevelDetail* UserQuoteProfileResponse::mutable_quote_level_detail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::longportapp::quote::v1::UserQuoteLevelDetail* _msg = _internal_mutable_quote_level_detail();
  // @@protoc_insertion_point(field_mutable:longportapp.quote.v1.UserQuoteProfileResponse.quote_level_detail)
  return _msg;
}
inline void UserQuoteProfileResponse::set_allocated_quote_level_detail(::longportapp::quote::v1::UserQuoteLevelDetail* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::longportapp::quote::v1::UserQuoteLevelDetail*>(_impl_.quote_level_detail_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::longportapp::quote::v1::UserQuoteLevelDetail*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.quote_level_detail_ = reinterpret_cast<::longportapp::quote::v1::UserQuoteLevelDetail*>(value);
  // @@protoc_insertion_point(field_set_allocated:longportapp.quote.v1.UserQuoteProfileResponse.quote_level_detail)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace quote
}  // namespace longportapp


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::longportapp::quote::v1::Command> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::Command>() {
  return ::longportapp::quote::v1::Command_descriptor();
}
template <>
struct is_proto_enum<::longportapp::quote::v1::TradeStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::TradeStatus>() {
  return ::longportapp::quote::v1::TradeStatus_descriptor();
}
template <>
struct is_proto_enum<::longportapp::quote::v1::TradeSession> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::TradeSession>() {
  return ::longportapp::quote::v1::TradeSession_descriptor();
}
template <>
struct is_proto_enum<::longportapp::quote::v1::AdjustType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::AdjustType>() {
  return ::longportapp::quote::v1::AdjustType_descriptor();
}
template <>
struct is_proto_enum<::longportapp::quote::v1::Period> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::Period>() {
  return ::longportapp::quote::v1::Period_descriptor();
}
template <>
struct is_proto_enum<::longportapp::quote::v1::SubType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::SubType>() {
  return ::longportapp::quote::v1::SubType_descriptor();
}
template <>
struct is_proto_enum<::longportapp::quote::v1::PushQuoteTag> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::PushQuoteTag>() {
  return ::longportapp::quote::v1::PushQuoteTag_descriptor();
}
template <>
struct is_proto_enum<::longportapp::quote::v1::CalcIndex> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::CalcIndex>() {
  return ::longportapp::quote::v1::CalcIndex_descriptor();
}
template <>
struct is_proto_enum<::longportapp::quote::v1::HistoryCandlestickQueryType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::HistoryCandlestickQueryType>() {
  return ::longportapp::quote::v1::HistoryCandlestickQueryType_descriptor();
}
template <>
struct is_proto_enum<::longportapp::quote::v1::Direction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::quote::v1::Direction>() {
  return ::longportapp::quote::v1::Direction_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_quote_2fapi_2eproto_2epb_2eh
